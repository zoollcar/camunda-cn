<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Camunda 中文站</title>
    <link>http://camunda-cn.shaochenfeng.com/</link>
    <description>Recent content on Camunda 中文站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="http://camunda-cn.shaochenfeng.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Install the Camunda Modeler</title>
      <link>http://camunda-cn.shaochenfeng.com/installation/camunda-modeler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/installation/camunda-modeler/</guid>
      <description>This page explains how to install the Camunda Modeler for modeling BPMN 2.0 diagrams, CMMN 1.1 cases and DMN 1.3 decision tables.
Requirements Operation Systems Officially supported on the following operating systems:
 Windows 7 / 10 Mac OS X 10.11 and later Ubuntu LTS (latest)  Reported to work on these operating systems, too:
 Ubuntu 12.04 and later Fedora 21 Debian 8  Matching Camunda Process Engine Version For executing BPMN Diagrams created using Camunda Modeler, Process Engine version 7.</description>
    </item>
    
    <item>
      <title>Dashboard</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/cmmn/dashboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/cmmn/dashboard/</guid>
      <description>Enterprise FeaturePlease note that this feature is only included in the enterprise edition of the Camunda Platform, it is not available in the community edition.
Check the Camunda enterprise homepagefor more information or get yourfree trial version.The CMMN Cases dashboard of Cockpit is the entry point for case monitoring. It comes with a pre-installed plugin, which lets you see deployed case definitions. Additional plugins can be added to the cases dashboard.</description>
    </item>
    
    <item>
      <title>Dashboard</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/dmn/dashboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/dmn/dashboard/</guid>
      <description>The decisions dashboard of Cockpit is the entry point for decision monitoring. It comes with a pre-installed plugin, which lets you see deployed decision definitions. Additional plugins can be added to the decisions dashboard.
Deployed Decisions This plugin provides you with a list of deployed decision definitions. You can click on the name of a decision to go to the decision definition view and access more details, like the DMN table or executed decision instances view.</description>
    </item>
    
    <item>
      <title>Install Camunda Platform Run</title>
      <link>http://camunda-cn.shaochenfeng.com/installation/camunda-bpm-run/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/installation/camunda-bpm-run/</guid>
      <description>What is a Remote Engine Distribution?If you need a Remote or Shared Engine Distribution depends on your use-case. Check out the architecture overview for more information.
This page describes the steps to execute Camunda Platform Run.
Requirements Please make sure that you have the Java Runtime Environment 8+ installed.
You can verify this by using your terminal, shell, or command line:
java -version  If you need to install Java Runtime Environment, you can find the download from Oracle here.</description>
    </item>
    
    <item>
      <title>1.0 to 1.1</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/cmmn11/migration/10-to-11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/cmmn11/migration/10-to-11/</guid>
      <description>In order to update existing CMMN 1.0 XMLs to valid CMMN 1.1 the following adjustments must be done.
 The namespace must be updated as follows:  Affected Elements Definitions   CMMN 1.0 &amp;lt;definitions xmlns=&amp;ldquo;http://www.omg.org/spec/CMMN/20131201/MODEL&amp;quot;&amp;gt;   CMMN 1.1 &amp;lt;definitions xmlns=&amp;ldquo;http://www.omg.org/spec/CMMN/20151109/MODEL&amp;quot;&amp;gt;  
 The &amp;lt;body/&amp;gt; element from expressions must be removed:  Affected Elements Condition   CMMN 1.0  &amp;lt;condition&amp;gt; &amp;nbsp;&amp;nbsp; &amp;lt;body&amp;gt;${any-expression}&amp;lt;body&amp;gt; &amp;lt;/condition&amp;gt;    CMMN 1.</description>
    </item>
    
    <item>
      <title>Batch operation</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/batch/batch-operation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/batch/batch-operation/</guid>
      <description>Enterprise FeaturePlease note that this feature is only included in the enterprise edition of the Camunda Platform, it is not available in the community edition.
Check the Camunda enterprise homepagefor more information or get yourfree trial version.Definition Of Operation It is possible to execute the following batch operations:
 Delete running process instances. Delete finished process instances. Set retries of Jobs belonging to process instances.</description>
    </item>
    
    <item>
      <title>Camunda BPMN Extension Elements</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/custom-extensions/extension-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/custom-extensions/extension-elements/</guid>
      <description>The following attributes are extension attributes for the camunda namespace http://camunda.org/schema/1.0/bpmn.
connector  Description The configuration of a camunda connector.    Attributes &amp;ndash;   Constraints The camunda:connectorId child element is required and must identify a connector implementation known to the process engine    Parent elements Service Task, Business Rule Task, Send Task, Message Event Definition of Message Intermediate Throwing Event or Message End Event,    Child elements camunda:inputOutput, camunda:connectorId    connectorId  Description The unique identifier of the connector type to instantiate.</description>
    </item>
    
    <item>
      <title>Camunda Platform Services</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/runtime-container-integration/bpm-platform-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/runtime-container-integration/bpm-platform-services/</guid>
      <description>To inspect the current state of configured process engines and deployed process applications, the class org.camunda.bpm.BpmPlatform offers access to the ProcessEngineService and the ProcessApplicationService.
ProcessEngineService The ProcessEngineServicecan be accessed by calling BpmPlatform.getProcessEngineService(). It offers access to the default process engine, as well as any process engine by its name as specified in the process engine configuration. It returns ProcessEngine objects from which any services for a specific engine can be accessed.</description>
    </item>
    
    <item>
      <title>Case Definition View</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/cmmn/case-definition-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/cmmn/case-definition-view/</guid>
      <description>Enterprise FeaturePlease note that this feature is only included in the enterprise edition of the Camunda Platform, it is not available in the community edition.
Check the Camunda enterprise homepagefor more information or get yourfree trial version.On the case definition view, you can find a diagram of the deployed case definition. Use the mouse to navigate through the diagram. By turning the mouse wheel you can zoom in and out.</description>
    </item>
    
    <item>
      <title>Classic vs Fluent API</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/cmmn11/api/classic-vs-fluent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/cmmn11/api/classic-vs-fluent/</guid>
      <description>To interact with case instances and executions, the process engine offers the case service. It can be retrieved by processEngine.getCaseService().
The CaseService offers two API variants. One is in the following referred to as the classic API, since it is very similar to the API offered by the RuntimeService for BPMN processes. The fluent API follows a different concept in that it allows composition of case service commands by method chaining.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/extend/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/extend/configuration/</guid>
      <description>You can override the default configuration of Cockpit using a central configuration file located in app/cockpit/scripts/config.js. The following configuration options are available:
Logo and Header Color You can change the visual aspects of Cockpit. The user stylesheet file is located in app/cockpit/styles/user-styles.css. This file contains CSS which is loaded into Cockpit and can override the standard styles.
/* hides the Camunda logo */ .app-banner svg { display: none; } .</description>
    </item>
    
    <item>
      <title>Configure Authentication</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/overview/authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/overview/authentication/</guid>
      <description>The REST API ships with an implementation of HTTP Basic Authentication. By default it is switched off, but can be activated by adding a servlet filter as follows:
&amp;lt;filter&amp;gt; &amp;lt;filter-name&amp;gt;camunda-auth&amp;lt;/filter-name&amp;gt; &amp;lt;filter-class&amp;gt; org.camunda.bpm.engine.rest.security.auth.ProcessEngineAuthenticationFilter &amp;lt;/filter-class&amp;gt; &amp;lt;async-supported&amp;gt;true&amp;lt;/async-supported&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;authentication-provider&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;org.camunda.bpm.engine.rest.security.auth.impl.HttpBasicAuthenticationProvider&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;/filter&amp;gt; &amp;lt;filter-mapping&amp;gt; &amp;lt;filter-name&amp;gt;camunda-auth&amp;lt;/filter-name&amp;gt; &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt; &amp;lt;/filter-mapping&amp;gt;  Any engine-specific request will then be authenticated against that engine&amp;rsquo;s identity service. The GET /engine request that supplies a list of all available process engines is the only request that does not require authentication.</description>
    </item>
    
    <item>
      <title>Configure Telemetry</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/telemetry/port-telemetry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/telemetry/port-telemetry/</guid>
      <description>Configures whether Camunda receives data collection of the process engine setup and usage. For more information, please check the Telemetry page.
Method POST /telemetry/configuration
Parameters Request Body A JSON object with the following properties:
 Name Description   enableTelemetry Specifies if the data collection should be sent or not.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.</description>
    </item>
    
    <item>
      <title>Configure the DMN engine</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/decisions/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/decisions/configuration/</guid>
      <description>The configuration of the DMN engine is a part of the process engine configuration. It depends on whether you use an application managed or a shared, container managed process engine. Please refer to the Process Engine Bootstrapping for details.
This section shows how to configure the DMN engine:
 Programmatically via Java API Declarative via XML configuration  In the examples the default expression language of the input expressions is set to groovy.</description>
    </item>
    
    <item>
      <title>Configuring Spin Integration</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/data-formats/configuring-spin-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/data-formats/configuring-spin-integration/</guid>
      <description>To use Spin with the process engine, the following is required:
 The Spin libraries must be on the engine&amp;rsquo;s classpath The Spin process engine plugin must be registered with the process engine  The following sections go into the details of integrating Spin with the process engine. Note that when you use a pre-built Camunda distribution, Spin is already integrated.
Artifacts There are three types of Spin artifacts as follows.</description>
    </item>
    
    <item>
      <title>Container-Based Authentication</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/shared-options/container-based-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/shared-options/container-based-authentication/</guid>
      <description>What Is Container-Based Authentication? Camunda supports a broad range of containers, including Tomcat, JBoss, Wildfly, IBM WebSphere and Oracle WebLogic. Using Container-Based Authentication, it is possible to move the authentication action to the container level, which will then make the authentication result available to the Camunda Web Applications.
Enabling Container-Based Authentication The Container-Based Authentication implementation for the Web Applications is switched off by default, but can be activated by adding a servlet filter in the web.</description>
    </item>
    
    <item>
      <title>Correlate a Message</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/message/post-message/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/message/post-message/</guid>
      <description>Correlates a message to the process engine to either trigger a message start event or an intermediate message catching event. Internally this maps to the engine&amp;rsquo;s message correlation builder methods MessageCorrelationBuilder#correlateWithResult() and MessageCorrelationBuilder#correlateAllWithResult(). For more information about the correlation behavior, see the Message Events section of the BPMN 2.0 Implementation Reference.
Method POST /message
Parameters Request Body A JSON object with the following properties:
 Name Description   messageName The name of the message to deliver.</description>
    </item>
    
    <item>
      <title>Create Group Member</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/group/members/put/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/group/members/put/</guid>
      <description>Adds a member to a group.
Method PUT /group/{id}/members/{userId}
Parameters Path Parameters  Name Description   id The id of the group.   userId The id of user to add to the group.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.   403 application/json Identity service is read-only (Cannot modify users / groups / memberships).</description>
    </item>
    
    <item>
      <title>Create Tenant Group Membership</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/group-members/put/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/group-members/put/</guid>
      <description>Creates a membership between a tenant and a group.
Method PUT /tenant/{id}/group-members/{groupId}
Parameters Path Parameters  Name Description   id The id of the tenant.   groupId The id of the group.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.   403 application/json Identity service is read-only.   500 application/json In case an internal error occurs.</description>
    </item>
    
    <item>
      <title>Create Tenant User Membership</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/user-members/put/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/user-members/put/</guid>
      <description>Creates a membership between a tenant and an user.
Method PUT /tenant/{id}/user-members/{userId}
Parameters Path Parameters  Name Description   id The id of the tenant.   userId The id of the user.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.   403 application/json Identity service is read-only.   500 application/json In case an internal error occurs.</description>
    </item>
    
    <item>
      <title>DMN Decision Table Input</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/dmn/decision-table/input/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/dmn/decision-table/input/</guid>
      <description>A decision table can have one or more inputs, also called input clauses. An input clause defines the id, label, expression and type of a decision table input.
An input can be edited by double-clicking on the respective colum header in the decision table.
An input clause is represented by an input element inside a decisionTable XML element.
&amp;lt;definitions xmlns=&amp;quot;https://www.omg.org/spec/DMN/20191111/MODEL/&amp;quot; id=&amp;quot;definitions&amp;quot; name=&amp;quot;definitions&amp;quot; namespace=&amp;quot;http://camunda.org/schema/1.0/dmn&amp;quot;&amp;gt; &amp;lt;decision id=&amp;quot;dish&amp;quot; name=&amp;quot;Dish&amp;quot;&amp;gt; &amp;lt;decisionTable id=&amp;quot;decisionTable&amp;quot;&amp;gt; &amp;lt;input id=&amp;quot;input1&amp;quot; label=&amp;quot;Season&amp;quot;&amp;gt; &amp;lt;inputExpression id=&amp;quot;inputExpression1&amp;quot; typeRef=&amp;quot;string&amp;quot;&amp;gt; &amp;lt;text&amp;gt;season&amp;lt;/text&amp;gt; &amp;lt;/inputExpression&amp;gt; &amp;lt;/input&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>Dashboard</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/bpmn/dashboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/bpmn/dashboard/</guid>
      <description>The processes dashboard of Cockpit is the entry point for process monitoring. It comes with a pre-installed plugin, which lets you see deployed process definitions. Additional plugins can be added to the processes dashboard.
Deployed Processes With this plugin you can easily observe the state of a process definition. Green and red dots signalize running and failed jobs. At this observing level a red dot signifies that there is at least one process instance or a sub process instance which has an unresolved incident.</description>
    </item>
    
    <item>
      <title>Dashboard</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/dashboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/dashboard/</guid>
      <description>The dashboard of Cockpit provides a quick overview of running and historic operations as well as details about deployments.
At the top of the dashboard you can see a plugin with pie charts that display the amount of running process instances, open incidents and open human tasks. By clicking on the number or a section of the pie chart, you are forwarded to the respective search with preselected query parameters.</description>
    </item>
    
    <item>
      <title>Data-based Exclusive Gateway (XOR)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/gateways/exclusive-gateway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/gateways/exclusive-gateway/</guid>
      <description>An exclusive gateway (also called the XOR gateway or, in more technical terms, the exclusive data-based gateway), is used to model a decision in the process. When the execution arrives at this gateway, all outgoing sequence flows are evaluated in the order in which they have been defined. The sequence flow which condition evaluates to &amp;lsquo;true&amp;rsquo; (or which doesn&amp;rsquo;t have a condition set, conceptually having a &amp;lsquo;true&amp;rsquo; value defined on the sequence flow) is selected for continuing the process.</description>
    </item>
    
    <item>
      <title>Decision Definition View</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/dmn/decision-definition-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/dmn/decision-definition-view/</guid>
      <description>On the decision definition view, you can find a table or literal expression of the deployed decision definition. You can change the version of the decision definition in the dropdown menu on the left side. The table or literal expression is then updated accordingly. You can also navigate to the deployment of the selected version that contains the decision definition. Clicking the navigate to deployment button will take you to the deployment view.</description>
    </item>
    
    <item>
      <title>Decision Requirements Definition Instance View</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/dmn/decision-requirements-instance-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/dmn/decision-requirements-instance-view/</guid>
      <description>Enterprise FeaturePlease note that this feature is only included in the enterprise edition of the Camunda Platform, it is not available in the community edition.
Check the Camunda enterprise homepagefor more information or get yourfree trial version.On the decision requirements definition instance view, you can find a diagram of the deployed decision requirements definition. Use the mouse to navigate through the diagram. By turning the mouse wheel you can zoom in and out.</description>
    </item>
    
    <item>
      <title>Decision Requirements Definition View</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/dmn/decision-requirements-definition-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/dmn/decision-requirements-definition-view/</guid>
      <description>Enterprise FeaturePlease note that this feature is only included in the enterprise edition of the Camunda Platform, it is not available in the community edition.
Check the Camunda enterprise homepagefor more information or get yourfree trial version.On the decision requirements definition view, you can find a diagram of the deployed decision requirements definition. Use the mouse to navigate through the diagram. By turning the mouse wheel you can zoom in and out.</description>
    </item>
    
    <item>
      <title>Delete Process Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/variables/delete-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/variables/delete-variable/</guid>
      <description>Deletes a variable of a process instance by id.
Method DELETE /process-instance/{id}/variables/{varName}
Parameters Path Parameters  Name Description   id The id of the process instance to delete the variable from.   varName The name of the variable to delete.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.   Example Request DELETE /process-instance/aProcessInstanceId/variables/aVarName</description>
    </item>
    
    <item>
      <title>Delete User</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/user/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/user/delete/</guid>
      <description>Deletes a user by id.
Method DELETE /user/{id}
Parameters Path Parameters  Name Description   id The id of the user to be deleted.   Result This method returns no content.
Response Codes  Code Media type Description   204 application/json Request successful.   403 application/json Identity service is read-only (Cannot modify users / groups / memberships).   404 application/json User cannot be found. See the Introduction for the error response format.</description>
    </item>
    
    <item>
      <title>Embedded Subprocess</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/subprocesses/embedded-subprocess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/subprocesses/embedded-subprocess/</guid>
      <description>A subprocess is an activity that contains other activities, gateways, events, etc., which itself forms a process that is part of a bigger process. A subprocess is completely defined inside a parent process (that&amp;rsquo;s why it&amp;rsquo;s often called an embedded Subprocess).
Subprocesses have two major use cases:
 Subprocesses allow hierarchical modeling. Many modeling tools allow that subprocesses can be collapsed, hiding all the details of the subprocess and displaying a high-level, end-to-end overview of the business process.</description>
    </item>
    
    <item>
      <title>Embedding the DMN Engine</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/dmn-engine/embed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/dmn-engine/embed/</guid>
      <description>The Camunda DMN engine can be used as a library in a custom application. To achieve this, add the camunda-engine-dmn artifact to the classpath of the application and then configure and build a decision engine instance. This section provides the required maven coordinates to add the DMN engine as a dependency to your project. It then shows how to configure and build a new DMN engine instance.
Maven Coordinates The Camunda DMN engine is released to Maven Central.</description>
    </item>
    
    <item>
      <title>Evaluate a Condition</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/condition/post-condition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/condition/post-condition/</guid>
      <description>Triggers evaluation of conditions for conditional start event(s). Internally this maps to the engine&amp;rsquo;s condition evaluation builder method ConditionEvaluationBuilder#evaluateStartConditions(). For more information see the Conditional Start Events section of the BPMN 2.0 Implementation Reference.
Method POST /condition
Parameters Request Body A JSON object with the following properties:
 Name Description   variables A map of variables which are used for evaluation of the conditions and are injected into the process instances which have been triggered.</description>
    </item>
    
    <item>
      <title>Extension Elements</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/cmmn11/custom-extensions/camunda-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/cmmn11/custom-extensions/camunda-elements/</guid>
      <description>The following elements are extension elements for the camunda namespace http://camunda.org/schema/1.0/cmmn.
caseExecutionListener  Description Add an execution listener to an event in the lifecycle of a case item.    Attributes event  The type of the lifecycle event for which the listener is called     class  see camunda:class     expression  see camunda:expression     delegateExpression  see camunda:delegateExpression    Constraints The event attribute is required and must be one of the lifecycle events that are valid for the plan item it is defined on.</description>
    </item>
    
    <item>
      <title>FEEL Data Types</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/dmn/feel/legacy/data-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/dmn/feel/legacy/data-types/</guid>
      <description>Heads Up!This page provides information on the legacy FEEL Engine, that was used before the current Scala-based FEEL Engine was integrated into the Camunda Platform.
The Camunda DMN engine supports the following FEEL data types.
String FEEL supports Strings. They must be encapsulated in double quotes. They support only the equal comparison operator.
Numeric Types FEEL supports numeric types like integer. In the Camunda DMN engine the following numeric types are available:</description>
    </item>
    
    <item>
      <title>FEEL Engine Type Handling</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/dmn-engine/feel/type-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/dmn-engine/feel/type-handling/</guid>
      <description>This documentation covers supported types of variable values when used in a FEEL expression and supported output types.
In DMN, when defining a typeRef attribute on a Variable, Input or Output element, the DMN Engine tries to convert the result value of the corresponding Literal Expression, Input Expression or the Output Entry. When no typeRef attribute is specified, the DMN Engine passes the return value of the FEEL Engine directly without any conversion.</description>
    </item>
    
    <item>
      <title>Fetch Telemetry Configuration</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/telemetry/get-telemetry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/telemetry/get-telemetry/</guid>
      <description>Fetches the telemetry configuration. For more information on the telemetry topic, visit the Telemetry page.
Method GET /telemetry/configuration
Parameters This method takes no parameters.
Result A JSON object containing configuration properties of the telemetry of the Rest API.
 Name Value Description   enableTelemetry Boolean Specifies if the telemetry is configured or not. Values:  null - sending telemetry is not configured, no data will be sent true - sending telemetry is enabled false - sending telemetry is disabled     Response Codes  Code Media type Description   200 application/json Request successful.</description>
    </item>
    
    <item>
      <title>Generate Migration Plan</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/migration/generate-migration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/migration/generate-migration/</guid>
      <description>Generates a migration plan for two process definitions. The generated migration plan contains migration instructions which map equal activities between the two process definitions.
Method POST /migration/generate
Parameters Request Body A JSON object with the following properties:
 Name Description   sourceProcessDefinitionId The id of the source process definition for the migration.   targetProcessDefinitionId The id of the target process definition for the migration.   updateEventTriggers A boolean flag indicating whether instructions between events should be configured to update the event triggers.</description>
    </item>
    
    <item>
      <title>Get Activity Instance Statistics</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get-activity-statistics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get-activity-statistics/</guid>
      <description>Retrieves runtime statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. Note: This does not include historic data.
Method GET /process-definition/{id}/statistics
GET /process-definition/key/{key}/statistics (returns statistics for the latest version of the process definition which belongs to no tenant)</description>
    </item>
    
    <item>
      <title>Get Authorizations</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/authorization/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/authorization/get-query/</guid>
      <description>Queries for a list of authorizations using a list of parameters. The size of the result set can be retrieved by using the Get Authorization Count method.
Method GET /authorization
Parameters Query Parameters  Name Description   id Filter by the id of the authorization.   type Filter by authorization type. (0=global, 1=grant, 2=revoke). See the User Guide for more information about authorization types.   userIdIn Filter by a comma-separated list of userIds.</description>
    </item>
    
    <item>
      <title>Get Batches</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/batch/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/batch/get-query/</guid>
      <description>Queries for batches that fulfill given parameters. Parameters may be the properties of batches, such as the id or type. The size of the result set can be retrieved by using the Get Batch Count method.
Method GET /batch
Parameters Query Parameters  Name Description   batchId Filter by batch id.   type Filter by batch type. See the User Guide for more information about batch types.   tenantIdIn Filter by a comma-separated list of tenant ids.</description>
    </item>
    
    <item>
      <title>Get Case Definitions</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-definition/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-definition/get-query/</guid>
      <description>Queries for case definitions that fulfill given parameters. Parameters may be the properties of case definitions, such as the name, key or version. The size of the result set can be retrieved by using the Get Case Definition Count method.
Method GET /case-definition
Parameters Query Parameters  Name Description   caseDefinitionId Filter by case definition id.   caseDefinitionIdIn Filter by case definition ids.   name Filter by case definition name.</description>
    </item>
    
    <item>
      <title>Get Case Executions</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/get-query/</guid>
      <description>Queries for case executions that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of case executions. The size of the result set can be retrieved by using the Get Case Execution Count method.
Method GET /case-execution
Parameters Query Parameters  Name Description   caseExecutionId Filter by a case execution id.   caseInstanceId Filter by a case instance id.   businessKey Filter by the business key of the case instances the case executions belong to.</description>
    </item>
    
    <item>
      <title>Get Case Instances</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/get-query/</guid>
      <description>Queries for case instances that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of case instances. The size of the result set can be retrieved by using the Get Case Instance Count method.
Method GET /case-instance
Parameters Query Parameters  Name Description   caseInstanceId Filter by a case instance id.   businessKey Filter by case instance business key.   caseDefinitionId Filter by the case definition the case instances run on.</description>
    </item>
    
    <item>
      <title>Get Cleanable Decision Instance Report</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/decision-definition/get-cleanable-decision-instance-report/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/decision-definition/get-cleanable-decision-instance-report/</guid>
      <description>Retrieves a report about a decision definition and finished decision instances relevant to history cleanup (see History cleanup), so that you can tune the history time to live. These reports include the count of the finished historic decision instances, cleanable decision instances and basic decision definition data - id, key, name and version. The size of the result set can be retrieved by using the Get Cleanable Decision Instance Report Count method.</description>
    </item>
    
    <item>
      <title>Get Decision Definitions</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/decision-definition/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/decision-definition/get-query/</guid>
      <description>Queries for decision definitions that fulfill given parameters. Parameters may be the properties of decision definitions, such as the name, key or version. The size of the result set can be retrieved by using the Get Decision Definition Count method.
Method GET /decision-definition
Parameters Query Parameters  Name Description   decisionDefinitionId Filter by decision definition id.   decisionDefinitionIdIn Filter by decision definition ids.   name Filter by decision definition name.</description>
    </item>
    
    <item>
      <title>Get Decision Requirements Definitions</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/decision-requirements-definition/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/decision-requirements-definition/get-query/</guid>
      <description>Queries for decision requirements definitions that fulfill given parameters. Parameters may be the properties of decision requirements definitions, such as the name, key or version. The size of the result set can be retrieved by using the Get Decision Requirements Definition Count method.
Method GET /decision-requirements-definition
Parameters Query Parameters  Name Description   decisionRequirementsDefinitionId Filter by decision requirements definition id.   decisionRequirementsDefinitionIdIn Filter by decision requirements definition ids.</description>
    </item>
    
    <item>
      <title>Get Deployments</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/deployment/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/deployment/get-query/</guid>
      <description>Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments, such as the id or name or a range of the deployment time. The size of the result set can be retrieved by using the Get Deployment count method.
Method GET /deployment
Parameters Query Parameters  Name Description   id Filter by deployment id.   name Filter by the deployment name. Exact match.   nameLike Filter by the deployment name that the parameter is a substring of.</description>
    </item>
    
    <item>
      <title>Get Engine Names</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/engine/get-names/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/engine/get-names/</guid>
      <description>Retrieves the names of all process engines available on your platform.
Note: You cannot prepend /engine/{name} to this method.
Method GET /engine
Parameters This method takes no parameters.
Result A JSON array consisting of engine objects. Each engine object has the following properties:
 Name Value Description   name String The name of the process engine.   Response Codes  Code Media type Description   200 application/json Request successful.</description>
    </item>
    
    <item>
      <title>Get Executions</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/execution/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/execution/get-query/</guid>
      <description>Queries for the executions that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the Get Execution Count method.
Method GET /execution
Parameters Query Parameters  Name Description   businessKey Filter by the business key of the process instances the executions belong to.   processDefinitionId Filter by the process definition the executions run on.</description>
    </item>
    
    <item>
      <title>Get External Task</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/get/</guid>
      <description>Retrieves an external task by id, corresponding to the ExternalTask interface in the engine.
Method GET /external-task/{id}
Parameters Path Parameters  Name Description   id The id of the external task to be retrieved.   Result A JSON object corresponding to the ExternalTask interface in the engine. Its properties are as follows:
 Name Value Description   activityId String The id of the activity that this external task belongs to.</description>
    </item>
    
    <item>
      <title>Get External Task Logs</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/external-task-log/get-external-task-log-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/external-task-log/get-external-task-log-query/</guid>
      <description>Queries for historic external task logs that fulfill the given parameters. The size of the result set can be retrieved by using the Get External Task Log Count method.
Method GET /history/external-task-log
Parameters Query Parameters  Name Description   logId Filter by historic external task log id.   externalTaskId Filter by external task id.   topicName Filter by an external task topic.   workerId Filter by the id of the worker that the task was most recently locked by.</description>
    </item>
    
    <item>
      <title>Get Filters</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/filter/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/filter/get-query/</guid>
      <description>Queries for a list of filters using a list of parameters. The size of the result set can be retrieved by using the Get Filter Count method.
Method GET /filter
Parameters Query Parameters  Name Description   filterId Filter by the id of the filter.   resourceType Filter by the resource type of the filter, e.g., Task.   name Filter by the name of the filter.   nameLike Filter by the name that the parameter is a substring of.</description>
    </item>
    
    <item>
      <title>Get Groups</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/group/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/group/get-query/</guid>
      <description>Queries for a list of groups using a list of parameters. The size of the result set can be retrieved by using the Get Group Count method.
Method GET /group
Parameters Query Parameters  Name Description   id Filter by the id of the group.   idIn Filter by a comma-separated list of group ids.   name Filter by the name of the group.   nameLike Filter by the name that the parameter is a substring of.</description>
    </item>
    
    <item>
      <title>Get Historic Activity Instances</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/activity-instance/get-activity-instance-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/activity-instance/get-activity-instance-query/</guid>
      <description>Queries for historic activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the Get Historic Activity Instance Count method.
Method GET /history/activity-instance
Parameters Query Parameters  Name Description   activityInstanceId Filter by activity instance id.   processInstanceId Filter by process instance id.   processDefinitionId Filter by process definition id.   executionId Filter by the id of the execution that executed the activity instance.</description>
    </item>
    
    <item>
      <title>Get Historic Activity Statistics</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-definition/get-historic-activity-statistics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-definition/get-historic-activity-statistics/</guid>
      <description>Retrieves historic statistics of a given process definition, grouped by activities. These statistics include the number of running activity instances and, optionally, the number of canceled activity instances, finished activity instances and activity instances which completed a scope (i.e., in BPMN 2.0 manner: a scope is completed by an activity instance when the activity instance consumed a token but did not emit a new token). Note: This only includes historic data.</description>
    </item>
    
    <item>
      <title>Get Historic Batches</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/batch/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/batch/get-query/</guid>
      <description>Queries for historic batches that fulfill given parameters. Parameters may be the properties of batches, such as the id or type. The size of the result set can be retrieved by using the Get Historic Batch Count method.
Method GET /history/batch
Parameters Query Parameters  Name Description   batchId Filter by batch id.   type Filter by batch type. See the User Guide for more information about batch types.</description>
    </item>
    
    <item>
      <title>Get Historic Case Activity Instances</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-activity-instance/get-case-activity-instance-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-activity-instance/get-case-activity-instance-query/</guid>
      <description>Queries for historic case activity instances that fulfill the given parameters. The size of the result set can be retrieved by using the Get Historic Case Activity Instance Count method.
Method GET /history/case-activity-instance
Parameters Query Parameters  Name Description   caseActivityInstanceId Filter by case activity instance id.   caseActivityInstanceIdIn Only include case activity instances which belong to one of the passed and comma-separated activity instance ids.   caseInstanceId Filter by case instance id.</description>
    </item>
    
    <item>
      <title>Get Historic Case Activity Statistics</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-definition/get-historic-case-activity-statistics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-definition/get-historic-case-activity-statistics/</guid>
      <description>Retrieves historic statistics of a given case definition grouped by activities. These statistics include the number of active, available, completed, disabled, enabled and completed case activity instances.
Note: This only includes historic data.
Method GET /history/case-definition/{id}/statistics
Parameters Path Parameters  Name Description   id The id of the case definition.   Result A JSON array containing statistics results per activity. Each object has the following properties:
 Name Value Description   id String The id of the activity the results are aggregated for.</description>
    </item>
    
    <item>
      <title>Get Historic Case Instances</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-instance/get-case-instance-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-instance/get-case-instance-query/</guid>
      <description>Queries for historic case instances that fulfill the given parameters. The size of the result set can be retrieved by using the Get Historic Case Instance Count method.
Method GET /history/case-instance
Parameters Query Parameters  Name Description   caseInstanceId Filter by case instance id.   caseInstanceIds Filter by case instance ids. Must be a comma-separated list of case instance ids.  caseDefinitionId Filter by the case definition the instances run on.</description>
    </item>
    
    <item>
      <title>Get Historic Decision Instances</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/decision-instance/get-decision-instance-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/decision-instance/get-decision-instance-query/</guid>
      <description>Queries for historic decision instances that fulfill the given parameters. The size of the result set can be retrieved by using the Get Historic Decision Instance Count method.
Method GET /history/decision-instance
Parameters Query Parameters  Name Description   decisionInstanceId Filter by decision instance id.   decisionInstanceIdIn Filter by decision instance ids. Must be a comma-separated list of decision instance ids.   decisionDefinitionId Filter by the decision definition the instances belongs to.</description>
    </item>
    
    <item>
      <title>Get Historic Details</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/detail/get-detail-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/detail/get-detail-query/</guid>
      <description>Queries for historic details that fulfill the given parameters. The size of the result set can be retrieved by using the Get Historic Detail Count method.
Method GET /history/detail
Parameters Query Parameters  Name Description   processInstanceId Filter by process instance id.   processInstanceIdIn Only include historic details which belong to one of the passed process instance ids.   executionId Filter by execution id.   taskId Filter by task id.</description>
    </item>
    
    <item>
      <title>Get Historic Details (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/detail/post-detail-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/detail/post-detail-query/</guid>
      <description>Queries for historic details that fulfill the given parameters. This method is slightly more powerful than the Get Historic Details method because it allows sorting by multiple parameters. The size of the result set can be retrieved by using the Get Historic Detail Count method.
Method POST /history/detail
Parameters Query Parameters  firstResult Pagination of results. Specifies the index of the first result to return.   maxResults Pagination of results.</description>
    </item>
    
    <item>
      <title>Get Identity-Link-Logs</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/identity-links/get-identity-link-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/identity-links/get-identity-link-query/</guid>
      <description>Queries for historic identity link logs that fulfill given parameters. The size of the result set can be retrieved by using the Get Identity-Link-Log Count method.
Method GET /history/identity-link-log
Parameters Query Parameters  Name Description   type Restricts to identity links that have the given type (candidate/assignee/owner).   userId Restricts to identity links that have the given user id.   groupId Restricts to identity links that have the given group id.</description>
    </item>
    
    <item>
      <title>Get Incident</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/incident/get-incident/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/incident/get-incident/</guid>
      <description>Retrieves an incident by ID
Method GET /incident/{id}
Parameters Path Parameters  Name Description   id The id of the incident to be retrieved.   Result A JSON object that represents an incident object with the following properties:
 Name Value Description   id String The id of the incident.   processDefinitionId String The id of the process definition this incident is associated with.   processInstanceId String The id of the process instance this incident is associated with.</description>
    </item>
    
    <item>
      <title>Get Incident Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/incident/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/incident/get-query-count/</guid>
      <description>Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the Get Incidents method.
Method GET /incident/count
Parameters Query Parameters  Name Description   incidentId Restricts to incidents that have the given id.   incidentType Restricts to incidents that belong to the given incident type. See the User Guide for a list of incident types.   incidentMessage Restricts to incidents that have the given incident message.</description>
    </item>
    
    <item>
      <title>Get Incidents</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/incident/get-incident-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/incident/get-incident-query/</guid>
      <description>Queries for historic incidents that fulfill given parameters. The size of the result set can be retrieved by using the Get Incident Count method.
Method GET /history/incident
Parameters Query Parameters  Name Description   incidentId Restricts to incidents that have the given id.   incidentType Restricts to incidents that belong to the given incident type. See the User Guide for a list of incident types.   incidentMessage Restricts to incidents that have the given incident message.</description>
    </item>
    
    <item>
      <title>Get Incidents</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/incident/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/incident/get-query/</guid>
      <description>Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using the Get Incident Count method.
Method GET /incident
Parameters Query Parameters  Name Description   incidentId Restricts to incidents that have the given id.   incidentType Restricts to incidents that belong to the given incident type. See the User Guide for a list of incident types.   incidentMessage Restricts to incidents that have the given incident message.</description>
    </item>
    
    <item>
      <title>Get Job Definitions</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job-definition/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job-definition/get-query/</guid>
      <description>Queries for job definitions that fulfill given parameters. The size of the result set can be retrieved by using the Get Job Definition Count method.
Method GET /job-definition
Parameters Query Parameters  Name Description   jobDefinitionId Filter by job definition id.   activityIdIn Only include job definitions which belong to one of the passed and comma-separated activity ids.   processDefinitionId Only include job definitions which exist for the given process definition id.</description>
    </item>
    
    <item>
      <title>Get Job Logs</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/job-log/get-job-log-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/job-log/get-job-log-query/</guid>
      <description>Queries for historic job logs that fulfill the given parameters. The size of the result set can be retrieved by using the Get Job Log Count method.
Method GET /history/job-log
Parameters Query Parameters  Name Description   logId Filter by historic job log id.   jobId Filter by job id.   jobExceptionMessage Filter by job exception message.   jobDefinitionId Filter by job definition id.   jobDefinitionType Filter by job definition type.</description>
    </item>
    
    <item>
      <title>Get Jobs</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job/get-query/</guid>
      <description>Queries for jobs that fulfill given parameters. The size of the result set can be retrieved by using the Get Job Count method.
Method GET /job
Parameters Query Parameters  Name Description   jobId Filter by job id.   jobIds Filter by a comma-separated list of job ids.   jobDefinitionId Only select jobs which exist for the given job definition.   processInstanceId Only select jobs which exist for the given process instance.</description>
    </item>
    
    <item>
      <title>Get Metrics in Interval</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/metrics/get-metrics-interval/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/metrics/get-metrics-interval/</guid>
      <description>Retrieves a list of metrics, aggregated for a given interval.
Method GET /metrics
Parameters Query Parameters  Name Description   name The name of the metric. Supported names: activity-instance-start, activity-instance-end, job-acquisition-attempt, job-acquired-success, job-acquired-failure, job-execution-rejected, job-successful, job-failed, job-locked-exclusive, executed-decision-elements, executed-decision-instances, history-cleanup-removed-process-instances, history-cleanup-removed-case-instances, history-cleanup-removed-decision-instances, history-cleanup-removed-batch-operations, history-cleanup-removed-task-metrics, root-process-instance-start, unique-task-workers    reporter The name of the reporter (host), on which the metrics was logged. This will have value provided by the configuration property.</description>
    </item>
    
    <item>
      <title>Get Process Instances</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-instance/get-process-instance-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-instance/get-process-instance-query/</guid>
      <description>Queries for historic process instances that fulfill the given parameters. The size of the result set can be retrieved by using the Get Process Instance Count method.
Method GET /history/process-instance
Parameters Query Parameters  Name Description   processInstanceId Filter by process instance id.   processInstanceIds Filter by process instance ids. Must be a comma-separated list of process instance ids.   processInstanceBusinessKey Filter by process instance business key.</description>
    </item>
    
    <item>
      <title>Get Schema Log</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/schema-log/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/schema-log/get-query/</guid>
      <description>Queries for schema log entries that fulfill given parameters.
Method GET /schema/log
Parameters Query Parameters  Name Description   version Only return schema log entries with a specific version.   firstResult Pagination of results. Specifies the index of the first result to return.   maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.</description>
    </item>
    
    <item>
      <title>Get Sum</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/metrics/get-metrics-sum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/metrics/get-metrics-sum/</guid>
      <description>Retrieves the sum (count) for a given metric.
Method GET /metrics/{metrics-name}/sum
Parameters Path Parameters  Name Description   metrics-name The name of the metric. Supported names: activity-instance-start, activity-instance-end, job-acquisition-attempt, job-acquired-success, job-acquired-failure, job-execution-rejected, job-successful, job-failed, job-locked-exclusive, executed-decision-elements, executed-decision-instances, history-cleanup-removed-process-instances, history-cleanup-removed-case-instances, history-cleanup-removed-decision-instances, history-cleanup-removed-batch-operations, history-cleanup-removed-task-metrics, root-process-instance-start, unique-task-workers, unique-task-workers    Query Parameters  Name Description   startDate The start date   endDate The end date   Result A JSON object providing the result:</description>
    </item>
    
    <item>
      <title>Get Task</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/get/</guid>
      <description>Retrieves a task by id.
Method GET /task/{id}
Parameters Path Parameters  Name Description   id The id of the task to be retrieved.   Result A JSON object corresponding to the Task interface in the engine. Its properties are as follows:
 Name Value Description   id String The id of the task.   name String The tasks name.   assignee String The user assigned to this task.</description>
    </item>
    
    <item>
      <title>Get Tasks (Historic)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/task/get-task-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/task/get-task-query/</guid>
      <description>Queries for historic tasks that fulfill the given parameters. The size of the result set can be retrieved by using the Get Task Count method.
Method GET /history/task
Parameters Query Parameters  Name Description   taskId Filter by task id.   taskParentTaskId Filter by parent task id.   processInstanceId Filter by process instance id.   processInstanceBusinessKey Filter by process instance business key.   processInstanceBusinessKeyIn Filter by process instances with one of the give business keys.</description>
    </item>
    
    <item>
      <title>Get Tenants</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/get-query/</guid>
      <description>Query for a list of tenants using a list of parameters. The size of the result set can be retrieved by using the Get Tenant Count method.
Method GET /tenant
Parameters Query Parameters  Name Description   id Filter by the id of the tenant.   name Filter by the name of the tenant.   nameLike Filter by the name that the parameter is a substring of.</description>
    </item>
    
    <item>
      <title>Get User Operation Log (Historic)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/user-operation-log/get-user-operation-log-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/user-operation-log/get-user-operation-log-query/</guid>
      <description>Queries for user operation log entries that fulfill the given parameters. The size of the result set can be retrieved by using the Get User Operation Log Count method.
Note that the properties of operation log entries are interpreted as restrictions on the entities they apply to. That means, if a single process instance is updated, the field processInstanceId is populated. If a single operation updates all process instances of the same process definition, the field processInstanceId is null (a null restriction is viewed as a wildcard, i.</description>
    </item>
    
    <item>
      <title>Get Variable Instance (Binary)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/variable-instance/get-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/variable-instance/get-binary/</guid>
      <description>Retrieves the content of a variable by id. Applicable for byte array and file variables.
Method GET /variable-instance/{id}/data
Parameters Path Parameters  Name Description   id The id of the variable instance.   Result For binary variables or files without any MIME type information, a byte stream is returned. File variables with MIME type information are returned as the saved type. Additionally, for file variables the Content-Disposition header will be set.</description>
    </item>
    
    <item>
      <title>Get Variable Instances</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/variable-instance/get-variable-instance-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/variable-instance/get-variable-instance-query/</guid>
      <description>Queries for historic variable instances that fulfill the given parameters. The size of the result set can be retrieved by using the Get Variable Instance Count method.
Method GET /history/variable-instance
Parameters Query Parameters  Name Description   variableName Filter by variable name.   variableNameLike Restrict to variables with a name like the parameter.   variableValue Filter by variable value. Is treated as a String object on server side.</description>
    </item>
    
    <item>
      <title>Get a User&#39;s Groups</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/identity/get-group-info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/identity/get-group-info/</guid>
      <description>Gets the groups of a user by id and includes all users that share a group with the given user.
Method GET /identity/groups
Parameters Query Parameters  Name Description   userId The id of the user to get the groups for.   Result A JSON object containing groups, the number of members and other users. Its properties are as follows:
 Name Value Description   groups Array A JSON array of group object.</description>
    </item>
    
    <item>
      <title>Getting a Distribution</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/integrate/getting-a-distribution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/integrate/getting-a-distribution/</guid>
      <description>Manual Download The Forms SDK library can be downloaded from Github.
Bower Alternatively, the Forms SDK can be installed using the Bower package manager:
bower install camunda-bpm-sdk-js --save  Dependency Management The Forms SDK depends on the following libraries:
 JQuery (or a compatible DOM manipulation Library).  The Forms SDK optionally depends on the following libraries:
 AngularJS (v1.2.16).  Including the Library Next, you need to add the JavaScript Library to the page.</description>
    </item>
    
    <item>
      <title>HTTP Connector</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/connect/http-connector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/connect/http-connector/</guid>
      <description>In Camunda Connect a Connectors class exists which automatically detects every connector in the classpath. It can be used to get the HTTP connector instance by its connector ID, which is http-connector.
HttpConnector http = Connectors.getConnector(HttpConnector.ID);  Configure Apache HTTP Client Camunda Connect HTTP client uses the Apache HTTP client to make HTTP requests. Accordingly, it supports the same configuration options.
Default Configuration By default, the HTTP client uses Apache&amp;rsquo;s default configuration and respects the system properties that are supported by HTTP client.</description>
    </item>
    
    <item>
      <title>Human Task</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/cmmn11/tasks/human-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/cmmn11/tasks/human-task/</guid>
      <description>A human task is used to model work that needs to be done by a human actor.
A human task is defined in XML as follows:
&amp;lt;humanTask id=&amp;quot;theHumanTask&amp;quot; name=&amp;quot;A Human Task&amp;quot; /&amp;gt;  A human task in state ENABLED can be started manually using the CaseService as follows:
caseService.manuallyStartCaseExecution(&amp;quot;aCaseExecutionId&amp;quot;);  When the human task becomes ACTIVE, a new task is created in the task list of the user(s) or group(s) assigned to that task.</description>
    </item>
    
    <item>
      <title>Install the Pre-Packaged Distribution</title>
      <link>http://camunda-cn.shaochenfeng.com/installation/full/tomcat/pre-packaged/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/installation/full/tomcat/pre-packaged/</guid>
      <description>Installation Procedure  Download the pre-packaged distribution from https://downloads.camunda.cloud/release/camunda-bpm/tomcat/. Unpack the distro to a directory. Adjust the datasource according to your needs (see Manual Installation). Startup the server by running camunda-welcome.bat or by using the $TOMCAT_HOME/bin/startup.{bat/sh} script.  Accessing the H2 console You can easily access the H2 console to inspect your local H2 database (used in demo/evaluation scenarios):
 Go to http://localhost:8080/h2/h2 Login with the following data:  jdbc:h2:.</description>
    </item>
    
    <item>
      <title>Install the pre-packaged Distribution</title>
      <link>http://camunda-cn.shaochenfeng.com/installation/full/jboss/pre-packaged/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/installation/full/jboss/pre-packaged/</guid>
      <description>Installation Procedure  Download the pre-packaged distribution:  Wildfly / JBoss EAP 7.x: https://downloads.camunda.cloud/release/camunda-bpm/wildfly/, JBoss EAP 6.4: a pre-packaged distribution is not offered anymore, please check Manual Installation.  Unpack the distro to a directory. Adjust the datasource according to your needs (see Manual Installation). Startup the server by running camunda-welcome.bat or by using the $JBOSS_HOME/bin/standalone.{bat/sh} script.  Accessing the H2 console In JBoss/Wildfly you can easily access the H2 console to inspect your local H2 database (used in demo/evaluation scenarios):</description>
    </item>
    
    <item>
      <title>Manual Activation Rule</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/cmmn11/markers/manual-activation-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/cmmn11/markers/manual-activation-rule/</guid>
      <description>Can be used with: Task, Stage
Whether the actual work of a task or stage can be performed depends on its entry criteria. Given that an entry criterion is fulfilled, there are two ways to activate a task:
 By manual activation By automatic activation  Automatic activation is the default behavior in which it is not required that a user manually activates a task. In camunda, manual activation can be done by using the CaseService API with caseService.</description>
    </item>
    
    <item>
      <title>Migration from Community Extension v. 2.2.0 to v. 2.3.0</title>
      <link>http://camunda-cn.shaochenfeng.com/update/spring-boot-starter/migration-22-23/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/spring-boot-starter/migration-22-23/</guid>
      <description>Maven dependencies The groupId for Maven dependencies has changed, it is now org.camunda.bpm.springboot. For example:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.camunda.bpm.springboot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camunda-bpm-spring-boot-starter-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.3.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  Enterprise Web Applications For Enterprise users, the way to use the Spring Boot Starter has changed. Instead of using the enterprise Maven profile, you can now include a special starter in your Maven POM file:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.camunda.bpm.springboot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camunda-bpm-spring-boot-starter-webapp-ee&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.3.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  The same as before, you will also need to define the appropriate Camunda Platform version with the -ee suffix.</description>
    </item>
    
    <item>
      <title>Migration from Community Extension v. 2.3.0 to v. 3.0.0</title>
      <link>http://camunda-cn.shaochenfeng.com/update/spring-boot-starter/migration-23-30/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/spring-boot-starter/migration-23-30/</guid>
      <description>Upgrade to Spring boot 2.0.0 Within this minor release Camunda Spring Boot Starter started using Spring boot 2.0.2. This version comes with some changes from Spring boot side, for more information please check Spring boot 2.0 Release notes and Migration guide.
Removed test dependencies camunda-bpm-mockito and camunda-bpm-assert dependencies were removed from camunda-bpm-spring-boot-starter-test project. If you still want to use them, you can directly include them to your project POM:</description>
    </item>
    
    <item>
      <title>Migration from Community Extension v. 3.1.0 to v. 3.2.0</title>
      <link>http://camunda-cn.shaochenfeng.com/update/spring-boot-starter/migration-31-32/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/spring-boot-starter/migration-31-32/</guid>
      <description>Upgrade to Spring boot 2.1.1 Within this minor release, Camunda Spring Boot Starter started using Spring boot 2.1.1. This version comes with some changes from the Spring Boot side, for more information please check Spring Boot 2.1 Release notes.
Support for JDK 11 This release introduces support for JDK 11.</description>
    </item>
    
    <item>
      <title>Migration from Community Extension v. 3.3.0 to v. 3.4.0</title>
      <link>http://camunda-cn.shaochenfeng.com/update/spring-boot-starter/migration-33-34/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/spring-boot-starter/migration-33-34/</guid>
      <description>Upgrade to Spring boot 2.2.1 The 3.4.0 version of the Camunda Spring Boot Starter minor release comes with an update to Spring Boot 2.2.1. To see what changes have been introduced from the Spring Boot side, please check the Spring Boot 2.2 Release notes.
Spin DataFormat Configuration From this minor release, the Camunda Spring Boot Starter provides auto-configuration classes for configuring Spin DataFormats with Jackson Java 8 modules. To trigger the auto-configuration, simply add the necessary dependencies.</description>
    </item>
    
    <item>
      <title>Migration from Community Extension v. 3.4.0 to v. 7.13.0</title>
      <link>http://camunda-cn.shaochenfeng.com/update/spring-boot-starter/migration-34-713/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/spring-boot-starter/migration-34-713/</guid>
      <description>New version handling Starting with version 7.13.0, Camunda Platform and its compatible Camunda Spring Boot Starter artifact will share the same version. All adjustments in the Spring Boot Starter will now be covered in the general migration guide, i.e. the 7.12 to 7.13 guide.</description>
    </item>
    
    <item>
      <title>Modeling BPMN in Camunda Modeler</title>
      <link>http://camunda-cn.shaochenfeng.com/modeler/bpmn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/modeler/bpmn/</guid>
      <description>Quickstart Create new BPMN 2.0 Diagram To start modeling, create a new BPMN 2.0 diagram for the Camunda Platform by selecting Create diagram &amp;gt; Create new BPMN diagram (Camunda Platform) in the top-level menu.
Start Modeling Now you can start to create a BPMN 2.0 model. Add the desired elements from the palette on the left hand side by dragging and dropping them onto the diagram canvas.</description>
    </item>
    
    <item>
      <title>Plan Items and Item Definitions</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/cmmn11/concepts/plan-items/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/cmmn11/concepts/plan-items/</guid>
      <description>CMMN differentiates between plan items and plan item definitions. While plan items represent actual units of work that are enacted as part of the case, plan item definitions serve as the blueprint for how a plan item has to be enacted. This concept simplifies reuse of plan item definitions and furthermore enables dynamic planning so that additional items can be generated from a definition at runtime.
As an example, consider the following fragment of a case definition:</description>
    </item>
    
    <item>
      <title>Process Application 类</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-applications/the-process-application-class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-applications/the-process-application-class/</guid>
      <description>You can delegate the bootstrapping of the process engine and process deployment to a process application class. The basic ProcessApplication functionality is provided by the org.camunda.bpm.application.AbstractProcessApplication base class. Based on this class there is a set of environment-specific sub classes that realize integration within a specific environment:
 ServletProcessApplication: To be used for process applications in a Servlet Container like Apache Tomcat. EjbProcessApplication: To be used in a Java EE application server like JBoss or IBM WebSphere Application Server.</description>
    </item>
    
    <item>
      <title>Process Engine Configuration</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/spring-framework-integration/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/spring-framework-integration/configuration/</guid>
      <description>You can use a Spring application context XML file to bootstrap the process engine. It is possible to bootstrap both application-managed and container-managed process engines through Spring.
Note that you can also use a Spring JavaConfig for bootstrapping instead of XML.
Configure an Application-Managed Process Engine The ProcessEngine can be configured as a regular Spring bean. The starting point of the integration is the class org.camunda.bpm.engine.spring.ProcessEngineFactoryBean. That bean takes a process engine configuration and creates the process engine.</description>
    </item>
    
    <item>
      <title>Read a Model</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/model-api/bpmn-model-api/read-a-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/model-api/bpmn-model-api/read-a-model/</guid>
      <description>If you already created a BPMN model and want to process it through the BPMN model API, you can import it with the following methods.
// read a model from a file File file = new File(&amp;quot;PATH/TO/MODEL.bpmn&amp;quot;); BpmnModelInstance modelInstance = Bpmn.readModelFromFile(file); // read a model from a stream InputStream stream = [...] BpmnModelInstance modelInstance = Bpmn.readModelFromStream(stream);  After you imported your model you can search for elements by their id or by the type of element.</description>
    </item>
    
    <item>
      <title>Read a Model</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/model-api/cmmn-model-api/read-a-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/model-api/cmmn-model-api/read-a-model/</guid>
      <description>If you already created a CMMN model and want to process it through the CMMN model API, you can import it with the following methods.
// read a model from a file File file = new File(&amp;quot;PATH/TO/MODEL.cmmn&amp;quot;); CmmnModelInstance modelInstance = Cmmn.readModelFromFile(file); // read a model from a stream InputStream stream = [...] CmmnModelInstance modelInstance = Cmmn.readModelFromStream(stream);  After you imported your model you can search for elements by their id or by the type of element.</description>
    </item>
    
    <item>
      <title>Read a Model</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/model-api/dmn-model-api/read-a-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/model-api/dmn-model-api/read-a-model/</guid>
      <description>If you already created a DMN model and want to process it through the DMN model API, you can import it with the following methods:
// read a model from a file File file = new File(&amp;quot;PATH/TO/MODEL.dmn&amp;quot;); DmnModelInstance modelInstance = Dmn.readModelFromFile(file); // read a model from a stream InputStream stream = [...] DmnModelInstance modelInstance = Dmn.readModelFromStream(stream);  After you imported your model, you can search for elements by their id or by the type of element.</description>
    </item>
    
    <item>
      <title>Reading JSON</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/spin/json/01-reading-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/spin/json/01-reading-json/</guid>
      <description>The JSON datatype supports reading JSON from Strings or Readers.
Reading JSON from a String: import static org.camunda.spin.Spin.*; import static org.camunda.spin.DataFormats.*; SpinJsonNode json = S(&amp;quot;{\&amp;quot;customer\&amp;quot;: \&amp;quot;Kermit\&amp;quot;}&amp;quot;, json());  The second paramter json() hints Spin to use the JSON data format for parsing the JSON.
Alternatively, you can directly use the JSON(...) function:
import static org.camunda.spin.Spin.*; SpinJsonNode json = JSON(&amp;quot;{\&amp;quot;customer\&amp;quot;: \&amp;quot;Kermit\&amp;quot;}&amp;quot;);  String values that represent JSON primitive values can also be read.</description>
    </item>
    
    <item>
      <title>Reading XML</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/spin/xml/01-reading-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/spin/xml/01-reading-xml/</guid>
      <description>The XML dataformat supports reading XML from Strings or input streams.
Reading XML from a String: import static org.camunda.spin.Spin.*; import static org.camunda.spin.DataFormats.*; SpinXmlElement xml = S(&amp;quot;&amp;lt;order /&amp;gt;&amp;quot;, xml());  The second paramter xml() hints Spin to use the XML data format for parsing the XML.
Alternatively, you can directly use the XML(...) function:
import static org.camunda.spin.Spin.*; SpinXmlElement xml = XML(&amp;quot;&amp;lt;order /&amp;gt;&amp;quot;);  Reading XML from a Reader: Spin also supports reading XML directly from a java.</description>
    </item>
    
    <item>
      <title>Resolve Incident</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/incident/resolve-incident/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/incident/resolve-incident/</guid>
      <description>Resolves an incident with given id
Method DELETE /incident/{id}
Parameters Path Parameters  Name Description   id The id of the incident to be resolved.   Result This method returns no content.
Response Codes  Code Media type Description   204 application/json Request successful.   404 application/json Returned if an incident with given id does not exist.   400 application/json Returned if an incident is not related to any execution or an incident is of type &#34;</description>
    </item>
    
    <item>
      <title>Service Task 服务任务</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/tasks/service-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/tasks/service-task/</guid>
      <description>服务任务用于调用服务。在Camunda中，这是通过调用Java代码来完成的，或者为外部工作者提供的工作项来完成以异步或直接调用Web服务的形式实现逻辑。
调用Java Code. 有四种方式配置如何调用Java逻辑：
 指定实现Java委托或活动行为的类 计算解析为委派对象的表达式 调用方法表达式 计算表达式  要指定在流程执行期间调用的类，所需的完全限定类名需要由camunda:class属性提供。
&amp;lt;serviceTask id=&amp;quot;javaService&amp;quot; name=&amp;quot;My Java Service Task&amp;quot; camunda:class=&amp;quot;org.camunda.bpm.MyJavaDelegate&amp;quot; /&amp;gt;  请参阅User Guide 中的 Java 委托类 章节，了解有关如何实现Java委托的详细信息。
还可以使用解析为对象的表达式。这个对象必须遵循使用与Camunda：Class属性时创建的对象相同的规则。
&amp;lt;serviceTask id=&amp;quot;beanService&amp;quot; name=&amp;quot;My Bean Service Task&amp;quot; camunda:delegateExpression=&amp;quot;${myDelegateBean}&amp;quot; /&amp;gt;  或调用方法或解析值的表达式。
&amp;lt;serviceTask id=&amp;quot;expressionService&amp;quot; name=&amp;quot;My Expression Service Task&amp;quot; camunda:expression=&amp;quot;${myBean.doWork()}&amp;quot; /&amp;gt;  有关表达式语言作为委派代码的详细信息，请参阅相应的 User Guide 的 section 章节。
也可以调用以Web服务形式实现的逻辑。 camunda:connector 是一个扩展，允许直接从工作流程调用REST/SOAP API。 有关使用连接器的更多信息，请参阅相应的信息 User Guide 中的 section 章节。
通过 Java 委托类 &amp;amp; 参数注入 您可以轻松地编写通用Java委托类，该类可以通过BPMN 2稍后配置.</description>
    </item>
    
    <item>
      <title>Spring Boot Version Compatibility</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/spring-boot-integration/version-compatibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/spring-boot-integration/version-compatibility/</guid>
      <description>Each version of the Camunda Spring Boot Starter is bound to a specific version of Camunda Platform and Spring Boot. Only these default combinations are recommended (and supported) by Camunda. Other combinations must be thoroughly tested before being used in production.
Heads UpStarting with version 7.13.0, Camunda Platform and its compatible Spring Boot Starter always share the same version. Also, the Camunda Platform version used in the Spring Boot Starter doesn&amp;rsquo;t have to be overridden anymore.</description>
    </item>
    
    <item>
      <title>Stage</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/cmmn11/grouping-tasks/stage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/cmmn11/grouping-tasks/stage/</guid>
      <description>A stage can contain other plan items like a human task, a process task, a case task or another stage. Stages may be considered &amp;lsquo;episodes&amp;rsquo; of a case. However, stages are not necessarily planned sequentially but can also be active in parallel.
If a stage is collapsed, only its name and a plus sign are displayed:
If a stage is expanded, its plan items are displayed within its boundaries:</description>
    </item>
    
    <item>
      <title>Start Events</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/start-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/start-events/</guid>
      <description>Start events define where a Process or Sub Process starts.
The process engine supports different types of start events:
 Blank Timer Message Signal Conditional  The engine requires at least one start event to instantiate a process. There can be a maximum of one blank or timer start event per process definition. There can be multiple message or signal start events.
Asynchronous Instantiation A start event may be declared as asynchronous with camunda:asyncBefore=&amp;quot;true&amp;quot;</description>
    </item>
    
    <item>
      <title>Text Inputs</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/controls/inputs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/controls/inputs/</guid>
      <description>Single line text inputs are &amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt; controls. Single line text inputs are the most common input field and allow the user to provide values for different data types.
Binding Text Input to a Process Variable A text input can be bound to a process variable using the cam-variable-type and cam-variable-name directives:
&amp;lt;input type=&amp;quot;text&amp;quot; cam-variable-name=&amp;quot;CUSTOMER_ID&amp;quot; cam-variable-type=&amp;quot;String&amp;quot; /&amp;gt;  In the example above, the text input field is bound to the variable named CUSTOMER_ID of type String.</description>
    </item>
    
    <item>
      <title>The cam-script Directive</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/javascript/cam-script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/javascript/cam-script/</guid>
      <description>It is possible to use custom JavaScript in embedded forms.
Custom JavaScript can be added to a form by using a &amp;lt;script&amp;gt; tag and adding the cam-script directive:
&amp;lt;form role=&amp;quot;form&amp;quot;&amp;gt; &amp;lt;script cam-script type=&amp;quot;text/form-script&amp;quot;&amp;gt; // custom script goes here &amp;lt;/script&amp;gt; &amp;lt;/form&amp;gt;  </description>
    </item>
    
    <item>
      <title>Throw a Signal</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/signal/post-signal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/signal/post-signal/</guid>
      <description>A signal is an event of global scope (broadcast semantics) and is delivered to all active handlers. Internally this maps to the engine&amp;rsquo;s signal event received builder method RuntimeService#createSignalEvent(). For more information about the signal behavior, see the Signal Events section of the BPMN 2.0 Implementation Reference.
Method POST /signal
Parameters Request Body A JSON object with the following properties:
 Name Description   name The name of the signal to deliver.</description>
    </item>
    
    <item>
      <title>User Management</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/admin/user-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/admin/user-management/</guid>
      <description>Users Menu The Users menu allows you to add, edit and delete user profiles. Furthermore, you can manage group membership and change passwords.
My Profile By clicking on your user name in the Users menu, you can access the My Profile menu. In the My Profile menu you can edit your personal account settings, such as:
 Profile: Change your name or email address. You cannot change the user account ID!</description>
    </item>
    
    <item>
      <title>Working with Tasklist</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/tasklist/working-with-tasklist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/tasklist/working-with-tasklist/</guid>
      <description>In the following example we will walk through a typical human workflow scenario. In our prepackaged distribution, Tasklist has four demo users which belong to different user groups. Sign in with the user demo.
Start a Process To start a process instance via Tasklist, click on Start process in the header menu of the dashboard and select a process out of the displayed list of process definitions. If no process definitions are listed here, please verify that your process application is deployed correctly and you have the required permissions* to start a process.</description>
    </item>
    
    <item>
      <title>bpm-platform.xml</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/deployment-descriptors/descriptors/bpm-platform-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/deployment-descriptors/descriptors/bpm-platform-xml/</guid>
      <description>The bpm-platform.xml file is part of the Camunda Platform distribution and can be used for configuration of process engines and the job executor. It is used to configure the Camunda Platform in the following distributions:
 Apache Tomcat IBM WebSphere Application Server Oracle WebLogic Application Server  JBoss Application Server 7/WildflyThe bpm-platform.xml file is not used in the Camunda Platform distribution for JBoss Application Server 7 / Wildfly. There, the configuration is added to the central application server configuration file (standalone.</description>
    </item>
    
    <item>
      <title>下载</title>
      <link>http://camunda-cn.shaochenfeng.com/introduction/downloading-camunda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/introduction/downloading-camunda/</guid>
      <description>先决条件 在下载 Camunda 之前，首先你需要安装 JRE (Java Runtime Environment) 或者 JDK (Java Development Kit)（JDK是更好的选择）。 检查你的Java版本是否是 支持的 Java 版本.
JDK 下载地址
下载运行时 Camunda是一个灵活的框架，可以用在不同的环境中运行。详情参见架构概述。 根据你想使用Camunda的方式，你可以选择不同的运行方式。
社区版 vs. 企业版 Camunda为社区用户和企业订阅客户提供不同的运行时下载：
 社区版下载地址 企业版下载地址  也可以通过Spring Boot 和 Docker的方式运行Camunda平台。
整合包 如果你想使用 分布式流程引擎 或者想快速了解Camunda，不想做任何额外的设置或安装步骤，可以下载整合包。
整合包捆绑包括了：
 配置好的 分布式流程引擎, 网络应用程序 (Tasklist, Cockpit, Admin), Rest Api 接口, 容器/应用服务器本身.  服务器/容器如果你下载了开源应用服务器/容器的整合包，那么容器本身也会包括在内。例如，如果你下载tomcat发行版，tomcat本身就包括在内，Camunda二进制文件（流程引擎和网络应用程序）也会预先安装在容器中。而Oracle WebLogic和IBM WebSphere的下载则不会这样的。这些包是不包括应用服务器本身。
Wildfly应用程序服务器Wildfly应用服务器是作为档案的一部分提供的，作为一种方便。 关于源代码的副本、版权声明以及其他相关信息，请参见https://github.com/wildfly/wildfly。如果你[联系我们的开源合规团队](https://docs.camunda.org/manual/latest/introduction/licenses/#contact)，我们也会向你提供一份源代码的副本。 在您下载存档后三年内的任何时候（我们可能会对此收取象征性的费用）。Wildfly应用服务器的版权属于 copyright © JBoss, Home of Professional Open Source, 2010, Red Hat Middleware LLC [.</description>
    </item>
    
    <item>
      <title>数据库结构</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/database/database-schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/database/database-schema/</guid>
      <description>The database schema of the process engine consists of multiple tables. The table names all start with ACT. The second part is a two-character identification of the use case of the table. This use case will also roughly match the service API.
 ACT_RE_*: RE stands for repository. Tables with this prefix contain &amp;lsquo;static&amp;rsquo; information such as process definitions and process resources (images, rules, etc.). ACT_RU_*: RU stands for runtime.</description>
    </item>
    
    <item>
      <title>流程引擎集成</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/process-engine-bootstrapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/process-engine-bootstrapping/</guid>
      <description>你有许多选项来配置并创建一个流程引擎，这取决于你打算使用一个应用管理流程引擎的还是一个共享的、容器管理流程引擎。
应用程序管理流程引擎 你将流程引擎为应用程序的一部分。可以配置以下方式来配置它：
 通过Java API以编程方式管理 通过XML配置 通过 Spring  共享的，容器化管理流程引擎 你选择的容器（例如Tomcat、JBoss或IBM WebSphere）为你管理流程引擎。配置是以一种特定的容器方式进行的，详情见运行时容器集成.
ProcessEngineConfiguration Bean （流程引擎配置Bean） Camunda引擎使用 ProcessEngineConfiguration bean来配置和构建一个独立的流程引擎。它有多个可用的子类，可以用来定义流程引擎的配置。这些类代表不同的环境，并相应地设置默认值。最好的做法是选择与你的环境相匹配（大部分）的类，以尽量减少配置引擎所需的属性数量。目前有以下几个类。
 org.camunda.bpm.engine.impl.cfg.StandaloneProcessEngineConfiguration
流程引擎是以独立的方式使用的。引擎本身将负责处理事务。默认情况下，只有在引擎启动时才会检查数据库（如果没有数据库模式或模式版本不正确，会抛出一个异常）。 org.camunda.bpm.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration
这是一个用于单元测试的工具类。引擎本身将负责处理事务。默认使用H2内存数据库。该数据库将在引擎启动和关闭时被创建和删除。当使用这个时，可能不需要额外的配置（除了，当使用作业执行器（job executor）或邮件功能时）。 org.camunda.bpm.engine.spring.SpringProcessEngineConfiguration
当流程引擎被用于Spring环境时使用。更多信息请参见Spring集成部分。 org.camunda.bpm.engine.impl.cfg.JtaProcessEngineConfiguration
当引擎以独立模式运行时，使用JTA事务。  使用Java API启动流程引擎 你可以通过创建正确的ProcessEngineConfiguration对象或使用一些预定义的对象，以编程方式配置流程引擎。
ProcessEngineConfiguration.createStandaloneProcessEngineConfiguration(); ProcessEngineConfiguration.createStandaloneInMemProcessEngineConfiguration();  现在你可以调用buildProcessEngine()操作来创建一个流程引擎。
ProcessEngine processEngine = ProcessEngineConfiguration.createStandaloneInMemProcessEngineConfiguration() .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_FALSE) .setJdbcUrl(&amp;quot;jdbc:h2:mem:my-own-db;DB_CLOSE_DELAY=1000&amp;quot;) .setJobExecutorActivate(true) .buildProcessEngine();  使用camunda cfg XML配置流程引擎 配置你的过程引擎的最简单的方法是通过一个叫做camunda.cfg.xml的XML文件。使用这个文件，你可以简单这样做:
ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine()  camunda.cfg.xml必须包含一个id为processEngineConfiguration的bean，选择最适合你需求的ProcessEngineConfiguration类。
&amp;lt;bean id=&amp;quot;processEngineConfiguration&amp;quot; class=&amp;quot;org.camunda.bpm.engine.impl.cfg.StandaloneProcessEngineConfiguration&amp;quot;&amp;gt;  这将在classpath上寻找一个camunda.cfg.xml文件，并根据该文件中的配置构建一个引擎。下面的片段显示了一个配置的例子：
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&amp;quot;&amp;gt; &amp;lt;bean id=&amp;quot;processEngineConfiguration&amp;quot; class=&amp;quot;org.</description>
    </item>
    
    <item>
      <title>Javadoc</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/javadoc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/javadoc/</guid>
      <description>https://docs.camunda.org/javadoc/camunda-bpm-platform/7.16/</description>
    </item>
    
    <item>
      <title>许可协议</title>
      <link>http://camunda-cn.shaochenfeng.com/introduction/licenses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/introduction/licenses/</guid>
      <description>Camunda平台 Camunda平台是一个基于Java的框架。
社区版 If you are using the community edition, the software is provided under various open source licenses (mainly Apache 2.0 and MIT). Which components are published under an open source license is clearly stated in the licensing header of a source file or a LICENSE file present in the root directory of the software source code repository.
企业版 If you are using the Enterprise Platform, the software is provided under a license agreement containing restrictions on use and disclosure and is protected by intellectual property laws.</description>
    </item>
    
    <item>
      <title>Admin Plugins</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/admin/extend/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/admin/extend/plugins/</guid>
      <description>Plugin CompatibilityPlease note that the code of Admin plugins might need to be migrated when updating Camunda Platform to a higher version (e.g. CSS styles).
Admin uses the concept of plugins to add own functionality without having to extend or hack the Admin web application.
For further details about the concepts behind plugins, please read the Cockpit plugins section.
Difference between Cockpit and Admin plugins: To publish the plugin with Admin, its class name must be put into a file called org.</description>
    </item>
    
    <item>
      <title>Available API</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/javascript/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/javascript/api/</guid>
      <description>Inside a form script, the following built-in variables and functions are available:
camForm The camForm variable is an instance of the CamSDK.Form class. It is the primary access point to the form API and allows definition of event handers for participation in the form lifecycle:
&amp;lt;form role=&amp;quot;form&amp;quot;&amp;gt; ... &amp;lt;script cam-script type=&amp;quot;text/form-script&amp;quot;&amp;gt; var variableManager = camForm.variableManager; camForm.on(&#39;variables-fetched&#39;, function() { // access to all process variables after the form has loaded console.</description>
    </item>
    
    <item>
      <title>Bootstrapping</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/integrate/bootstrapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/integrate/bootstrapping/</guid>
      <description>Creating a Client The Forms SDK uses an instance of the CamSDK.Client to communicate with the process engine (over the REST API):
var camClient = new CamSDK.Client({ mock: false, apiUri: &#39;http://localhost:8080/engine-rest&#39; });  Creating a Form In order to create a form, you need to create an instance of CamSDK.Form:
new CamSDK.Form({ // ... });  Providing a Task Id In case the form is a task form (i.e., the submission of the form should trigger the completing of a task), you need to provide a taskId:</description>
    </item>
    
    <item>
      <title>CSRF Prevention</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/shared-options/csrf-prevention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/shared-options/csrf-prevention/</guid>
      <description>A CSRF filter is enabled by default, validating each modifying request performed through the webapps. The filter implements a (per-session) Synchronization Token method for CSRF validation with an optional Same Origin with Standard Headers verification.
In Spring Boot Starter, the configuration needs to be made in the application.yaml. Please read more about it here.
If you would like to enable the additional Same Origin with Standard Headers verification, the targetOrigin init-parameter should be set in the web.</description>
    </item>
    
    <item>
      <title>Call Activity</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/subprocesses/call-activity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/subprocesses/call-activity/</guid>
      <description>BPMN 2.0 makes a distinction between an embedded subprocess and a call activity. From a conceptual point of view, both will call a subprocess when process execution arrives at the activity.
The difference is that the call activity references a process that is external to the process definition, whereas the subprocess is embedded within the original process definition. The main use case for the call activity is to have a reusable process definition that can be called from multiple other process definitions.</description>
    </item>
    
    <item>
      <title>Camunda BPMN Extension Attributes</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/custom-extensions/extension-attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/custom-extensions/extension-attributes/</guid>
      <description>The following attributes are extension attributes for the camunda namespace http://camunda.org/schema/1.0/bpmn.
assignee  Description  The attribute specifies a human performer of a User Task.    Type java.lang.String or org.camunda.bpm.engine.delegate.Expression   Possible Values  The name of a performer as java.lang.String or an expression which evaluates to a java.lang.String e.g., ${initiator}    Default Value &amp;ndash;   BPMN 2.0 Elements  User Task    asyncAfter  Description  Specifies an asynchronous continuation after an activity, see Asynchronous Continuations for more information.</description>
    </item>
    
    <item>
      <title>Camunda Platform License Book</title>
      <link>http://camunda-cn.shaochenfeng.com/introduction/third-party-libraries/camunda-bpm-platform-license-book/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/introduction/third-party-libraries/camunda-bpm-platform-license-book/</guid>
      <description>This page contains all the third-party libraries distributed with the Camunda Platform 7.15.0.
Java Dependencies logback-classic@1.2.3(EPL 1.0)Copyright (C) 1999-2015, QOS.ch. All rights reserved. logback-core@1.2.3(EPL 1.0)Copyright (C) 1999-2015, QOS.ch. All rights reserved. jackson-annotations@2.11.4(Apache 2.0)Copyright: 2011-2021 contributors: https://github.com/FasterXML/jackson-annotations/graphs/contributors jackson-annotations@2.12.1(Apache 2.0)Copyright: 2011-2021 contributors: https://github.com/FasterXML/jackson-annotations/graphs/contributors jackson-core@2.11.4(Apache 2.0)Copyright: https://github.com/FasterXML/jackson-core/blob/master/release-notes/CREDITS-2.x  jackson-core@2.12.1(Apache 2.0)Copyright: https://github.com/FasterXML/jackson-core/blob/master/release-notes/CREDITS-2.x  jackson-databind@2.11.4(Apache 2.0)Copyright: https://github.com/FasterXML/jackson-databind/blob/master/release-notes/CREDITS-2.x jackson-databind@2.12.1(Apache 2.0)Copyright: https://github.com/FasterXML/jackson-databind/blob/master/release-notes/CREDITS-2.x jackson-datatype-jdk8@2.11.4(Apache 2.0)Copyright: https://github.com/FasterXML/jackson-modules-java8/blob/master/release-notes/CREDITS-2.x  jackson-datatype-jsr310@2.11.4(Apache 2.0)Copyright: https://github.com/FasterXML/jackson-modules-java8/blob/master/release-notes/CREDITS-2.x jackson-jaxrs-base@2.11.4(Apache 2.0)Copyright: https://github.com/FasterXML/jackson-jaxrs-providers/blob/master/release-notes/CREDITS-2.x jackson-jaxrs-base@2.12.1(Apache 2.0)Copyright: https://github.com/FasterXML/jackson-jaxrs-providers/blob/master/release-notes/CREDITS-2.x jackson-jaxrs-json-provider@2.11.4(Apache 2.</description>
    </item>
    
    <item>
      <title>Case Instance View</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/cmmn/case-instance-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/cmmn/case-instance-view/</guid>
      <description>Enterprise FeaturePlease note that this feature is only included in the enterprise edition of the Camunda Platform, it is not available in the community edition.
Check the Camunda enterprise homepagefor more information or get yourfree trial version.Open the case instance view by selecting a case instance from the case definition view instance list. This view allows you to drill down into a single case instance and explore its activities as well as the variables, tasks, etc.</description>
    </item>
    
    <item>
      <title>Cockpit Plugins</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/extend/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/extend/plugins/</guid>
      <description>Plugin CompatibilityPlease note that we updated the frontend plugin interface with Camunda Platform Runtime 7.14. Plugins written for Camunda Platform Runtime 7.13 and earlier might no longer work with Camunda Platform Runtime 7.14. Checkout the update guide for more details.
Cockpit defines a plugin concept to add own functionality without being forced to extend or hack the Cockpit web application. You can add plugins at various plugin points, e.</description>
    </item>
    
    <item>
      <title>Conditional and Default Sequence Flows</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/gateways/sequence-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/gateways/sequence-flow/</guid>
      <description>A sequence flow is the connector between two elements of a process. After an element is visited during process execution, all outgoing sequence flows are followed. This means that the default nature of BPMN 2.0 is to be parallel: two outgoing sequence flows will create two separate, parallel paths of execution.
 Camunda Extensions  Attributes &amp;ndash;   Extension Elements  camunda:executionListener    Constraints &amp;ndash;   Conditional Sequence Flow A sequence flow can have a condition defined on it.</description>
    </item>
    
    <item>
      <title>Cookie Security</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/shared-options/cookie-security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/shared-options/cookie-security/</guid>
      <description>Camundas Web applications use cookies to preserve user sessions and to prevent CSRF attacks. This page explains how these cookies should be configured to increase the security.
The Web applications set the following cookies:
 Session Cookie (JSESSIONID)  Supposed to remember the authenticated user after the login  CSRF Prevention Cookie (XSRF-TOKEN)  Supposed to prevent Cross-Site Request Forgery (CSRF) by sending a newly generated token along with each modifying request   What are the properties supposed to be?</description>
    </item>
    
    <item>
      <title>Create a Model</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/model-api/bpmn-model-api/create-a-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/model-api/bpmn-model-api/create-a-model/</guid>
      <description>To create a new BPMN model from scratch you have to create an empty BPMN model instance with the following method:
BpmnModelInstance modelInstance = Bpmn.createEmptyModel();  The next step is to create a BPMN definitions element. Set the target namespace on it and add it to the newly created empty model instance.
Definitions definitions = modelInstance.newInstance(Definitions.class); definitions.setTargetNamespace(&amp;quot;http://camunda.org/examples&amp;quot;); modelInstance.setDefinitions(definitions);  Usually you want to add a process to your model. This follows the same 3 steps as the creation of the BPMN definitions element:</description>
    </item>
    
    <item>
      <title>Create a Model</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/model-api/cmmn-model-api/create-a-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/model-api/cmmn-model-api/create-a-model/</guid>
      <description>To create a new CMMN model from scratch, you have to create an empty CMMN model instance with the following method:
CmmnModelInstance modelInstance = Cmmn.createEmptyModel();  The next step is to create a CMMN definitions element. Set the target namespace on it and add it to the newly created empty model instance.
Definitions definitions = modelInstance.newInstance(Definitions.class); definitions.setTargetNamespace(&amp;quot;http://camunda.org/examples&amp;quot;); modelInstance.setDefinitions(definitions);  Usually you want to add a case to your model. This follows the same 3 steps as the creation of the CMMN definitions element:</description>
    </item>
    
    <item>
      <title>Create a Model</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/model-api/dmn-model-api/create-a-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/model-api/dmn-model-api/create-a-model/</guid>
      <description>To create a new DMN model from scratch, you have to create an empty DMN model instance with the following method:
DmnModelInstance modelInstance = Dmn.createEmptyModel();  The next step is to create a DMN definitions element. Set the target namespace on it and add it to the newly created empty model instance.
Definitions definitions = modelInstance.newInstance(Definitions.class); definitions.setNamespace(&amp;quot;http://camunda.org/schema/1.0/dmn&amp;quot;); definitions.setName(&amp;quot;definitions&amp;quot;); definitions.setId(&amp;quot;definitions&amp;quot;); modelInstance.setDefinitions(definitions);  Usually you want to add a decision to your model.</description>
    </item>
    
    <item>
      <title>DMN Decision Table Output</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/dmn/decision-table/output/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/dmn/decision-table/output/</guid>
      <description>A decision table can have one or more outputs, also called output clauses. An output clause defines the id, label, name and type of a decision table output.
An output clause is represented by an output element inside a decisionTable XML element.
&amp;lt;definitions xmlns=&amp;quot;https://www.omg.org/spec/DMN/20191111/MODEL/&amp;quot; id=&amp;quot;definitions&amp;quot; name=&amp;quot;definitions&amp;quot; namespace=&amp;quot;http://camunda.org/schema/1.0/dmn&amp;quot;&amp;gt; &amp;lt;decision id=&amp;quot;dish&amp;quot; name=&amp;quot;Dish&amp;quot;&amp;gt; &amp;lt;decisionTable id=&amp;quot;decisionTable&amp;quot;&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;output id=&amp;quot;output1&amp;quot; label=&amp;quot;Dish&amp;quot; name=&amp;quot;desiredDish&amp;quot; typeRef=&amp;quot;string&amp;quot; /&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;/decisionTable&amp;gt; &amp;lt;/decision&amp;gt; &amp;lt;/definitions&amp;gt;  Output Id The output id is a unique identifier of the decision table output.</description>
    </item>
    
    <item>
      <title>Dashboard</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/tasklist/dashboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/tasklist/dashboard/</guid>
      <description>On the dashboard of Tasklist you see an overview of pending tasks. On the left side of the screen, an overview of the filters is displayed. On the upper right side of the screen, you can set a follow-up or due date, you can claim, unclaim and reassign tasks and you can add comments. Underneath that section, the embedded form is displayed (please note that external task forms cannot be displayed here), you can switch to the task history, you can see the diagram view or you can view the description of the user task.</description>
    </item>
    
    <item>
      <title>Data Formats in Processes</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/data-formats/data-formats-in-processes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/data-formats/data-formats-in-processes/</guid>
      <description>The main entry point to Spin&amp;rsquo;s functionality is the static function org.camunda.spin.Spin.S that can be used to process documents or to map Java objects to a document format. The returned value of this function is a Spin wrapper, which is an intermediary representation of a document and that offers functions for manipulation of the underlying document. Additionally, the functions org.camunda.spin.Spin.XML and org.camunda.spin.Spin.JSON can be used that return a strongly-typed Spin wrapper of the provided documents which is useful when writing Java.</description>
    </item>
    
    <item>
      <title>Decision Instance View</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/dmn/decision-instance-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/dmn/decision-instance-view/</guid>
      <description>On the decision instance page you find the table or literal expression of the decision that was executed as well as the values for the input variables and the decision result.
The input and output values for this decision instance are shown directly on the table in the corresponding cells as well as in the Inputs and Outputs tabs below the table. Complex variables like Objects, Files and Bytes are not displayed on the table.</description>
    </item>
    
    <item>
      <title>Decisions in the Process Engine Repository</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/decisions/repository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/decisions/repository/</guid>
      <description>To evaluate a DMN decision in Camunda Platform, it has to be part of a Deployment. After a decision has been deployed, it can be referenced by its key and version. The platform supports DMN 1.3 XML files.
Deploying a Decision To deploy a DMN decision you can either use the Repository Service or add it to a process application. The platform will recognize all files with a .dmn or .</description>
    </item>
    
    <item>
      <title>Delegation Code</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/model-api/bpmn-model-api/delegation-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/model-api/bpmn-model-api/delegation-code/</guid>
      <description>If you use Delegation Code, you can access the BPMN model instance and current element of the executed process. If a BPMN model is accessed, it will be cached to avoid redundant database queries.
Java Delegate If your class implements the org.camunda.bpm.engine.delegate.JavaDelegate interface, you can access the BPMN model instance and the current flow element. In the following example the JavaDelegate was added to a service task in the BPMN model.</description>
    </item>
    
    <item>
      <title>Delegation Code</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/model-api/cmmn-model-api/delegation-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/model-api/cmmn-model-api/delegation-code/</guid>
      <description>If you use Delegation Code, you can access the CMMN model instance and current element of the executed case. If a CMMN model is accessed, it will be cached to avoid redundant database queries.
Case Execution Listener If your class implements the org.camunda.bpm.engine.delegate.CaseExecutionListener interface, you can access the CMMN model instance and the plan item element. As a Case Execution Listener can be added to several elements like case plan model, human task, etc.</description>
    </item>
    
    <item>
      <title>Delete Process Instance</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/delete/</guid>
      <description>Deletes a running process instance by id.
Method DELETE /process-instance/{id}
Parameters Path Parameters  Name Description   id The id of the process instance to be deleted.   Query Parameters  Name Description   skipCustomListeners  If set to true, the custom listeners will be skipped.    skipIoMappings  If set to true, the input/output mappings will be skipped.    skipSubprocesses  If set to true, subprocesses related to deleted processes will be skipped.</description>
    </item>
    
    <item>
      <title>Delete a Group Member</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/group/members/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/group/members/delete/</guid>
      <description>Removes a member from a group.
Method DELETE /group/{id}/members/{userId}
Parameters Path Parameters  Name Description   id The id of the group.   userId The id of user to remove from the group.   Result This method returns no content.
Response Codes  Code Media type Description   204 application/json Request successful.   403 application/json Identity service is read-only (Cannot modify users / groups / memberships).</description>
    </item>
    
    <item>
      <title>Delete a Tenant Group Membership</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/group-members/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/group-members/delete/</guid>
      <description>Deletes a membership between a tenant and a group.
Method DELETE /tenant/{id}/group-members/{groupId}
Parameters Path Parameters  Name Description   id The id of the tenant.   groupId The id of the group.   Result This method returns no content.
Response Codes  Code Media type Description   204 application/json Request successful.   403 application/json Identity service is read-only.   500 application/json In case an error occurs.</description>
    </item>
    
    <item>
      <title>Delete a Tenant User Membership</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/user-members/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/user-members/delete/</guid>
      <description>Deletes a membership between a tenant and an user.
Method DELETE /tenant/{id}/user-members/{userId}
Parameters Path Parameters  Name Description   id The id of the tenant.   userId The id of the user.   Result This method returns no content.
Response Codes  Code Media type Description   204 application/json Request successful.   403 application/json Identity service is read-only.   500 application/json In case an error occurs.</description>
    </item>
    
    <item>
      <title>Editing DMN in Camunda Modeler</title>
      <link>http://camunda-cn.shaochenfeng.com/modeler/dmn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/modeler/dmn/</guid>
      <description>Quickstart Create new DMN Decision Requirement Diagram To start modeling, create a new DMN 1.3 diagram for the Camunda Platform by selecting Create diagram &amp;gt; Create new DMN diagram (Camunda Platform) in the top-level menu.
Start Modeling Now you can start to create a DMN 1.3 model. Add the desired elements from the palette on the left hand side by dragging and dropping them onto the diagram canvas.</description>
    </item>
    
    <item>
      <title>Evaluating Decisions using the DMN Engine API</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/dmn-engine/evaluate-decisions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/dmn-engine/evaluate-decisions/</guid>
      <description>The DMN engine interfaceexposes methods for parsing and evaluating DMN Decisions.
Parse Decisions Decisions can be parsed from an InputStream or transformed from a DmnModelInstance.
This example shows how to parse a decision from an input stream:
// create a default DMN engine DmnEngine dmnEngine = DmnEngineConfiguration .createDefaultDmnEngineConfiguration() .buildEngine(); InputStream inputStream = ... // parse all decision from the input stream List&amp;lt;DmnDecision&amp;gt; decisions = dmnEngine.parseDecisions(inputStream);  The next example uses the DMN Model API to first create a DmnModelInstance and then transform the decisions:</description>
    </item>
    
    <item>
      <title>Extension Attributes</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/cmmn11/custom-extensions/camunda-attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/cmmn11/custom-extensions/camunda-attributes/</guid>
      <description>The following attributes are extension attributes for the camunda namespace http://camunda.org/schema/1.0/cmmn.
assignee  Description  This attribute specifies a performer of a Human Task.    Type java.lang.String or org.camunda.bpm.engine.delegate.Expression   Possible Values  The name of a performer as java.lang.String or an expression which evaluates to a java.lang.String e.g., ${perfomer}    Default Value &amp;ndash;   CMMN 1.1 Elements  Human Task    candidateGroups  Description  This attribute specifies which group(s) will be candidate for performing the Human Task.</description>
    </item>
    
    <item>
      <title>Extension Attributes</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/dmn/custom-extensions/camunda-attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/dmn/custom-extensions/camunda-attributes/</guid>
      <description>The following attributes are extension attributes for the camunda namespace http://camunda.org/schema/1.0/dmn.
historyTimeToLive  Description  The attribute specifies the history time to live (in days) for the decision definition. It is used within History cleanup.    Type java.lang.Integer or java.lang.String   Possible Values  Any non-negative integer number or string containing a time in days defined by the ISO-8601 date format.    Default Value null - means that decision definition history won&#39;t ever be removed during history cleanup run   DMN 1.</description>
    </item>
    
    <item>
      <title>FEEL Engine Custom Functions</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/dmn-engine/feel/custom-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/dmn-engine/feel/custom-functions/</guid>
      <description>Camunda Platform provides a wrapper for the FEEL Scala Engine to implement Custom Functions, which can be called in expressions and unary tests.
Custom Function BehaviorPlease note that the Custom Function Mechanism of the Standalone FEEL Scala Engine might behave differently.
You can add Custom Functions to the Process Engine (or the Standalone DMN Engine) only programmatically through a Process Engine Plugin. Read more about it in the section about how to Register Custom Function Providers.</description>
    </item>
    
    <item>
      <title>FEEL Language Elements</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/dmn/feel/legacy/language-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/dmn/feel/legacy/language-elements/</guid>
      <description>Heads Up!This page provides information on the legacy FEEL Engine, that was used before the current Scala-based FEEL Engine was integrated into the Camunda Platform.
The Camunda DMN engine supports FEEL for input entries. The FEEL term for expression in input entries are simple unary tests. These simple unary tests test an input value against an expression and return either true if the test is satisfied or false otherwise.</description>
    </item>
    
    <item>
      <title>Get Authorization Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/authorization/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/authorization/get-query-count/</guid>
      <description>Queries for authorizations using a list of parameters and retrieves the count.
Method GET /authorization/count
Parameters Query Parameters  Name Description   id Filter by the id of the authorization.   type Filter by authorization type. (0=global, 1=grant, 2=revoke). See the User Guide for more information about authorization types.   userIdIn Filter by a comma-separated list of userIds.   groupIdIn Filter by a comma-separated list of groupIds.</description>
    </item>
    
    <item>
      <title>Get Batch Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/batch/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/batch/get-query-count/</guid>
      <description>Requests the number of batches that fulfill the query criteria. Takes the same filtering parameters as the Get Batches method.
Method GET /batch/count
Parameters Query Parameters  Name Description   batchId Filter by batch id.   type Filter by batch type. See the User Guide for more information about batch types.   tenantIdIn Filter by a comma-separated list of tenant ids. A batch matches if it has one of the given tenant ids.</description>
    </item>
    
    <item>
      <title>Get Case Definition Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-definition/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-definition/get-query-count/</guid>
      <description>Requests the number of case definitions that fulfill the query criteria. Takes the same filtering parameters as the Get Case Definitions method.
Method GET /case-definition/count
Parameters Query Parameters  Name Description   caseDefinitionId Filter by case definition id.   caseDefinitionIdIn Filter by case definition ids.   name Filter by case definition name.   nameLike Filter by case definition names that the parameter is a substring of.</description>
    </item>
    
    <item>
      <title>Get Case Execution Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/get-query-count/</guid>
      <description>Queries for the number of case executions that fulfill given parameters. Takes the same parameters as the Get Case Executions method.
Method GET /case-execution/count
Parameters Query Parameters  Name Description   caseExecutionId Filter by a case execution id.   caseInstanceId Filter by a case instance id.   businessKey Filter by the business key of the case instances the case executions belong to.   caseDefinitionId Filter by the case definition the case executions run on.</description>
    </item>
    
    <item>
      <title>Get Case Instance Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/get-query-count/</guid>
      <description>Queries for the number of case instances that fulfill given parameters. Takes the same parameters as the Get Case Instances method.
Method GET /case-instance/count
Parameters Query Parameters  Name Description   caseInstanceId Filter by a case instance id.   businessKey Filter by case instance business key.   caseDefinitionId Filter by the case definition the case instances run on.   caseDefinitionKey Filter by the key of the case definition the case instances run on.</description>
    </item>
    
    <item>
      <title>Get Cleanable Case Instance Report</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-definition/get-cleanable-case-instance-report/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-definition/get-cleanable-case-instance-report/</guid>
      <description>Retrieves a report about a case definition and finished case instances relevant to history cleanup (see History cleanup), so that you can tune the history time to live. These reports include the count of the finished historic case instances, cleanable case instances and basic case definition data - id, key, name and version. The size of the result set can be retrieved by using the Get Cleanable Case Instance Report Count method.</description>
    </item>
    
    <item>
      <title>Get Cleanable Decision Instance Report Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/decision-definition/get-cleanable-decision-instance-report-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/decision-definition/get-cleanable-decision-instance-report-count/</guid>
      <description>Queries for the number of report results about a decision definition and finished decision instances relevant to history cleanup (see History cleanup). Takes the same parameters as the Get Cleanable Decision Instance Report method.
Method GET /history/decision-definition/cleanable-decision-instance-report/count
Parameters Query Parameters  Name Description   decisionDefinitionIdIn Filter by decision definition ids. Must be a comma-separated list of decision definition ids.   decisionDefinitionKeyIn Filter by decision definition keys. Must be a comma-separated list of decision definition keys.</description>
    </item>
    
    <item>
      <title>Get Cleanable Process Instance Report</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-definition/get-cleanable-process-instance-report/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-definition/get-cleanable-process-instance-report/</guid>
      <description>Retrieves a report about a process definition and finished process instances relevant to history cleanup (see History cleanup) so that you can tune the history time to live. These reports include the count of the finished historic process instances, cleanable process instances and basic process definition data - id, key, name and version. The size of the result set can be retrieved by using the Get Cleanable Process Instance Report Count method.</description>
    </item>
    
    <item>
      <title>Get Decision Definition Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/decision-definition/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/decision-definition/get-query-count/</guid>
      <description>Requests the number of decision definitions that fulfill the query criteria. Takes the same filtering parameters as the Get Decision Definitions method.
Method GET /decision-definition/count
Parameters Query Parameters  Name Description   decisionDefinitionId Filter by decision definition id.   decisionDefinitionIdIn Filter by decision definition ids.   name Filter by decision definition name.   nameLike Filter by decision definition names that the parameter is a substring of.</description>
    </item>
    
    <item>
      <title>Get Decision Requirements Definition Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/decision-requirements-definition/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/decision-requirements-definition/get-query-count/</guid>
      <description>Requests the number of decision requirements definitions that fulfill the query criteria. Takes the same filtering parameters as the Get Decision Requirements Definitions method.
Method GET /decision-requirements-definition/count
Parameters Query Parameters  Name Description   decisionRequirementsDefinitionId Filter by decision requirements definition id.   decisionRequirementsDefinitionIdIn Filter by decision requirements definition ids.   name Filter by decision requirements definition name.   nameLike Filter by decision requirements definition names that the parameter is a substring of.</description>
    </item>
    
    <item>
      <title>Get Deployment Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/deployment/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/deployment/get-query-count/</guid>
      <description>Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the Get Deployments method.
Method GET /deployment/count
Parameters Query Parameters  Name Description   id Filter by deployment id.   name Filter by the deployment name. Exact match.   nameLike Filter by the deployment name that the parameter is a substring of. The parameter can include the wildcard % to express like-strategy such as: starts with (%name), ends with (name%) or contains (%name%).</description>
    </item>
    
    <item>
      <title>Get Execution Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/execution/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/execution/get-query-count/</guid>
      <description>Queries for the number of executions that fulfill given parameters. Takes the same parameters as the Get Executions method.
Method GET /execution/count
Parameters Query Parameters  Name Description   businessKey Filter by the business key of the process instances the executions belong to.   processDefinitionId Filter by the process definition the executions run on.   processDefinitionKey Filter by the key of the process definition the executions run on.</description>
    </item>
    
    <item>
      <title>Get External Task Log Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/external-task-log/get-external-task-log-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/external-task-log/get-external-task-log-query-count/</guid>
      <description>Queries for the number of historic external task logs that fulfill the given parameters. Takes the same parameters as the Get External Task Logs method.
Method GET /history/external-task-log/count
Parameters Query Parameters  Name Description   logId Filter by historic external task log id.   externalTaskId Filter by external task id.   topicName Filter by an external task topic.   workerId Filter by the id of the worker that the task was most recently locked by.</description>
    </item>
    
    <item>
      <title>Get External Tasks</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/get-query/</guid>
      <description>Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the Get External Task Count method.
Method GET /external-task
Parameters Query Parameters  Name Description   externalTaskId Filter by an external task&#39;s id.   externalTaskIdIn Filter by the comma-separated list of external task ids.   topicName Filter by an external task topic.</description>
    </item>
    
    <item>
      <title>Get Filter Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/filter/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/filter/get-query-count/</guid>
      <description>Retrieves the number of filters that fulfill a provided query. Corresponds to the size of the result set when using the Get Filters method.
Method GET /filter/count
Parameters Query Parameters  Name Description   filterId Restrict to filters that have the given id.   resourceType Restrict to filters that have the given resource type, e.g., Task.   name Restrict to filters that have the given name.   nameLike Restrict to filters that have a name with the given parameter value as substring.</description>
    </item>
    
    <item>
      <title>Get Group Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/group/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/group/get-query-count/</guid>
      <description>Queries for groups using a list of parameters and retrieves the count.
Method GET /group/count
Parameters Query Parameters  Name Description   id Filter by the id of the group.   idIn Filter by a comma-separated list of group ids.   name Filter by the name of the group.   nameLike Filter by the name that the parameter is a substring of.   type Filter by the type of the group.</description>
    </item>
    
    <item>
      <title>Get Historic Activity Instance Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/activity-instance/get-activity-instance-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/activity-instance/get-activity-instance-query-count/</guid>
      <description>Queries for the number of historic activity instances that fulfill the given parameters. Takes the same parameters as the Get Historic Activity Instances method.
Method GET /history/activity-instance/count
Parameters Query Parameters  Name Description   activityInstanceId Filter by activity instance id.   processInstanceId Filter by process instance id.   processDefinitionId Filter by process definition id.   executionId Filter by the id of the execution that executed the activity instance.</description>
    </item>
    
    <item>
      <title>Get Historic Batch Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/batch/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/batch/get-query-count/</guid>
      <description>Requests the number of historic batches that fulfill the query criteria. Takes the same filtering parameters as the Get Historic Batches method.
Method GET /history/batch/count
Parameters Query Parameters  Name Description   batchId Filter by batch id.   type Filter by batch type. See the User Guide for more information about batch types.   completed  Filter completed or not completed batches. If the value is true, only completed batches, i.</description>
    </item>
    
    <item>
      <title>Get Historic Case Activity Instance Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-activity-instance/get-case-activity-instance-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-activity-instance/get-case-activity-instance-query-count/</guid>
      <description>Queries for the number of historic case activity instances that fulfill the given parameters. Takes the same parameters as the Get Historic Case Activity Instances method.
Method GET /history/case-activity-instance/count
Parameters Query Parameters  Name Description   caseActivityInstanceId Filter by case activity instance id.   caseActivityInstanceIdIn Only include case activity instances which belong to one of the passed and comma-separated activity instance ids.   caseInstanceId Filter by case instance id.</description>
    </item>
    
    <item>
      <title>Get Historic Case Instance Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-instance/get-case-instance-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-instance/get-case-instance-query-count/</guid>
      <description>Queries for the number of historic case instances that fulfill the given parameters. Takes the same parameters as the Get Historic Case Instances method.
Method GET /history/case-instance/count
Parameters Query Parameters  Name Description   caseInstanceId Filter by case instance id.   caseInstanceIds Filter by case instance ids. Must be a comma-separated list of case instance ids.  caseDefinitionId Filter by the case definition the instances run on.   caseDefinitionKey Filter by the key of the case definition the instances run on.</description>
    </item>
    
    <item>
      <title>Get Historic Decision Instance Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/decision-instance/get-decision-instance-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/decision-instance/get-decision-instance-query-count/</guid>
      <description>Queries for the number of historic decision instances that fulfill the given parameters. Takes the same parameters as the Get Historic Decision Instances method.
Method GET /history/decision-instance/count
Parameters Query Parameters  Name Description   decisionInstanceId Filter by decision instance id.   decisionInstanceIdIn Filter by decision instance ids. Must be a comma-separated list of decision instance ids.   decisionDefinitionId Filter by the decision definition the instances belongs to.</description>
    </item>
    
    <item>
      <title>Get Historic Detail Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/detail/get-detail-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/detail/get-detail-query-count/</guid>
      <description>Queries for the number of historic details that fulfill the given parameters. Takes the same parameters as the Get Historic Details method.
Method GET /history/detail/count
Parameters Query Parameters  Name Description   processInstanceId Filter by process instance id.   processInstanceIdIn Only include historic details which belong to one of the passed process instance ids.   executionId Filter by execution id.   taskId Filter by task id.</description>
    </item>
    
    <item>
      <title>Get Identity-Link-Log Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/identity-links/get-identity-link-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/identity-links/get-identity-link-query-count/</guid>
      <description>Queries for the number of historic identity link logs that fulfill the given parameters. Takes the same parameters as the Get Identity-Link-Logs method.
Method GET /history/identity-link-log/count
Parameters Query Parameters  Name Description   type Restricts to identity links that have the given type(candidate/assignee/owner).   userId Restricts to identity links that have the given user id.   groupId Restricts to identity links that have the given group id.</description>
    </item>
    
    <item>
      <title>Get Incident Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/incident/get-incident-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/incident/get-incident-query-count/</guid>
      <description>Queries for the number of historic incidents that fulfill the given parameters. Takes the same parameters as the Get Incidents method.
Method GET /history/incident/count
Parameters Query Parameters  Name Description   incidentId Restricts to incidents that have the given id.   incidentType Restricts to incidents that belong to the given incident type. See the User Guide for a list of incident types.   incidentMessage Restricts to incidents that have the given incident message.</description>
    </item>
    
    <item>
      <title>Get Job Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job/get-query-count/</guid>
      <description>Queries for the number of jobs that fulfill given parameters. Takes the same parameters as the Get Jobs method.
Method GET /job/count
Parameters Query Parameters  Name Description   jobId Filter by job id.   jobIds Filter by a comma-separated list of job ids.   jobDefinitionId Only select jobs which exist for the given job definition.   processInstanceId Only select jobs which exist for the given process instance.</description>
    </item>
    
    <item>
      <title>Get Job Definition Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job-definition/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job-definition/get-query-count/</guid>
      <description>Queries for the number of job definitions that fulfill given parameters. Takes the same parameters as the Get Job Definitions method.
Method GET /job-definition/count
Parameters Query Parameters  Name Description   jobDefinitionId Filter by job definition id.   activityIdIn Only include job definitions which belong to one of the passed and comma-separated activity ids.   processDefinitionId Only include job definitions which exist for the given process definition id.</description>
    </item>
    
    <item>
      <title>Get Job Log Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/job-log/get-job-log-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/job-log/get-job-log-query-count/</guid>
      <description>Queries for the number of historic job logs that fulfill the given parameters. Takes the same parameters as the Get Job Logs method.
Method GET /history/job-log/count
Parameters Query Parameters  Name Description   logId Filter by historic job log id.   jobId Filter by job id.   jobExceptionMessage Filter by job exception message.   jobDefinitionId Filter by job definition id.   jobDefinitionType Filter by job definition type.</description>
    </item>
    
    <item>
      <title>Get Process Diagram</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get-diagram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get-diagram/</guid>
      <description>Retrieves the diagram of a process definition.
If the process definition&amp;rsquo;s deployment contains an image resource with the same file name as the process definition, the deployed image will be returned by the Get Diagram endpoint. Example: someProcess.bpmn and someProcess.png. Supported file extentions for the image are: svg, png, jpg, and gif.
Method GET /process-definition/{id}/diagram
GET /process-definition/key/{key}/diagram (returns the diagram for the latest version of the process definition which belongs to no tenant)</description>
    </item>
    
    <item>
      <title>Get Process Instance Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-instance/get-process-instance-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-instance/get-process-instance-query-count/</guid>
      <description>Queries for the number of historic process instances that fulfill the given parameters. Takes the same parameters as the Get Process Instances method.
Method GET /history/process-instance/count
Parameters Query Parameters  Name Description   processInstanceId Filter by process instance id.   processInstanceIds Filter by process instance ids. Must be a comma-separated list of process instance ids.   processInstanceBusinessKey Filter by process instance business key.   processInstanceBusinessKeyLike Filter by process instance business key that the parameter is a substring of.</description>
    </item>
    
    <item>
      <title>Get Schema Log (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/schema-log/post-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/schema-log/post-query/</guid>
      <description>Queries for schema log entries that fulfill given parameters.
Method POST /schema/log
Parameters Query Parameter  Name Description   firstResult Pagination of results. Specifies the index of the first result to return.   maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results, if there are no more results left.   Request Body A JSON object with the following properties:</description>
    </item>
    
    <item>
      <title>Get Task Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/task/get-task-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/task/get-task-query-count/</guid>
      <description>Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the Get Tasks (Historic) method.
Method GET /history/task/count
Parameters Query Parameters  Name Description   taskId Filter by task id.   taskParentTaskId Filter by parent task id.   processInstanceId Filter by process instance id.   processInstanceBusinessKey Filter by process instance business key.    processInstanceBusinessKeyIn Filter by process instances with one of the give business keys.</description>
    </item>
    
    <item>
      <title>Get Tasks</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/get-query/</guid>
      <description>Queries for tasks that fulfill a given filter. The size of the result set can be retrieved by using the Get Task Count method.
Security ConsiderationThere are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on security considerations for custom code in the user guide for details.
Method GET /task
Parameters Query Parameters  Name Description   processInstanceId Restrict to tasks that belong to process instances with the given id.</description>
    </item>
    
    <item>
      <title>Get Tenant Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/get-query-count/</guid>
      <description>Query for tenants using a list of parameters and retrieves the count.
Method GET /tenant/count
Parameters Query Parameters  Name Description   id Filter by the id of the tenant.   name Filter by the name of the tenant.   nameLike Filter by the name that the parameter is a substring of.   userMember Select only tenants where the given user is a member of.   groupMember Select only tenants where the given group is a member of.</description>
    </item>
    
    <item>
      <title>Get User Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/user/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/user/get-query-count/</guid>
      <description>Query for users using a list of parameters and retrieves the count.
Method GET /user/count
Parameters Query Parameters  Name Description   id Filter by the id of the user.   idIn Filter by a comma-separated list of user ids.   firstName Filter by the first name of the user.   firstNameLike Filter by the first name that the parameter is a substring of.   lastName Filter by the last name of the user.</description>
    </item>
    
    <item>
      <title>Get User Operation Log Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/user-operation-log/get-user-operation-log-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/user-operation-log/get-user-operation-log-query-count/</guid>
      <description>Queries for the number of user operation log entries that fulfill the given parameters. Takes the same parameters as the Get User Operation Log (Historic) method.
Method GET /history/user-operation/count
Parameters Query Parameters  Name Description   deploymentId Filter by deployment id.   processDefinitionId Filter by process definition id.   processDefinitionKey Filter by process definition key.   processInstanceId Filter by process instance id.   executionId Filter by execution id.</description>
    </item>
    
    <item>
      <title>Get Variable Instance Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/variable-instance/get-variable-instance-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/variable-instance/get-variable-instance-query-count/</guid>
      <description>Queries for the number of historic variable instances that fulfill the given parameters. Takes the same parameters as the Get Variable Instances method.
Method GET /history/variable-instance/count
Parameters Query Parameters  Name Description   variableName Filter by variable name.   variableNameLike Restrict to variables with a name like the parameter.   variableValue Filter by variable value. Is treated as a String object on server side.   variableValue Filter by variable value.</description>
    </item>
    
    <item>
      <title>Get Variable Instance Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/variable-instance/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/variable-instance/get-query-count/</guid>
      <description>Query for the number of variable instances that fulfill given parameters. Takes the same parameters as the Get Variable Instances method.
Method GET /variable-instance/count
Parameters Query Parameters  Name Description   variableName Filter by variable instance name.   variableNameLike Filter by the variable instance name. The parameter can include the wildcard % to express like-strategy such as: starts with (%name), ends with (name%) or contains (%name%).   processInstanceIdIn Only include variable instances which belong to one of the passed and comma-separated process instance ids.</description>
    </item>
    
    <item>
      <title>Group Management</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/admin/group-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/admin/group-management/</guid>
      <description>Groups Menu The Groups menu allows you to add, edit and delete user groups. Besides that you can view the members of groups</description>
    </item>
    
    <item>
      <title>HTTP Header Security</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/shared-options/header-security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/shared-options/header-security/</guid>
      <description>The HTTP Header Security mechanism allows you to add security-related response headers which enable browser-side security mechanisms.
What are the headers supposed to be? This section briefly describes the purpose of the headers. You can find more information about the XSS Protection, Content Security Policy, Content-Type Options
as well as Strict Transport Security header in Mozilla’s Developer Guide.
XSS Protection If the XSS Protection header is enabled some cross-site scripting (XSS) attacks are detected, and the malicious parts of the page are either sanitized, or the rendering of the page is blocked entirely.</description>
    </item>
    
    <item>
      <title>Install the Full Distribution on Oracle WebLogic Application Server</title>
      <link>http://camunda-cn.shaochenfeng.com/installation/full/wls/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/installation/full/wls/manual/</guid>
      <description>This section will describe how you can install the Camunda Platform and its components on Oracle WebLogic.
Reading this GuideThis guide uses a number of variables to denote common path names and constants.
 $WLS_DOMAIN_HOME points to the Oracle WebLogic application server domain directory (typically something like /opt/oracle/WebLogic/domains/mydomain). $PLATFORM_VERSION denotes the version of the Camunda Platform you want to or have installed, e.g. 7.X.Y. $WLS_DISTRIBUTION represents the downloaded Camunda Platform distribution for the Oracle WebLogic Application Server, e.</description>
    </item>
    
    <item>
      <title>Install the Full Distribution on a JBoss/Wildfly Application Server manually </title>
      <link>http://camunda-cn.shaochenfeng.com/installation/full/jboss/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/installation/full/jboss/manual/</guid>
      <description>This document describes the installation of Camunda Platform and its components on a vanilla JBoss EAP 6 or vanilla Wildfly Application Server / JBoss EAP 7.
Reading this GuideThis guide uses a number of variables to denote common path names and constants: $JBOSS_HOME/$WILDFLY_HOME points to the JBoss/Wildfly application server main directory. $PLATFORM_VERSION denotes the version of the Camunda Platform you want to install or already have installed, e.g. 7.</description>
    </item>
    
    <item>
      <title>Install the Full Distribution on a Tomcat Application Server manually</title>
      <link>http://camunda-cn.shaochenfeng.com/installation/full/tomcat/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/installation/full/tomcat/manual/</guid>
      <description>This section describes how you can install the Camunda Platform and its components on a vanilla Apache Tomcat, if you are not able to use the pre-packaged Tomcat distribution. In addition, download a Tomcat distribution or Enterprise Edition Tomcat distribution to fetch the required Camunda modules.
Reading the GuideThroughout this guide we will use a number of variables to denote common path names and constants:
 $TOMCAT_HOME points to the main directory of the tomcat server.</description>
    </item>
    
    <item>
      <title>Install the Full Distribution on an IBM WebSphere Server</title>
      <link>http://camunda-cn.shaochenfeng.com/installation/full/was/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/installation/full/was/manual/</guid>
      <description>This section will describe how you can install the Camunda Platform and its components on an IBM WebSphere.
Reading this GuideThroughout this guide we will use a number of variables to denote common path names and constants.
 $WAS_HOME: points to the IBM WebSphere application server main directory (typically something like /opt/IBM/WebSphere/AppServer). $PLATFORM_VERSION denotes the version of the Camunda Platform you want to install or already have installed, e.</description>
    </item>
    
    <item>
      <title>Install the Standalone Webapplication (.war)</title>
      <link>http://camunda-cn.shaochenfeng.com/installation/standalone-webapplication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/installation/standalone-webapplication/</guid>
      <description>This document will guide you through the installation and configuration of the Camunda standalone web application. The Camunda web application combines Cockpit and Tasklist. The web application is self-contained and includes an embedded process engine, which is configured inside the application. The process engine is configured using the Spring Framework and will automatically start when the application is deployed. The process engine must be configured to connect to a database (see the database configuration section).</description>
    </item>
    
    <item>
      <title>JNDI Bindings for Camunda Platform Services</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/runtime-container-integration/jndi-bindings-for-bpmn-platform-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/runtime-container-integration/jndi-bindings-for-bpmn-platform-services/</guid>
      <description>The Camunda Platform Services (i.e., Process Engine Service and Process Application Service) are provided via JNDI Bindings with the following JNDI names:
 Process Engine Service: java:global/camunda-bpm-platform/process-engine/ProcessEngineService!org.camunda.bpm.ProcessEngineService Process Application Service: java:global/camunda-bpm-platform/process-engine/ProcessApplicationService!org.camunda.bpm.ProcessApplicationService  On JBoss EAP and WildFly, you are able to get any of these Camunda Platform Services through a JNDI lookup. However, on Apache Tomcat you have to do quite a bit more to be able to do a lookup to get one of these Camunda Platform Services.</description>
    </item>
    
    <item>
      <title>JTA Transaction Integration</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/cdi-java-ee-integration/jta-transaction-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/cdi-java-ee-integration/jta-transaction-integration/</guid>
      <description>Embedded Process Engine The process engine transaction management can integrate with JTA. To use JTA transaction manager integration, you need to use the
 org.camunda.bpm.engine.impl.cfg.JtaProcessEngineConfiguration for JTA integration only org.camunda.bpm.engine.cdi.CdiJtaProcessEngineConfiguration for additional CDI expression resolving support.   The process engine requires access to an implementation of javax.transaction.TransactionManager. Not all application servers provide such an implementation. Most notably, IBM WebSphere and Oracle WebLogic historically did not provide this implementation. To achieve JTA transaction integration on these containers, users should use the Spring Framework Abstraction and configure the process engine using the SpringProcessEngineConfiguration.</description>
    </item>
    
    <item>
      <title>Manipulating XML</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/spin/xml/02-manipulating-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/spin/xml/02-manipulating-xml/</guid>
      <description>The XML data type supports manipulation of XML attributes and child elements.
Attributes Checking for Attributes in XML import static org.camunda.spin.Spin.XML; String xml = &amp;quot;&amp;lt;order xmlns:cam=\&amp;quot;http://camunda.org/example\&amp;quot; id=\&amp;quot;order1\&amp;quot; cam:name=\&amp;quot;name\&amp;quot; /&amp;gt;&amp;quot;; boolean hasAttr = XML(xml).hasAttr(&amp;quot;id&amp;quot;); assertTrue(hasAttr); hasAttr = XML(xml).hasAttrNs(&amp;quot;http://camunda.org/example&amp;quot;, &amp;quot;id&amp;quot;); assertTrue(hasAttr);  Reading Attributes from XML import static org.camunda.spin.Spin.XML; SpinXmlDomAttribute attribute = XML(&amp;quot;&amp;lt;order id=\&amp;quot;order1\&amp;quot; /&amp;gt;&amp;quot;).attr(&amp;quot;id&amp;quot;); String id = XML(&amp;quot;&amp;lt;order id=\&amp;quot;order1\&amp;quot; /&amp;gt;&amp;quot;).attr(&amp;quot;id&amp;quot;).value();  The attr method returns a wrapper of the XML attribute and with value the value of the attribute can be accessed.</description>
    </item>
    
    <item>
      <title>None Events</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/none-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/none-events/</guid>
      <description>None events are unspecified events, also called &amp;lsquo;blank&amp;rsquo; events. For instance, a &amp;lsquo;none&amp;rsquo; start event technically means that the trigger for starting the process instance is unspecified. This means that the engine cannot anticipate when the process instance must be started. The none start event is used when the process instance is started through the API by calling one of the startProcessInstanceBy... methods.
ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(&#39;invoice&#39;);  Note: a subprocess must always have a none start event.</description>
    </item>
    
    <item>
      <title>Patch Level Update</title>
      <link>http://camunda-cn.shaochenfeng.com/update/patch-level/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/patch-level/</guid>
      <description>This guide explains how to perform a patch level update. The patch level is the version number &amp;ldquo;after the second dot&amp;rdquo;. Example: update from 7.14.2 to 7.14.3.
Enterprise FeaturePlease note that Patch Level Updates are only provided to enterprise customers, they are not available in the community edition.
Check the Camunda enterprise homepagefor more information or get yourfree trial version.Reading this GuideIn this guide, a number of variables are used to denote common path names and constants:</description>
    </item>
    
    <item>
      <title>Plan Item Lifecycles</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/cmmn11/concepts/lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/cmmn11/concepts/lifecycle/</guid>
      <description>CMMN case instances and plan items go through a lifecycle of states during their execution. Depending on their state, different actions may be carried out to interact with them. Moreover, state transitions may automatically trigger changes in other plan items. The concrete lifecycle of a plan item depends on its plan item definition.
The following descriptions cover the CMMN lifecycles as supported by the Camunda engine. This is a subset of states and transitions that the CMMN standard defines.</description>
    </item>
    
    <item>
      <title>Process Definition View</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/bpmn/process-definition-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/bpmn/process-definition-view/</guid>
      <description>The process definition view provides you with information about the definition and the status of a process. On the left side you can easily survey the versions of the process and how many instances of the versions are running. Incidents of all running process instances are displayed together with an instance counter label in the corresponding rendered diagram. So it is easy to locate failed activities in the process.</description>
    </item>
    
    <item>
      <title>Process Engine Configuration</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/spring-boot-integration/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/spring-boot-integration/configuration/</guid>
      <description>The auto starter uses the org.camunda.bpm.engine.impl.cfg.ProcessEnginePlugin mechanism to configure the engine.
The configuration is divided into sections. These sections are represented by the marker interfaces:
 org.camunda.bpm.spring.boot.starter.configuration.CamundaProcessEngineConfiguration org.camunda.bpm.spring.boot.starter.configuration.CamundaDatasourceConfiguration org.camunda.bpm.spring.boot.starter.configuration.CamundaHistoryConfiguration org.camunda.bpm.spring.boot.starter.configuration.CamundaHistoryLevelAutoHandlingConfiguration org.camunda.bpm.spring.boot.starter.configuration.CamundaJobConfiguration org.camunda.bpm.spring.boot.starter.configuration.CamundaDeploymentConfiguration org.camunda.bpm.spring.boot.starter.configuration.CamundaJpaConfiguration org.camunda.bpm.spring.boot.starter.configuration.CamundaAuthorizationConfiguration org.camunda.bpm.spring.boot.starter.configuration.CamundaFailedJobConfiguration org.camunda.bpm.spring.boot.starter.configuration.CamundaMetricsConfiguration  Default Configurations The following default and best practice configurations are provided by the starter and can be customized or overridden.
DefaultProcessEngineConfiguration Sets the process engine name and automatically adds all ProcessEnginePlugin beans to the configuration.</description>
    </item>
    
    <item>
      <title>Process Task</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/cmmn11/tasks/process-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/cmmn11/tasks/process-task/</guid>
      <description>A process task can be used to invoke a BPMN 2.0 process from a case.
A process task is a regular task that requires an attribute processRef which references a process definition by its key. Such a process task can be defined as follows:
&amp;lt;processTask id=&amp;quot;checkCreditProcess&amp;quot; name=&amp;quot;Check credit&amp;quot; processRef=&amp;quot;checkCreditProcess&amp;quot; /&amp;gt;  The referenced process definition is resolved at runtime. This means that the process can be deployed independently from the calling case, if needed.</description>
    </item>
    
    <item>
      <title>Required Rule</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/cmmn11/markers/required-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/cmmn11/markers/required-rule/</guid>
      <description>Can be used with: Task, Stage and Milestone
A plan item may be required, meaning that it has to reach an end-like state before the containing stage can complete. Whether a plan item is required can be specified by a required rule.
This rule is evaluated when the milestone, stage or task is instantiated and transitions to the state AVAILABLE, and its result value of type boolean is maintained throughout the remainder of the case instance.</description>
    </item>
    
    <item>
      <title>Rolling Update</title>
      <link>http://camunda-cn.shaochenfeng.com/update/rolling-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/rolling-update/</guid>
      <description>Limits for Rolling UpdatesRolling updates are not possible prior to Version 7.5. Or in other words: the first update that can be done in the way described on this page is the update from version 7.5.x to 7.6.y.
Also note that it is only possible to update from one minor version to the next. For example, it is possible to update from 7.5.3 to 7.6.2 in a rolling fashion but it is not possible to update from 7.</description>
    </item>
    
    <item>
      <title>Run Camunda Platform using Docker</title>
      <link>http://camunda-cn.shaochenfeng.com/installation/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/installation/docker/</guid>
      <description>Community Edition The Community Edition docker images can be found on GitHub and Docker Hub.
Start Camunda Platform Run using Docker To start Camunda Platform Run execute the following commands:
docker pull camunda/camunda-bpm-platform:run-latest docker run -d --name camunda -p 8080:8080 camunda/camunda-bpm-platform:run-latest  Start Camunda Platform (Tomcat) using Docker To start the Camunda Platform execute the following commands:
docker pull camunda/camunda-bpm-platform:latest docker run -d --name camunda -p 8080:8080 camunda/camunda-bpm-platform:latest  Please note that by default the Apache Tomcat distribution is used.</description>
    </item>
    
    <item>
      <title>SOAP Connector</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/connect/soap-connector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/connect/soap-connector/</guid>
      <description>In Camunda Connect a Connectors class exists which automatically detects every connector in the classpath. It can be used to get the SOAP connector instance by its connector ID, which is soap-http-connector.
SoapHttpConnector soap = Connectors.getConnector(SoapHttpConnector.ID);  The SOAP connector extends the Camunda Connect HTTP connector which uses the Apache HTTP client in the default implementation. To read about default and custom client configuration, please see the corresponding section in the HTTP connector docs.</description>
    </item>
    
    <item>
      <title>Send Task 发送消息任务</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/tasks/send-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/tasks/send-task/</guid>
      <description>发送任务用于发送消息。在Camunda，这是通过调用Java代码来完成的。
发送任务具有与服务任务相同的行为。
&amp;lt;sendTask id=&amp;quot;sendTask&amp;quot; camunda:class=&amp;quot;org.camunda.bpm.MySendTaskDelegate&amp;quot; /&amp;gt;  Camunda Extensions  属性  camunda:asyncBefore, camunda:asyncAfter, camunda:class, camunda:delegateExpression, camunda:exclusive, camunda:expression, camunda:jobPriority, camunda:resultVariable, camunda:topic, camunda:type, camunda:taskPriority    扩展元素  camunda:failedJobRetryTimeCycle, camunda:field, camunda:connector, camunda:inputOutput    约束  One of the attributes camunda:class, camunda:delegateExpression, camunda:type or camunda:expression is mandatory      The attribute camunda:resultVariable can only be used in combination with the camunda:expression attribute      The camunda:exclusive attribute is only evaluated if the attribute camunda:asyncBefore or camunda:asyncAfter is set to true      The attribute camunda:topic can only be used when the camunda:type attribute is set to external.</description>
    </item>
    
    <item>
      <title>Spring Transaction Integration</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/spring-framework-integration/transactions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/spring-framework-integration/transactions/</guid>
      <description>Transaction Integration by Example The following explains the SpringTransactionIntegrationTest of the core codebase step by step. Below is the Spring configuration file that we use in this example (you can find it in SpringTransactionIntegrationTest-context.xml). The section shown below contains the dataSource, transactionManager, processEngine and the process engine services.
When passing the DataSource to the SpringProcessEngineConfiguration (using property &amp;ldquo;dataSource&amp;rdquo;), the Camunda engine uses a org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy internally, which wraps the passed DataSource.</description>
    </item>
    
    <item>
      <title>Tenant Management</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/admin/tenant-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/admin/tenant-management/</guid>
      <description>Tenants Menu The Tenants menu allows you to add, edit and delete tenants. Besides that you can view which user or group is a member of a tenant.
Create a new tenant All you have to do to create a new tenant is:
 Click the Create new tenant button Type the Tenant Id and Tenant Name in the corresponding input fields Click the Create new Tenant button   This creates a new tenant.</description>
    </item>
    
    <item>
      <title>Textareas</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/controls/textarea/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/controls/textarea/</guid>
      <description>Textareas are HTML &amp;lt;textarea&amp;gt; elements of the form
&amp;lt;textarea&amp;gt;&amp;lt;/textarea&amp;gt;  Binding a Textarea to a Process Variable A textarea input can be bound to a process variable using the cam-variable-type and cam-variable-name directives:
&amp;lt;textarea cam-variable-name=&amp;quot;CUSTOMER_ADDRESS&amp;quot; cam-variable-type=&amp;quot;String&amp;quot;&amp;gt; &amp;lt;/textarea&amp;gt;  In the example above, the textarea is bound to the variable named CUSTOMER_ADDRESS of type String.
Supported Variable Types for Textareas The textarea supports the same variable types as the single line text input &amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;&amp;lt;/input&amp;gt;.</description>
    </item>
    
    <item>
      <title>Usage with a Pre-Built Distribution</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/overview/distro-use/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/overview/distro-use/</guid>
      <description>The REST API is included in Camunda&amp;rsquo;s pre-built distributions. It can be accessed via the context /engine-rest and uses the engines provided by the class BpmPlatform.
The default process engine is available out of the box by accessing /engine-rest/engine/default/{rest-methods} or simply /engine-rest/{rest-methods}. Any other shared (i.e., it is globally visible) process engine that is created later is available through /engine-rest/engine/{name}/{rest-methods} without any further configuration.
Authentication is deactivated by default, but can be activated as described in the Authentication section.</description>
    </item>
    
    <item>
      <title>Validate Migration Plan</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/migration/validate-migration-plan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/migration/validate-migration-plan/</guid>
      <description>Validates a migration plan statically without executing it. This corresponds to the creation time validation described in the user guide.
Method POST /migration/validate
Parameters Request Body A JSON object with the following properties:
 Name Description   sourceProcessDefinitionId The id of the source process definition for the migration.   targetProcessDefinitionId The id of the target process definition for the migration.   instructions  A list of migration instructions which map equal activities.</description>
    </item>
    
    <item>
      <title>Verify User</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/identity/verify-user/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/identity/verify-user/</guid>
      <description>Verifies that user credentials are valid.
Method POST /identity/verify
Parameters Request Body A JSON object with the following properties:
 Name Type Description   username String The username of a user.   password String A password of a user.   Result A JSON object containing username and current authentication status. Its properties are as follows:
 Name Value Description   authenticatedUser String An id of authenticated user.</description>
    </item>
    
    <item>
      <title>Writing JSON</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/spin/json/02-writing-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/spin/json/02-writing-json/</guid>
      <description> The JSON datatype supports writing JSON to Strings or Writers.
Writing to a String: import static org.camunda.spin.Spin.JSON; SpinJsonNode jsonNode = JSON(&amp;quot;{\&amp;quot;customer\&amp;quot;: \&amp;quot;Kermit\&amp;quot;}&amp;quot;); String json = jsonNode.toString();  Writing to a Writer import static org.camunda.spin.Spin.JSON; SpinJsonNode jsonNode = JSON(&amp;quot;{\&amp;quot;customer\&amp;quot;: \&amp;quot;Kermit\&amp;quot;}&amp;quot;); StringWriter writer = jsonNode.writeToWriter(new StringWriter());  </description>
    </item>
    
    <item>
      <title>processes.xml</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/deployment-descriptors/descriptors/processes-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/deployment-descriptors/descriptors/processes-xml/</guid>
      <description>The processes.xml file is deployed as part of a process application and is used for configuration of the deployment of BPMN 2.0 resource files. Additionally, it can be used to configure process engines which are started / stopped with the deployment of the application.
See the processes.xml section of the User Guide for more details..
Xml Schema Namespace The namespace for the processes.xml file is http://www.camunda.org/schema/1.0/ProcessApplication. The XSD file can be found in the camunda-engine.</description>
    </item>
    
    <item>
      <title>processes.xml 部署配置文件</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-applications/the-processes-xml-deployment-descriptor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-applications/the-processes-xml-deployment-descriptor/</guid>
      <description>The processes.xml deployment descriptor contains the deployment metadata for a process application. The following example is a simple example of a processes.xml deployment descriptor:
&amp;lt;process-application xmlns=&amp;quot;http://www.camunda.org/schema/1.0/ProcessApplication&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt; &amp;lt;process-archive name=&amp;quot;loan-approval&amp;quot;&amp;gt; &amp;lt;process-engine&amp;gt;default&amp;lt;/process-engine&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;property name=&amp;quot;isDeleteUponUndeploy&amp;quot;&amp;gt;false&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;isScanForProcessDefinitions&amp;quot;&amp;gt;true&amp;lt;/property&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/process-archive&amp;gt; &amp;lt;/process-application&amp;gt;  A single deployment (process-archive) is declared. The process archive has the name loan-approval and is deployed to the process engine with the name default. Two additional properties are specified:
 isDeleteUponUndeploy: this property controls whether the undeployment of the process application should entail that the process engine deployment is deleted from the database.</description>
    </item>
    
    <item>
      <title>数据库配置</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/database/database-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/database/database-configuration/</guid>
      <description>There are two ways to configure the database that the Camunda engine will use. The first option is to define the JDBC properties of the database:
 jdbcUrl: JDBC URL of the database. jdbcDriver: implementation of the driver for the specific database type. jdbcUsername: username to connect to the database. jdbcPassword: password to connect to the database.  Note that the engine uses Apache MyBatis internally for persistence.
The data source that is constructed based on the provided JDBC properties will have the default MyBatis connection pool settings.</description>
    </item>
    
    <item>
      <title>流程引擎 API</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/process-engine-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/process-engine-api/</guid>
      <description>服务API Java API是与引擎互动的最常见方式。中心起点是ProcessEngine，它可以通过几种方式创建，如配置部分所述。从ProcessEngine中，你可以获得包含工作流/BPM方法的各种服务。ProcessEngine和服务对象是线程安全的。所以你可以为整个服务器保留对其中一个对象的引用。
ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine(); RepositoryService repositoryService = processEngine.getRepositoryService(); RuntimeService runtimeService = processEngine.getRuntimeService(); TaskService taskService = processEngine.getTaskService(); IdentityService identityService = processEngine.getIdentityService(); FormService formService = processEngine.getFormService(); HistoryService historyService = processEngine.getHistoryService(); ManagementService managementService = processEngine.getManagementService(); FilterService filterService = processEngine.getFilterService(); ExternalTaskService externalTaskService = processEngine.getExternalTaskService(); CaseService caseService = processEngine.getCaseService(); DecisionService decisionService = processEngine.getDecisionService();  ProcessEngines.getDefaultProcessEngine() 将在第一次调用时初始化并建立一个流程引擎，此后总是返回相同的流程引擎。所有流程引擎的正确创建和关闭可以通过ProcessEngines.init()和ProcessEngines.destroy()完成。
ProcessEngines类将扫描所有camunda.cfg.xml和activiti.cfg.xml文件。
对于所有camunda.cfg.xml文件，流程引擎将以典型的方式建立。
ProcessEngineConfiguration .createProcessEngineConfigurationFromInputStream(inputStream) .buildProcessEngine()  对于所有的activiti.cfg.xml文件，流程引擎将以Spring的方式构建：首先创建Spring应用上下文，然后从该应用上下文中获得流程引擎。
所有的服务都是无状态的。这意味着你可以很容易地在一个集群的多个节点上运行Camunda平台，每个节点都去同一个数据库，而不必担心哪个机器实际执行了以前的调用。对任何服务的任何调用都是无状态的，无论它在哪里执行。
当使用Camunda引擎时，仓库服务（RepositoryService）可能是第一个需要的服务。这个服务提供了管理和操纵部署和流程定义的操作。流程定义是BPMN 2.0流程的Java对应物，这里就不多说了。它是一个流程的每个步骤的结构和行为的表示。部署是引擎中的包装单元。一个部署可以包含多个BPMN 2.0 XML文件和任何其他资源。一个部署中包含的内容的选择由开发者决定。它的范围可以从一个单一的流程BPMN 2.0 XML文件到整个流程和相关资源包（例如，部署 &amp;ldquo;hr-processes &amp;ldquo;可以包含与hr流程相关的一切内容）。RepositoryService允许部署这种包。进行一次部署意味着部署内容被上传到引擎，在那里所有的流程都被检查和解析，然后被存储在数据库中。从那时起，系统就知道该部署了，并且任何包含在部署中的流程现在都可以被启动。</description>
    </item>
    
    <item>
      <title>遵循的标准</title>
      <link>http://camunda-cn.shaochenfeng.com/introduction/implemented-standards/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/introduction/implemented-standards/</guid>
      <description>Camunda在业务流程方面实现了三种不同的标准：BPMN 2.0、CMMN 1.1和DMN 1.3。 这三个标准是由Object Management Group在Camunda的积极合作下定义的。
Camunda平台提供执行和建模工具的开源实现。
BPMN Business Process Model and Notation (BPMN) 是一个工作流和流程自动化标准。
Camunda 支持 BPMN 的 2.0 版本
 快速入门实现BPMN流程: Quick Start (Java / JS) 快速了解BPMN建模语言: BPMN Modeling Tutorial BPMN建模相关信息: BPMN Modeling Reference BPMN建模工具: BPMN Modeler 实现BPMN 流程: BPMN Implementation Reference 执行BPMN: Process Engine  CMMN Case Management Model and Notation (CMMN) 是一个案例管理标准
Camunda 支持 CMMN 的 1.1 版本。
 快速入门实现CMMN案件: [CMMN Getting Started] 实现CMMN案例: CMMN Implementation Reference 执行CMMN: Process Engine  DMN Decision Model and Notation (DMN) 是一个业务决策标准。</description>
    </item>
    
    <item>
      <title>Run Camunda Platform using Spring Boot</title>
      <link>http://camunda-cn.shaochenfeng.com/installation/spring-boot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/installation/spring-boot/</guid>
      <description>To learn how to run Camunda Platform with Spring Boot, please consult the Spring Boot user guide.</description>
    </item>
    
    <item>
      <title>Building Forms in Camunda Modeler</title>
      <link>http://camunda-cn.shaochenfeng.com/modeler/forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/modeler/forms/</guid>
      <description>Support for Camunda FormsThe Camunda Forms feature was added with the 4.7.0 release of the Camunda Modeler. They can be used within BPMN diagrams running on Camunda Platform version 7.15.0 or later.
Please note that the initial release of Camunda Forms only includes a first minimal feature set, which will be expanded with upcoming versions.
Overview The Camunda Forms feature allows you to easily design and configure forms.</description>
    </item>
    
    <item>
      <title>Use Element Templates to Extend the Modeler</title>
      <link>http://camunda-cn.shaochenfeng.com/modeler/element-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/modeler/element-templates/</guid>
      <description>Using Element TemplatesElement Templates can be used with Camunda Modeler version 1.0 and higher. They are currently available in BPMN diagrams only.
Overview Element templates are a way to extend the Camunda Modeler with domain specific diagram elements such as service and user tasks.
If applicable, element templates can be assigned to a diagram element via the properties panel. Once applied, they configure the diagram element with pre-defined values for BPMN properties, input/output mappings as well as extension properties.</description>
    </item>
    
    <item>
      <title>Activiti Migration</title>
      <link>http://camunda-cn.shaochenfeng.com/update/activiti/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/activiti/</guid>
      <description>Migrating an existing application from Activiti &amp;lt;= 5.11 (or Camunda fox 6.x - see below) to Camunda Platform 7.0 is straightforward. This page describes the necessary steps. Once done with the migration, the minor version update guides show how to update from 7.0 to the latest Camunda version.
Getting HelpIf you are on a more recent Activiti version or if you have any trouble migrating, ask for assistance in the Forum or turn to our Consulting services.</description>
    </item>
    
    <item>
      <title>AngularJS Integration</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/integrate/angular-js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/integrate/angular-js/</guid>
      <description>Including the Angular Distribution Make sure you include the AngularJS build of the Forms SDK:
&amp;lt;script src=&amp;quot;angular.min.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;camunda-bpm-sdk-angular.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;  Loading the Forms Module Add the Forms SDK as module dependency to your application module:
angular.bootstrap(window.document, [&#39;cam.embedded.forms&#39;, ...]);  Angular Directives &amp;amp; Compilation If the form is loaded from a URL, the SDK makes sure that it is properly compiled and linked to the current Angular scope. This allows using Angular directives in forms loaded dynamically at runtime.</description>
    </item>
    
    <item>
      <title>Apache Tomcat Integration</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/runtime-container-integration/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/runtime-container-integration/tomcat/</guid>
      <description>JNDI Bindings To use the JNDI Bindings for Camunda Platform Services on Apache Tomcat you have to add the file META-INF/context.xml to your process application and add the following ResourceLinks:
&amp;lt;Context&amp;gt; &amp;lt;ResourceLink name=&amp;quot;ProcessEngineService&amp;quot; global=&amp;quot;global/camunda-bpm-platform/process-engine/ProcessEngineService!org.camunda.bpm.ProcessEngineService&amp;quot; type=&amp;quot;org.camunda.bpm.ProcessEngineService&amp;quot; /&amp;gt; &amp;lt;ResourceLink name=&amp;quot;ProcessApplicationService&amp;quot; global=&amp;quot;global/camunda-bpm-platform/process-engine/ProcessApplicationService!org.camunda.bpm.ProcessApplicationService&amp;quot; type=&amp;quot;org.camunda.bpm.ProcessApplicationService&amp;quot; /&amp;gt; &amp;lt;/Context&amp;gt;  These elements are used to create a link to the global JNDI Resources defined in $TOMCAT_HOME/conf/server.xml.
Furthermore, declare the dependency on the JNDI binding inside the WEB-INF/web.</description>
    </item>
    
    <item>
      <title>Authorization Management</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/admin/authorization-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/admin/authorization-management/</guid>
      <description>Manage authorizations for a variety of resources (e.g., Applications, Groups, Filters). In the following sections you will learn how to use an administrator account with the help of some simple use cases.
See Authorization Service for more information about Authorizations.
Accessing the Authorization Management menuThe Authorization Management menu is only usable by users which are granted with Read permission for authorizations.
Grant Basic Permissions In this use case we&amp;rsquo;ll grant some basic permissions.</description>
    </item>
    
    <item>
      <title>Auto Complete</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/cmmn11/markers/auto-complete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/cmmn11/markers/auto-complete/</guid>
      <description>Can be used with: Stage, CasePlanModel
The attribute autoComplete controls the completion of a stage instance. The following table describes the completion criteria of a stage instance based on the autoComplete property.
 autoComplete = true: There are no children in the ACTIVE state, and all required (see Required Rule) children are COMPLETED, DISABLED or TERMINATED. autoComplete = false: There are no children in the ACTIVE state, and  all children are COMPLETED, DISABLED or TERMINATED, or on manual completion using CaseService#completeCaseExecution, all required (see Required Rule) children are COMPLETED, DISABLED or TERMINATED.</description>
    </item>
    
    <item>
      <title>Automatic Resource Deployment</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/spring-framework-integration/deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/spring-framework-integration/deployment/</guid>
      <description>Spring integration also has a special feature for deploying resources. In the process engine configuration, you can specify a set of resources. When the process engine is created, all those resources will be scanned and deployed. There is filtering in place that prevents duplicate deployments. Only in case the resources have actually changed, new deployments will be deployed to the engine database. This makes sense in a lot of use cases, where the Spring container is rebooted often (e.</description>
    </item>
    
    <item>
      <title>Case Task</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/cmmn11/tasks/case-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/cmmn11/tasks/case-task/</guid>
      <description>A case task can be used to call another CMMN case.
A case task is a regular task that requires a caseRef attribute that references a case definition by its key. Such a case task can be defined as follows:
&amp;lt;caseTask id=&amp;quot;checkCreditCase&amp;quot; name=&amp;quot;Check credit&amp;quot; caseRef=&amp;quot;checkCreditCase&amp;quot; /&amp;gt;  The referenced case definition is resolved at runtime. This means that the referenced case can be deployed independently from the calling case, if needed.</description>
    </item>
    
    <item>
      <title>Configure the Full Distribution for IBM WebSphere</title>
      <link>http://camunda-cn.shaochenfeng.com/installation/full/was/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/installation/full/was/configuration/</guid>
      <description>This page explains how to configure the full distribution for an IBM WebSphere application server.
LDAP In order to set up LDAP for the IBM WebSphere distribution, you have to perform the following steps:
Add the LDAP Library Make sure the camunda-identity-ldap-$PLATFORM_VERSION.jar is present in the shared library &amp;lsquo;Camunda&amp;rsquo; folder.
Adjust the Process Engine Configuration Edit the file bpm-platform.xml located inside the Camunda Platform enterprise archive at camunda-ibm-websphere-ear-$VERSION.ear/camunda-ibm-websphere-service.jar/META-INF/ and add the LDAP Identity Provider Plugin and the Administrator Authorization Plugin.</description>
    </item>
    
    <item>
      <title>Configure the Full Distribution for JBoss/Wildfly</title>
      <link>http://camunda-cn.shaochenfeng.com/installation/full/jboss/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/installation/full/jboss/configuration/</guid>
      <description>This page explains how to configure the full distribution for the JBoss/Wildfly application server.
LDAP In order to setup LDAP for the JBoss/Wildfly Application Server distribution, you have to perform the following steps:
Adjust the Process Engine Configuration Edit the file standalone.xml (or domain.xml) provided by the JBoss/Wildfly Application Server and add the LDAP Identity Provider Plugin and the Administrator Authorization Plugin.
&amp;lt;subsystem xmlns=&amp;quot;urn:org.camunda.bpm.jboss:1.1&amp;quot;&amp;gt; &amp;lt;process-engines&amp;gt; &amp;lt;process-engine name=&amp;quot;default&amp;quot; default=&amp;quot;true&amp;quot;&amp;gt; ... &amp;lt;properties&amp;gt;.</description>
    </item>
    
    <item>
      <title>Configure the Full Distribution for Oracle WebLogic</title>
      <link>http://camunda-cn.shaochenfeng.com/installation/full/wls/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/installation/full/wls/configuration/</guid>
      <description>This page explains how to configure the full distribution for an Oracle WebLogic application server.
LDAP In order to set up LDAP for the Oracle WebLogic distribution, you have to perform the following steps:
Add the LDAP Library Make sure the camunda-identity-ldap-$PLATFORM_VERSION.jar is present in the $WLS_DOMAIN_HOME/lib folder.
Adjust the Process Engine Configuration Edit the file bpm-platform.xml located inside the Camunda Platform enterprise archive at camunda-oracle-weblogic-ear-$PLATFORM_VERSION.ear/camunda-oracle-weblogic-service.jar/META-INF/ and add the LDAP Identity Provider Plugin and the Administrator Authorization Plugin.</description>
    </item>
    
    <item>
      <title>Configure the Full Distribution for Tomcat</title>
      <link>http://camunda-cn.shaochenfeng.com/installation/full/tomcat/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/installation/full/tomcat/configuration/</guid>
      <description>This page explains how to configure the full distribution for Tomcat Application Server.
LDAP In order to setup LDAP for the Tomcat distribution, you have to perform the following steps:
Add the LDAP Library Make sure the camunda-identity-ldap-$PLATFORM_VERSION.jar is present in the $TOMCAT_DISTRIBUTION/lib/ folder.
Pre packaged distributionNote: If you use the pre-packaged distribution, the ldap plugin is already present and you can skip this step.
Adjust the Process Engine Configuration Edit the file bpm-platform.</description>
    </item>
    
    <item>
      <title>DMN Decision Table Rule</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/dmn/decision-table/rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/dmn/decision-table/rule/</guid>
      <description>A decision table can have one or more rules. Each rule contains input and output entries. The input entries are the condition and the output entries the conclusion of the rule. If each input entry (condition) is satisfied, then the rule is satisfied and the decision result contains the output entries (conclusion) of this rule.
A rule is represented by a rule element inside a decisionTable XML element.</description>
    </item>
    
    <item>
      <title>Date Inputs</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/controls/date-inputs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/controls/date-inputs/</guid>
      <description>Date input is supported using an &amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt; control.
Binding to a Process Variable To bind the input field to a Java Date variable, the directive cam-variable-type=&amp;quot;Date&amp;quot; must be used.
Example:
&amp;lt;input type=&amp;quot;text&amp;quot; cam-variable-name=&amp;quot;CONTRACT_START_DATE&amp;quot; cam-variable-type=&amp;quot;Date&amp;quot; /&amp;gt;  Date Format Currently only the ISO Date Format yyyy-MM-dd&#39;T&#39;HH:mm:ss is supported. Example value: 2013-01-23T13:42:42
Using a Date Picker The Form SDK itself does not provide any custom components or widgets. As such it also does not provide a date picker.</description>
    </item>
    
    <item>
      <title>Decision Service in the Process Engine</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/decisions/decision-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/decisions/decision-service/</guid>
      <description>The decision service is a part of the process engine&amp;rsquo;s Services API. It allows to evaluate a deployed decision definition independently from BPMN and CMMN.
Evaluating a Decision To evaluate a deployed decision, reference it by id or a combination of key and version. If a key is used but no version is specified then the latest version of decision definition with the given key is evaluated.
DecisionService decisionService = processEngine.</description>
    </item>
    
    <item>
      <title>Delete Task Worker Metrics</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/metrics/delete-metrics-task-worker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/metrics/delete-metrics-task-worker/</guid>
      <description>Deletes all task worker metrics prior to the given date or all if no date is provided.
Method DELETE /metrics/task-worker
Parameters Query Parameters  Name Description   date The date value as string prior to which all task worker metrics should be deleted.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.   403 application/json If the user who performs the operation is not a camunda-admin user.</description>
    </item>
    
    <item>
      <title>Embed the API</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/overview/embeddability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/overview/embeddability/</guid>
      <description>The REST API is an artifact of its own, which means that it can be embedded in any other JAX-RS application independently of the engine.
Prerequisites The REST API classes are tested with RESTEasy, Jersey and Wink as the JAX-RS implementation. Furthermore, the engine classes and Jackson&amp;rsquo;s com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider artifact (as well as transitive Jackson dependencies) have to be on the classpath.
Required Steps Step 1: Add the REST API to your project as a Maven dependency.</description>
    </item>
    
    <item>
      <title>Entry and Exit Criteria</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/cmmn11/concepts/entry-exit-criteria/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/cmmn11/concepts/entry-exit-criteria/</guid>
      <description>Transitions in a CMMN case can happen in two ways: Either by external interaction or by events occurring and conditions being fulfilled. The former refers to any explicit interaction with a case that is triggered from the outside. For example, a human worker completing a human task would be such an interaction. Completing a task means that the corresponding plan item is completed, depending on the actual case model, the case instance may complete.</description>
    </item>
    
    <item>
      <title>Event Subprocess</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/subprocesses/event-subprocess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/subprocesses/event-subprocess/</guid>
      <description>The event subprocess is a subprocess that is triggered by an event. An event subprocess can be added at the process level or at any subprocess level. The event used to trigger an event subprocess is configured using a start event. Therefore, none start events are not supported for event subprocesses. An event subprocess might be triggered using events like message events, error events, signal events, timer events, or compensation events.</description>
    </item>
    
    <item>
      <title>Execute Migration Plan</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/migration/execute-migration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/migration/execute-migration/</guid>
      <description>Executes a migration plan synchronously for multiple process instances. To execute a migration plan asynchronously, use the Execute Migration Plan Async (Batch) method.
For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of the user guide.
Method POST /migration/execute
Parameters Request Body A JSON object with the following properties:
 Name Description   migrationPlan  The migration plan to execute.</description>
    </item>
    
    <item>
      <title>Execute Modification</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/modification/post-modification-sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/modification/post-modification-sync/</guid>
      <description>Executes a modification synchronously for multiple process instances. To modify a single process instance, use the Modify Process Instance Execution State method. To execute a modification asynchronously, use the Execute Modification Async (Batch) method.
For more information about the difference between synchronous and asynchronous execution of a modification, please refer to the related section of the user guide.
Method POST /modification/execute
Parameters Request Body A JSON object with the following properties:</description>
    </item>
    
    <item>
      <title>Execute Modification Async (Batch)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/modification/post-modification-async/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/modification/post-modification-async/</guid>
      <description>Executes a modification asynchronously for multiple process instances. To execute a modification synchronously, use the Execute Modification method.
For more information about the difference between synchronous and asynchronous execution of a modification, please refer to the related section of the user guide.
Method POST /modification/executeAsync
Parameters Request Body A JSON object with the following properties:
 Name Description   processDefinitionId The id of the process definition for the modification   skipCustomListeners Skip execution listener invocation for activities that are started or ended as part of this request.</description>
    </item>
    
    <item>
      <title>Expression Resolving</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/cdi-java-ee-integration/expression-resolving/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/cdi-java-ee-integration/expression-resolving/</guid>
      <description>The camunda-engine-cdi library exposes CDI beans via Expression Language, using a custom resolver. This makes it possible to reference beans from the process:
&amp;lt;userTask id=&amp;quot;authorizeBusinessTrip&amp;quot; name=&amp;quot;Authorize Business Trip&amp;quot; camunda:assignee=&amp;quot;#{authorizingManager.account.username}&amp;quot; /&amp;gt;  Where &amp;ldquo;authorizingManager&amp;rdquo; could be a bean provided by a producer method:
@Inject @ProcessVariable private Object businessTripRequesterUsername; @Produces @Named public Employee authorizingManager() { TypedQuery&amp;lt;Employee&amp;gt; query = entityManager.createQuery(&amp;quot;SELECT e FROM Employee e WHERE e.account.username=&#39;&amp;quot; + businessTripRequesterUsername + &amp;quot;&#39;&amp;quot;, Employee.class); Employee employee = query.</description>
    </item>
    
    <item>
      <title>Expressions in the DMN Engine</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/dmn-engine/expressions-and-scripts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/dmn-engine/expressions-and-scripts/</guid>
      <description>Decision tables and decision literal expressions allow specifying different types of expressions. This section describes which types of expressions exist. It lists which expression languages are supported and demonstrates how to change the used expression language for an expression.
Expressions in DMN As shown in the decision table and decision literal expression reference, four types of expressions are supported:
 Input Expression: sets the input value for an input column of the decision table Input Entry: used to determine if a rule of the decision table is applicable Output Entry: returns a value which is added to the output of a matched rule of the decision table Literal Expression: used to determine the value of a decision literal expression  You can read more on this in the DMN 1.</description>
    </item>
    
    <item>
      <title>Extending Connect</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/connect/extending-connect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/connect/extending-connect/</guid>
      <description>Configuring Connectors The connectors available to Connect may not always suit your needs. Sometimes, it is necessary to provide configuration.
To configure a connector detected by Spin, the SPI org.camunda.connect.spi.ConnectorConfigurator can be implemented. A configurator specifies which classes it can configure. Connect discovers a configurator by employing Java&amp;rsquo;s service loader mechanism and will then provide it with all connectors that match the specified class (or are a subclass thereof). The concrete configuration options depend on the actual connector.</description>
    </item>
    
    <item>
      <title>Extending Spin</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/spin/extending-spin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/spin/extending-spin/</guid>
      <description>Configuring Data Formats The data formats available to Spin may not always suit your needs. Sometimes, it is necessary to provide configuration. For example, when using Spin to map Java objects to JSON, a format for how dates are serialized has to specified. While the Spin data formats use reasonable default values, they can also be changed.
To configure a data format detected by Spin, the SPI org.camunda.spin.spi.DataFormatConfigurator can be implemented.</description>
    </item>
    
    <item>
      <title>FEEL Engine Spin Integration</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/dmn-engine/feel/spin-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/dmn-engine/feel/spin-integration/</guid>
      <description>This page documents how Camunda Spin can be used together with the Scala FEEL Engine. Furthermore, it is shown how Spin data types are mapped to FEEL data types, as well as some rules when the former data structures are transformed into the latter.
Where can the Spin integration be found The Spin integration for the FEEL Engine is implemented into the Spin Process Engine Plugin since it is expected that the Process Engine should be capable of using Spin, if another component of the Camunda Platform (here, the FEEL Engine) supports its usage.</description>
    </item>
    
    <item>
      <title>Filters</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/tasklist/filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/tasklist/filters/</guid>
      <description>In Tasklist, you can create and select filters. You can use these filters to create lists of tasks, sorted by specified criteria. To create a filter, select Create a Filter. You will then see a screen as depicted in the above image. You have several options to configure your filter:
 General - Specify the name and description of the filter as well as assigning a color. Assign a priority to determine the order in which the filters are displayed on the dashboard.</description>
    </item>
    
    <item>
      <title>Get Activity Instance</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/get-activity-instances/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/get-activity-instances/</guid>
      <description>Retrieves an Activity Instance (Tree) for a given process instance by id.
Method GET /process-instance/{id}/activity-instances
Parameters Path Parameters  Name Description   id The id of the process instance for which the activity instance should be retrieved.   Result A JSON object corresponding to the Activity Instance tree of the given process instance.
The properties of an activity instance are as follows:
 Name Value Description   id String The id of the activity instance.</description>
    </item>
    
    <item>
      <title>Get Authorization</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/authorization/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/authorization/get/</guid>
      <description>Retrieves an authorization by id.
Method GET /authorization/{id}
Parameters Path Parameters  Name Description   id The id of the authorization to be retrieved.   Result A JSON array with the following properties:
 Name Value Description   id String The id of the authorization.   type Integer The type of the authorization. (0=global, 1=grant, 2=revoke). See the User Guide for more information about authorization types.</description>
    </item>
    
    <item>
      <title>Get Batch</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/batch/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/batch/get/</guid>
      <description>Retrieves a batch by id, according to the Batch interface in the engine.
Method GET /batch/{id}
Parameters Path Parameters  Name Description   id The id of the batch to be retrieved.   Result A JSON object corresponding to the Batch interface in the engine. Its properties are as follows:
NameValueDescriptionidStringThe id of the batch.typeStringThe type of the batch.</description>
    </item>
    
    <item>
      <title>Get Case Definition</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-definition/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-definition/get/</guid>
      <description>Retrieves a case definition according to the CaseDefinition interface in the engine.
Method GET /case-definition/{id}
GET /case-definition/key/{key} (returns the latest version of the case definition which belongs to no tenant)
GET /case-definition/key/{key}/tenant-id/{tenant-id} (returns the latest version of the case definition for tenant)
Parameters Path Parameters  Name Description   id The id of the case definition to be retrieved.   key The key of the case definition (the latest version thereof) to be retrieved.</description>
    </item>
    
    <item>
      <title>Get Case Execution</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/get/</guid>
      <description>Retrieves a case execution by id, according to the CaseExecution interface in the engine.
Method GET /case-execution/{id}
Parameters Path Parameters  Name Description   id The id of the case execution to be retrieved.   Result A JSON object corresponding to the CaseExecution interface in the engine. Its properties are as follows:
 Name Value Description   id String The id of the case execution.   caseInstanceId String The id of the case instance this case execution belongs to.</description>
    </item>
    
    <item>
      <title>Get Case Instance</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/get/</guid>
      <description>Retrieves a case instance by id, according to the CaseInstance interface in the engine.
Method GET /case-instance/{id}
Parameters Path Parameters  Name Description   id The id of the case instance to be retrieved.   Result A JSON object corresponding to the CaseInstance interface in the engine. Its properties are as follows:
 Name Value Description   id String The id of the case instance.   caseDefinitionId String The id of the case definition this instance belongs to.</description>
    </item>
    
    <item>
      <title>Get Cleanable Case Instance Report Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-definition/get-cleanable-case-instance-report-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-definition/get-cleanable-case-instance-report-count/</guid>
      <description>Queries for the number of report results about a case definition and finished case instances relevant to history cleanup (see History cleanup). Takes the same parameters as the Get Cleanable Case Instance Report method.
Method GET /history/case-definition/cleanable-case-instance-report/count
Parameters Query Parameters  Name Description   caseDefinitionIdIn Filter by case definition ids. Must be a comma-separated list of case definition ids.   caseDefinitionKeyIn Filter by case definition keys. Must be a comma-separated list of case definition keys.</description>
    </item>
    
    <item>
      <title>Get Cleanable Process Instance Report Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-definition/get-cleanable-process-instance-report-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-definition/get-cleanable-process-instance-report-count/</guid>
      <description>Queries for the number of report results about a process definition and finished process instances relevant to history cleanup (see History cleanup). Takes the same parameters as the Get Cleanable Process Instance Report method.
Method GET /history/process-definition/cleanable-process-instance-report/count
Parameters Query Parameters  Name Description   processDefinitionIdIn Filter by process definition ids. Must be a comma-separated list of process definition ids.   processDefinitionKeyIn Filter by process definition keys. Must be a comma-separated list of process definition keys.</description>
    </item>
    
    <item>
      <title>Get Decision Definition</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/decision-definition/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/decision-definition/get/</guid>
      <description>Retrieves a decision definition by id, according to the DecisionDefinition interface in the engine.
Method GET /decision-definition/{id}
GET /decision-definition/key/{key} (returns the latest version of the decision definition which belongs to no tenant)
GET /decision-definition/key/{key}/tenant-id/{tenant-id} (returns the latest version of the decision definition for tenant)
Parameters Path Parameters  Name Description   id The id of the decision definition to be retrieved.   key The key of the decision definition (the latest version thereof) to be retrieved.</description>
    </item>
    
    <item>
      <title>Get Decision Requirements Definition</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/decision-requirements-definition/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/decision-requirements-definition/get/</guid>
      <description>Retrieves a decision requirements definition according to the DecisionRequirementsDefinition interface in the engine.
Method GET /decision-requirements-definition/{id}
GET /decision-requirements-definition/key/{key} (returns the latest version of the decision requirements definition which belongs to no tenant)
GET /decision-requirements-definition/key/{key}/tenant-id/{tenant-id} (returns the latest version of the decision requirements definition for tenant)
Parameters Path Parameters  Name Description   id The id of the decision requirements definition to be retrieved.   key The key of the decision requirements definition (the latest version thereof) to be retrieved.</description>
    </item>
    
    <item>
      <title>Get Deployment</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/deployment/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/deployment/get/</guid>
      <description>Retrieves a deployment by id, according to the Deployment interface of the engine.
Method GET /deployment/{id}
Parameters Path Parameters  Name Description   id The id of the deployment.   Result A JSON object corresponding to the Deployment interface of the engine. Its properties are as follows:
 Name Value Description   id String The id of the deployment.   name String The name of the deployment.</description>
    </item>
    
    <item>
      <title>Get Execution</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/execution/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/execution/get/</guid>
      <description>Retrieves an execution by id, according to the Execution interface in the engine.
Method GET /execution/{id}
Parameters Path Parameters  Name Description   id The id of the execution to be retrieved.   Result A JSON object corresponding to the Execution interface in the engine. Its properties are as follows:
 Name Value Description   id String The id of the execution.   processInstanceId String The id of the process instance that this execution instance belongs to.</description>
    </item>
    
    <item>
      <title>Get External Task Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/get-query-count/</guid>
      <description>Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the Get External Tasks method.
Method GET /external-task/count
Parameters Query Parameters  Name Description   externalTaskId Filter by an external task&#39;s id.   externalTaskIdIn Filter by the comma-separated list of external task ids.   topicName Filter by an external task topic.   workerId Filter by the id of the worker that the task was most recently locked by.</description>
    </item>
    
    <item>
      <title>Get External Task Log</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/external-task-log/get-external-task-log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/external-task-log/get-external-task-log/</guid>
      <description>Retrieves a historic external task log by id.
Method GET /history/external-task-log/{id}
Parameters Path Parameters  Name Description   id The id of the log entry.   Result A JSON object with the following properties:
 Name Value Description   id String The id of the log entry.   externalTaskId String The id of the external task.   timestamp String The time when the log entry has been written.</description>
    </item>
    
    <item>
      <title>Get Group</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/group/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/group/get/</guid>
      <description>Retrieves a group by id.
Method GET /group/{id}
Parameters Path Parameters  Name Description   id The id of the group to be retrieved.   Result A JSON object with the following properties:
 Name Value Description   id String The id of the group.   name String The name of the group.   type String The type of the group.   Response Codes  Code Media type Description   200 application/json Request successful.</description>
    </item>
    
    <item>
      <title>Get Historic Activity Instance</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/activity-instance/get-activity-instance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/activity-instance/get-activity-instance/</guid>
      <description>Retrieves a historic activity instance by id, according to the HistoricActivityInstance interface in the engine.
Method GET /history/activity-instance/{id}
Parameters Path Parameters  Name Description   id The id of the historic activity instance to be retrieved.   Result A JSON object corresponding to the HistoricActivityInstance interface in the engine. Its properties are as follows:
 Name Value Description   id String The id of the activity instance.</description>
    </item>
    
    <item>
      <title>Get Historic Batch</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/batch/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/batch/get/</guid>
      <description>Retrieves a historic batch by id, according to the HistoricBatch interface in the engine.
Method GET /history/batch/{id}
Parameters Path Parameters  Name Description   id The id of the historic batch to be retrieved.   Result A JSON object corresponding to the HistoricBatch interface in the engine. Its properties are as follows:
 Name Value Description   id String The id of the batch.   type String The type of the batch.</description>
    </item>
    
    <item>
      <title>Get Historic Case Activity Instance</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-activity-instance/get-case-activity-instance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-activity-instance/get-case-activity-instance/</guid>
      <description>Retrieves a historic case activity instance by id, according to the HistoricCaseActivityInstance interface in the engine.
Method GET /history/case-activity-instance/{id}
Parameters Path Parameters  Name Description   id The id of the historic case activity instance to be retrieved.   Result A JSON object corresponding to the HistoricCaseActivityInstance interface in the engine. Its properties are as follows:
 Name Value Description   id String The id of the case activity instance.</description>
    </item>
    
    <item>
      <title>Get Historic Case Instance</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-instance/get-case-instance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-instance/get-case-instance/</guid>
      <description>Retrieves a historic case instance by id, according to the HistoricCaseInstance interface in the engine.
Method GET /history/case-instance/{id}
Parameters Path Parameters  Name Description   id The id of the historic case instance to be retrieved.   Result A JSON object corresponding to the HistoricCaseInstance interface in the engine. Its properties are as follows:
 Name Value Description   id String The id of the case instance.</description>
    </item>
    
    <item>
      <title>Get Historic Decision Instance</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/decision-instance/get-decision-instance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/decision-instance/get-decision-instance/</guid>
      <description>Retrieves a historic decision instance by id, according to the HistoricDecisionInstance interface in the engine.
Method GET /history/decision-instance/{id}
Parameters Path Parameters  Name Description   id The id of the historic decision instance to be retrieved.   Query Parameters  Name Description   includeInputs  Include input values in the result. Value may only be true, as false is the default behavior.    includeOutputs  Include output values in the result.</description>
    </item>
    
    <item>
      <title>Get Historic Detail</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/detail/get-detail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/detail/get-detail/</guid>
      <description>Retrieves a historic detail by id.
Method GET /history/detail/{id}
Parameters Path Parameters  Name Description   id The id of the detail.   Query Parameters  Name Description   deserializeValue  Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).If set to true, a serializable variable will be deserialized on server side and transformed to JSON using Jackson&#39;s POJO/bean property introspection feature.</description>
    </item>
    
    <item>
      <title>Get Job</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job/get/</guid>
      <description>Retrieves a job by id, according to the Job interface in the engine.
Method GET /job/{id}
Parameters Path Parameters  Name Description   id The id of the job to be retrieved.   Result A JSON object corresponding to the Job interface in the engine. Its properties are as follows:
 Name Value Description   id String The id of the job.   jobDefinitionId String The id of the associated job definition.</description>
    </item>
    
    <item>
      <title>Get Job Definition</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job-definition/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job-definition/get/</guid>
      <description>Retrieves a job definition by id, according to the JobDefinition interface in the engine.
Method GET /job-definition/{id}
Parameters Path Parameters  Name Description   id The id of the job definition to be retrieved.   Result A JSON object corresponding to the JobDefinition interface in the engine. Its properties are as follows:
 Name Value Description   id String The id of the job definition.   processDefinitionId String The id of the process definition this job definition is associated with.</description>
    </item>
    
    <item>
      <title>Get Job Log</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/job-log/get-job-log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/job-log/get-job-log/</guid>
      <description>Retrieves a historic job log by id.
Method GET /history/job-log/{id}
Parameters Path Parameters  Name Description   id The id of the log entry.   Result A JSON object with the following properties:
 Name Value Description   id String The id of the log entry.   timestamp String The time when the log entry has been written.   removalTime String The time after which the log entry should be removed by the History Cleanup job.</description>
    </item>
    
    <item>
      <title>Get Password Policy</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/identity/get-password-policy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/identity/get-password-policy/</guid>
      <description>A password policy consists of a list of rules that new passwords must follow to be policy compliant. This end point returns a JSON representation of the list of policy rules.
More information on password policies in Camunda can be found in the password policy user guide and in the security instructions.
Method GET /identity/password-policy
Result A JSON object corresponding to the PasswordPolicy interface in the engine. Its properties are as follows:</description>
    </item>
    
    <item>
      <title>Get Process Instance</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-instance/get-process-instance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-instance/get-process-instance/</guid>
      <description>Retrieves a historic process instance by id, according to the HistoricProcessInstance interface in the engine.
Method GET /history/process-instance/{id}
Parameters Path Parameters  Name Description   id The id of the historic process instance to be retrieved.   Result A JSON object corresponding to the HistoricProcessInstance interface in the engine. Its properties are as follows:  Name Value Description   id String The id of the process instance.</description>
    </item>
    
    <item>
      <title>Get Single Filter</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/filter/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/filter/get/</guid>
      <description>Retrieves a single filter by id, according to the Filter interface in the engine.
Method GET /filter/{id}
Parameters Path Parameters  Name Description   id The id of the filter to be retrieved.   Query Parameters  Name Description   itemCount  If set to true, each filter result will contain an itemCount property with the number of items matched by the filter itself.    Result A JSON object corresponding to the Filter interface in the engine.</description>
    </item>
    
    <item>
      <title>Get Start Form Variables</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get-form-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get-form-variables/</guid>
      <description>Retrieves the start form variables for a process definition (only if they are defined via the Generated Task Form approach). The start form variables take form data specified on the start event into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
Method GET /process-definition/{id}/form-variables
GET /process-definition/key/{key}/form-variables (returns the form variables for the latest process definition which belongs to no tenant).</description>
    </item>
    
    <item>
      <title>Get Task Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/get-query-count/</guid>
      <description>Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size of the result set when using the Get Tasks method.
Security ConsiderationThere are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on security considerations for custom code in the user guide for details.
Method GET /task/count
Parameters Query Parameters  Name Description   taskId Restrict to task with the given id.</description>
    </item>
    
    <item>
      <title>Get Tasks (Historic) (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/task/post-task-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/task/post-task-query/</guid>
      <description>Queries for historic tasks that fulfill the given parameters. This method is slightly more powerful than the Get Tasks (Historic) method because it allows filtering by multiple process or task variables of types String, Number or Boolean. The size of the result set can be retrieved by using the Get Task Count (POST) method.
Method POST /history/task
Parameters Query Parameters  Name Description   firstResult Pagination of results. Specifies the index of the first result to return.</description>
    </item>
    
    <item>
      <title>Get Tasks (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-query/</guid>
      <description>Queries for tasks that fulfill a given filter. This method is slightly more powerful than the Get Tasks method because it allows filtering by multiple process or task variables of types String, Number or Boolean. The size of the result set can be retrieved by using the Get Task Count (POST) method.
Security ConsiderationThere are several parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution.</description>
    </item>
    
    <item>
      <title>Get Tenant</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/get/</guid>
      <description>Retrieves a tenant.
Method GET /tenant/{id}
Parameters Path Parameters  Name Description   id The id of the tenant to be retrieved.   Result A JSON object with the following properties:
 Name Value Description   id String The id of the tenant.   name String The name of the tenant.   Response Codes  Code Media type Description   200 application/json Request successful.</description>
    </item>
    
    <item>
      <title>Get Users</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/user/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/user/get-query/</guid>
      <description>Query for a list of users using a list of parameters. The size of the result set can be retrieved by using the Get User Count method.
Method GET /user
Parameters Query Parameters  Name Description   id Filter by the id of the user.   idIn Filter by a comma-separated list of user ids.   firstName Filter by the first name of the user.   firstNameLike Filter by the first name that the parameter is a substring of.</description>
    </item>
    
    <item>
      <title>Get Variable Instance</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/variable-instance/get-variable-instance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/variable-instance/get-variable-instance/</guid>
      <description>Retrieves a historic variable by id.
Method GET /history/variable-instance/{id}
Parameters Path Parameters  Name Description   id The id of the variable instance.   Query Parameters  Name Description   deserializeValue  Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).If set to true, a serializable variable will be deserialized on server side and transformed to JSON using Jackson&#39;s POJO/bean property introspection feature.</description>
    </item>
    
    <item>
      <title>Get Variable Instances</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/variable-instance/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/variable-instance/get-query/</guid>
      <description>Query for variable instances that fulfill given parameters. Parameters may be the properties of variable instances, such as the name or type. The size of the result set can be retrieved by using the Get Variable Instance Count method.
Method GET /variable-instance
Parameters Query Parameters  Name Description   variableName Filter by variable instance name.   variableNameLike Filter by the variable instance name. The parameter can include the wildcard % to express like-strategy such as: starts with (%name), ends with (name%) or contains (%name%).</description>
    </item>
    
    <item>
      <title>Group Membership Resource Options</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/group/members/options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/group/members/options/</guid>
      <description>The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
Method OPTIONS /group/{id}/members for available interactions on resource
Parameters Path Parameters  Name Description   id The id of the group.</description>
    </item>
    
    <item>
      <title>Job Executor Configuration</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/deployment-descriptors/tags/job-executor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/deployment-descriptors/tags/job-executor/</guid>
      <description>The job executor tag is used to configure the job executor and can be placed in the bpm-platform.xml file.
Example The following example shows a job executor XML snippet:
&amp;lt;job-executor&amp;gt; &amp;lt;job-acquisition name=&amp;quot;default&amp;quot;&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;property name=&amp;quot;maxJobsPerAcquisition&amp;quot;&amp;gt;5&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;waitTimeInMillis&amp;quot;&amp;gt;8000&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;lockTimeInMillis&amp;quot;&amp;gt;400000&amp;lt;/property&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/job-acquisition&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;!-- Note: the following properties only take effect in a Tomcat environment --&amp;gt; &amp;lt;property name=&amp;quot;queueSize&amp;quot;&amp;gt;3&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;corePoolSize&amp;quot;&amp;gt;5&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;maxPoolSize&amp;quot;&amp;gt;10&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;keepAliveTime&amp;quot;&amp;gt;0&amp;lt;/property&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/job-executor&amp;gt;  Syntax Reference  Tag name  Parent tag name Required?</description>
    </item>
    
    <item>
      <title>Lifecycle and Events</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/lifecycle/</guid>
      <description>Events   The form is parsed, and variable names are collected from the markup. This means that directives like cam-variable-name are evaluated and the resulting variables are declared in the variableManager. Events:  form-loaded is fired after the form has been parsed, and all form directives have been evaluated.     In the second phase, a request is made to the server to gather the values of the variables declared in the variable manager.</description>
    </item>
    
    <item>
      <title>Live Editing of DMN Decisions</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/dmn/live-editing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/dmn/live-editing/</guid>
      <description>Enterprise FeaturePlease note that this feature is only included in the enterprise edition of the Camunda Platform, it is not available in the community edition.
Check the Camunda enterprise homepagefor more information or get yourfree trial version.DMN tables can be changed directly in Cockpit. Clicking on the  Editbutton will open a dialog which contains an editable version of the DMN table. This button is only available for DMN resources.</description>
    </item>
    
    <item>
      <title>Message Events</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/message-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/message-events/</guid>
      <description>Message events are events which reference a named message. A message has a name and a payload. Unlike a signal, a message event is always directed at a single recipient.
Defining a Message A message event definition is declared by using the messageEventDefinition element. The attribute messageRef references a message element declared as a child element of the definitions root element. The following is an excerpt of a process in which two message events are declared and referenced by a start event and an intermediate catching message event.</description>
    </item>
    
    <item>
      <title>Microsoft Sql Server 数据库配置</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/database/mssql-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/database/mssql-configuration/</guid>
      <description>Microsoft SQL Server implements the isolation level READ_COMMITTED different than most databases and does not interact well with the process engine&amp;rsquo;s optimistic locking scheme. As a result you may suffer deadlocks when putting the process engine under high load.
If you experience deadlocks in your MSSQL installation, you must execute the following statements in order to enable SNAPSHOT isolation:
ALTER DATABASE [process-engine] SET ALLOW_SNAPSHOT_ISOLATION ON ALTER DATABASE [process-engine] SET READ_COMMITTED_SNAPSHOT ON  where [process-engine] contains the name of your database.</description>
    </item>
    
    <item>
      <title>Parallel Gateway</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/gateways/parallel-gateway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/gateways/parallel-gateway/</guid>
      <description>Gateways can also be used to model concurrency in a process. The most straightforward gateway to introduce concurrency in a process model is the Parallel Gateway, which allows forking into multiple paths of execution or joining multiple incoming paths of execution.
 The functionality of the parallel gateway is based on the incoming and outgoing sequence flow(s):
 fork: all outgoing sequence flows are followed in parallel, creating one concurrent execution for each sequence flow.</description>
    </item>
    
    <item>
      <title>Participating in the Form Lifecycle</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/javascript/lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/javascript/lifecycle/</guid>
      <description>It is possible to participate in the lifecycle of the form. See Form Lifecycle and Events for more details.
Fetching Additional Variables When loading the form, the values of all variables used in the form are fetched from the backend. This means that the form SDK only fetches those variables which are actually used in the form. The most convenient way to use a variable is the cam-variable-name directive. However, there are some situations where directive-based usage is inconvenient.</description>
    </item>
    
    <item>
      <title>Process Application 事件监听</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-applications/process-application-event-listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-applications/process-application-event-listeners/</guid>
      <description>The process engine supports defining two types of event listeners: Task Event Listeners and Execution Event Listeners. Task Event listeners allow to react to Task Events (Tasks are Created, Assigned, Completed). Execution Listeners allow to react to events fired as execution progresses through the diagram: Activities are Started, Ended and Transitions are being taken.
When using the process application API, the process engine makes sure that Events are delegated to the right process application.</description>
    </item>
    
    <item>
      <title>Process Instance View</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/bpmn/process-instance-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/bpmn/process-instance-view/</guid>
      <description>Open the process instance view by selecting a process instance from the process definition view instance list. This view allows you to drill down into a single process instance and explore its running activities as well as the variables, tasks, jobs, etc. Beside the diagram view the process will be displayed as an activity instance tree view. Variables that belong to the instance will be listed in a variables table of the detailed information panel.</description>
    </item>
    
    <item>
      <title>Querying JSON</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/spin/json/03-querying-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/spin/json/03-querying-json/</guid>
      <description>The JSON datatype supports querying with the JSONPath query language.
Querying an Element import static org.camunda.spin.Spin.JSON; String json = &amp;quot;{\&amp;quot;child\&amp;quot;: [{\&amp;quot;id\&amp;quot;: 1,\&amp;quot;name\&amp;quot;: \&amp;quot;Lucy\&amp;quot;,\&amp;quot;sex\&amp;quot;: \&amp;quot;female\&amp;quot;},{\&amp;quot;id\&amp;quot;: 2,\&amp;quot;name\&amp;quot;: \&amp;quot;Tracy\&amp;quot;,\&amp;quot;sex\&amp;quot;: \&amp;quot;female\&amp;quot;}],\&amp;quot;number\&amp;quot;: 1,\&amp;quot;boolean\&amp;quot;: true}&amp;quot;; SpinJsonNode child = JSON(json).jsonPath(&amp;quot;$.child[0]&amp;quot;).element();  Querying an Element List import static org.camunda.spin.Spin.JSON; String json = &amp;quot;{\&amp;quot;child\&amp;quot;: [{\&amp;quot;id\&amp;quot;: 1,\&amp;quot;name\&amp;quot;: \&amp;quot;Lucy\&amp;quot;,\&amp;quot;sex\&amp;quot;: \&amp;quot;female\&amp;quot;},{\&amp;quot;id\&amp;quot;: 2,\&amp;quot;name\&amp;quot;: \&amp;quot;Tracy\&amp;quot;,\&amp;quot;sex\&amp;quot;: \&amp;quot;female\&amp;quot;}],\&amp;quot;number\&amp;quot;: 1,\&amp;quot;boolean\&amp;quot;: true}&amp;quot;; SpinList&amp;lt;SpinJsonNode&amp;gt; childs = JSON(json).jsonPath(&amp;quot;$.child&amp;quot;).elementList();  Querying a String import static org.camunda.spin.Spin.JSON; String json = &amp;quot;{\&amp;quot;child\&amp;quot;: [{\&amp;quot;id\&amp;quot;: 1,\&amp;quot;name\&amp;quot;: \&amp;quot;Lucy\&amp;quot;,\&amp;quot;sex\&amp;quot;: \&amp;quot;female\&amp;quot;},{\&amp;quot;id\&amp;quot;: 2,\&amp;quot;name\&amp;quot;: \&amp;quot;Tracy\&amp;quot;,\&amp;quot;sex\&amp;quot;: \&amp;quot;female\&amp;quot;}],\&amp;quot;number\&amp;quot;: 1,\&amp;quot;boolean\&amp;quot;: true}&amp;quot;; String value = JSON(json).</description>
    </item>
    
    <item>
      <title>REST API</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/spring-boot-integration/rest-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/spring-boot-integration/rest-api/</guid>
      <description>To enable the REST API you can use the following starter in your pom.xml:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.camunda.bpm.springboot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camunda-bpm-spring-boot-starter-rest&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{project-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  By default the application path is engine-rest, so without any further configuration you can access the api at http://localhost:8080/engine-rest.
Because we use jersey, one can use spring boot&amp;rsquo;s common application properties. For example, to change the application path, use
spring.jersey.application-path=myapplicationpath  To modify the configuration or register additional resources, one can provide a bean which extends from org.</description>
    </item>
    
    <item>
      <title>Set Annotation to an User Operation Log (Historic)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/user-operation-log/set-annotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/user-operation-log/set-annotation/</guid>
      <description>Set an annotation for auditing reasons.
Method PUT /history/user-operation/{operationId}/set-annotation
Parameters Path Parameters  Name Description   operationId The operation id of the operation log to be updated.   Request Body A JSON object with the following properties:
 Name Description   annotation An arbitrary text annotation set by a user for auditing reasons.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.</description>
    </item>
    
    <item>
      <title>Tenant Group Membership Resource Options</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/group-members/options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/group-members/options/</guid>
      <description>The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
Method OPTIONS /tenant/{id}/group-members for available interactions on resource
Parameters Path Parameters  Name Description   id The id of the tenant   Result A JSON object with a single property named links, providing a list of resource links.</description>
    </item>
    
    <item>
      <title>Tenant User Membership Resource Options</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/user-members/options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/user-members/options/</guid>
      <description>The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.
Method OPTIONS /tenant/{id}/user-members for available interactions on resource
Parameters Path Parameters  Name Description   id The id of the tenant   Result A JSON object with a single property named links, providing a list of resource links.</description>
    </item>
    
    <item>
      <title>User Task 人工任务</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/tasks/user-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/tasks/user-task/</guid>
      <description>用户任务用于模拟人类演员需要完成的工作。当流程执行到达这样的用户任务时，在分配给该任务的用户或组的任务列表中创建一个新任务。
用户任务在XML中定义如下。 id属性是必需的，而name属性是可选的。
&amp;lt;userTask id=&amp;quot;theTask&amp;quot; name=&amp;quot;Important task&amp;quot; /&amp;gt;  描述 用户任务还可以具有描述。事实上，任何BPMN 2.0元素可以有描述。通过添加 documentation 元素来定义描述。
&amp;lt;userTask id=&amp;quot;theTask&amp;quot; name=&amp;quot;Schedule meeting&amp;quot; &amp;gt; &amp;lt;documentation&amp;gt; Schedule an engineering meeting for next week with the new hire. &amp;lt;/documentation&amp;gt;  可以从标准Ja​​va方式中的任务中检索 documentation 文本：
task.getDescription();  特性 截止日期 每个任务都有一个字段，指示该任务的截止日期。查询API可用于查询到某个日期之前或之后截止的任务。
有一个活动扩展名，允许您在任务定义中指定表达式，以在创建时设置任务的初始截止日期。表达式应该始终解析为 java.util.Date, java.util.String (ISO8601 格式化) 或 null。 使用ISO8601格式化字符串时，您可以指定相对于创建任务的时间的时间或时间段。例如，您可以使用在此过程中以先前表单输入的日期，或者在以前的服务任务中计算。
&amp;lt;userTask id=&amp;quot;theTask&amp;quot; name=&amp;quot;Important task&amp;quot; camunda:dueDate=&amp;quot;${dateVariable}&amp;quot;/&amp;gt;  任务的截止日期也可以使用任务服务或任务侦听器中使用传递的委托任务更改。
跟进日期 每个任务都有一个字段，指示该任务的跟进日期。查询API可用于查询需要在特定日期之前或之后进行操作的任务。
有一个活动扩展名，允许您在任务定义中指定表达式，以在创建时设置任务的初始后续后续日期。表达式应该始终解析为 java.util.Date, java.util.String (ISO8601 格式化) 或 null。 使用ISO8601格式化字符串时，您可以指定相对于创建任务的时间的时间或时间段。例如，您可以使用在此过程中以先前表单输入的日期，或者在以前的服务任务中计算。
&amp;lt;userTask id=&amp;quot;theTask&amp;quot; name=&amp;quot;Important task&amp;quot; camunda:followUpDate=&amp;quot;${dateVariable}&amp;quot;/&amp;gt;  用户分配 用户任务可以直接分配给单个用户，用户列表或组列表。</description>
    </item>
    
    <item>
      <title>Writing XML</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/spin/xml/03-writing-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/spin/xml/03-writing-xml/</guid>
      <description>The XML datatype supports writing XML to Strings, output streams or writers.
Writing to a String: import static org.camunda.spin.Spin.XML; import org.camunda.spin.xml.SpinXmlElement; // Create XML element SpinXmlElement element = XML(&amp;quot;&amp;lt;root id=\&amp;quot;test\&amp;quot;/&amp;gt;&amp;quot;); String xml = element.toString(); String value = element.attr(&amp;quot;id&amp;quot;).value();  Writing to an Output Stream: import static org.camunda.spin.Spin.XML; import org.camunda.spin.xml.SpinXmlElement; import org.camunda.spin.xml.SpinXmlAttribute; // Create XML element SpinXmlElement element = XML(&amp;quot;&amp;lt;root id=\&amp;quot;test\&amp;quot;/&amp;gt;&amp;quot;); try { // Define Output Stream OutputStream outputStream = System.</description>
    </item>
    
    <item>
      <title>XML</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/data-formats/xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/data-formats/xml/</guid>
      <description>For working with XML, the Spin functions org.camunda.spin.Spin.S and org.camunda.spin.Spin.XML can be used as entry points. The latter offers strongly-typed access to Spin&amp;rsquo;s XML API and is preferable when writing Java code. In scripting environments, only the S function is available. The returned Spin wrapper offers methods for manipulating and writing XML as well as mapping XML to Java. Furthermore, the entry functions can be provided with Java objects that get implicitly converted to Spin&amp;rsquo;s intermediary XML format.</description>
    </item>
    
    <item>
      <title>流程引擎概念</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/process-engine-concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/process-engine-concepts/</guid>
      <description>本节介绍了一些核心过程引擎概念，用于流程引擎API和内部流程引擎实现。了解这些基础知识可以更容易的额使用流程引擎API。
流程定义 流程定义定义了一个流程的结构。你可以说，流程定义就是流程。Camunda平台使用 BPMN 2.0 作为其主要的流程建模语言，用于建模过程的定义。
BPMN 2.0 参考Camunda平台配有两个BPMN 2.0参考资料：
 BPMN 2.0 建模参考 介绍了BPMN 2.0的基本原理，帮助你开始对流程进行建模。(请确保同时阅读教程。) BPMN 2.0 实现参考 涵盖了Camunda平台中各个BPMN 2.0构造的实现。如果你想实现和执行BPMN流程，你应该阅读这个参考资料。  在Camunda平台中，您可以将流程以BPMN 2.0 XML格式部署到流程引擎中。XML文件被解析并转化为一个流程定义图结构。该图结构由流程引擎执行。
流程定义的查询 你可以使用Java API和通过RepositoryService提供的ProcessDefinitionQuery来查询所有部署的流程定义。例如：
List&amp;lt;ProcessDefinition&amp;gt; processDefinitions = repositoryService.createProcessDefinitionQuery() .processDefinitionKey(&amp;quot;invoice&amp;quot;) .orderByProcessDefinitionVersion() .asc() .list();  上面的查询返回所有已部署的流程定义，关键是invoice，按其version属性排序。
你也可以使用REST API查询流程定义.
Key和版本 流程定义的key（上面例子中的 &amp;ldquo;invoice&amp;rdquo;）是流程的逻辑标识符。它在整个API中被使用，最典型的是用于启动流程实例，（见流程实例部分）。流程定义的关键是使用BPMN2.0 XML文件中相应的&amp;lt;process ... &amp;gt;元素的id属性来定义的。
&amp;lt;process id=&amp;quot;invoice&amp;quot; name=&amp;quot;invoice receipt&amp;quot; isExecutable=&amp;quot;true&amp;quot;&amp;gt; ... &amp;lt;/process&amp;gt;  如果你用同一个key部署了多个流程，流程引擎会将它们视为同一流程定义的不同版本。请参考流程版本管理了解详情。
禁用流程定义 禁用一个流程定义会使其暂时禁止实例化。RuntimeService Java API可以暂停一个流程定义。同样地，你可以激活一个流程定义来撤销这个效果。
流程实例 流程实例是一个流程定义的单独执行。流程实例与流程定义的关系与面向对象编程中对象和类的关系类似（流程实例扮演对象的角色，流程定义扮演类的角色）。
流程引擎负责创建流程实例并管理其状态。如果你启动一个包含等待状态的流程实例，例如一个用户任务，流程引擎必须确保流程实例的状态被捕获并存储在数据库内，直到离开等待状态（用户任务被完成）。
启动流程实例 启动一个流程实例的最简单方法是使用RuntimeService提供的startProcessInstanceByKey(..)方法。
ProcessInstance instance = runtimeService.</description>
    </item>
    
    <item>
      <title>软件架构总览</title>
      <link>http://camunda-cn.shaochenfeng.com/introduction/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/introduction/architecture/</guid>
      <description>Camunda平台是一个基于Java的框架。主要组件是用Java编写的，我们总体上专注于为Java开发者提供他们在JVM上设计、实施和运行业务流程和工作流所需的工具。然而，我们也想让非Java开发者也能使用流程引擎技术。这就是为什么Camunda平台还提供了REST API，允许你与远程流程引擎应用建立连接。
Camunda平台既可以作为一个独立的流程引擎服务器使用，也可以嵌入到定制的Java应用程序中。可嵌入性要求是Camunda平台许多架构决定的核心。例如，我们努力使流程引擎组件成为一个轻量级的组件，尽量减少对第三方库的依赖性。此外，可嵌入性促使流程引擎支持使用Spring Managed或JTA事务和线程模型的能力。
流程引擎架构  流程引擎公共API： 面向服务的API允许Java应用程序与流程引擎交互。流程引擎的不同部分（即流程存储库、运行时的流程交互、任务管理等）被分离到各个服务中。公共API具有命令式访问模式的特点：进入流程引擎的流程要经过一个命令拦截器，该拦截器用于设置流程上下文。 BPMN 2.0 核心引擎: 这是流程引擎的核心。它有一个轻量级的图结构执行引擎（PVM - Process Virtual Machine），一个将BPMN 2.0 XML文件转化为Java对象的BPMN 2.0解析器，以及一套BPMN行为实现（为BPMN 2.0结构提供实现，如网关或服务任务）。 Job 执行器: Job执行者负责处理异步的后台工作，如流程中的定时器或异步连续。 持久层: 流程引擎有一个持久层，负责将流程实例状态持久化到关系数据库中。我们使用MyBatis映射引擎来实现对象的关系映射。  依赖的第三方库 见第三方库一节。
Camunda平台 架构 Camunda平台是一个灵活的框架，可以部署在不同的场景中。本节对最常见的部署场景进行了概述。
嵌入式流程引擎 在这种情况下，流程引擎被作为一个库添加到一个自定义的应用程序中。这样，流程引擎可以很容易地随着应用程序的生命周期启动和停止。也可以在一个共享数据库之上运行多个嵌入式流程引擎。
分布式的、由容器管理的流程引擎 在这种情况下，流程引擎在运行时容器（Servlet容器、应用服务器&amp;hellip;）内启动。流程引擎作为容器服务提供的，可以被部署在容器内的所有应用程序共享。这个概念就像JMS消息队列，它由运行时提供，可以被所有应用程序使用。流程部署和应用程序之间有一对一的映射：流程引擎跟踪应用程序部署的流程定义，并将执行委托给相对应的应用程序。
独立运行的（远程）流程引擎服务 在这种情况下，流程引擎被作为一个网络服务提供。在网络上运行的不同应用程序可以通过一个远程通信与流程引擎进行交互。使流程引擎可以远程访问的最简单方法是使用内置的REST API。不同的通信渠道，如SOAP Webservices或JMS也是可以的，但需要由用户自行实现。
集群 为了提供扩展或故障转移能力，流程引擎可以发布到集群中的不同节点。然后每个流程引擎实例必须连接到同一个共享数据库。
各个流程引擎实例不会在事务中维护会话状态。每当流程引擎运行一个事务时，完整的状态被储存到共享数据库。这使得将在同一力促恒实例中进行工作的后续请求路由到不同的集群节点成为可能。这个处理方式非常简单，容易理解，在部署集群安装时，它的限制也很有限。就流程引擎而言，用于扩展的设置和用于故障转移的设置之间没有区别（因为流程引擎在事务之中不保留会话状态）。
集群环境中的会话状态 Camunda平台不提供开箱即用的负载均衡功能和会话复制功能。负载均衡功能需要由第三方系统提供，而会话复制则需要由主机应用服务器提供。
在集群设置中，如果用户要登录到网络应用程序，需要采取额外的步骤来确保用户不会被要求多次登录。有两个方法：
 可以在你的负载平衡解决方案中配置和启用 &amp;ldquo;粘性会话&amp;rdquo;。这将确保在一个可配置的时间段内，所有来自特定用户的请求都被引导到同一个实例。 会话共享可以在你的应用服务器中启用，这样应用服务器实例就可以共享会话状态。这将允许一个用户连接到集群中的多个实例，而不会被要求多次登录。  如果以上两种方法都没有在集群设置中实现，那么连接到多个节点，无论是故意的或通过负载平衡解决方案的，都将导致多次登录请求。
集群环境中的 Job 执行器 流程引擎 job 执行器 也是集群的，在每个节点上都存在。这样，就流程引擎而言，就没有单点故障。job执行器可以同时在同质和异质集群中运行。
时区camunda对集群中的时区选择有一些限制。</description>
    </item>
    
    <item>
      <title>Process Application 资源访问</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-applications/process-application-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-applications/process-application-resources/</guid>
      <description>Process applications provide and logically group resources specific to the processes they contain. There are resources that are part of the application itself, like a classloader and its classes and resources, as well as resources managed by the process engine at runtime, like a set of scripting engines or Spin data formats. This section describes under which conditions the process engine looks up resources on process application level and how that lookup can be enforced.</description>
    </item>
    
    <item>
      <title>Get Groups (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/group/post-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/group/post-query/</guid>
      <description>Queries for a list of groups using a list of parameters. The size of the result set can be retrieved by using the Get Group Count (POST) method.
Method POST /group
Parameters Query Parameters  Name Description   firstResult Pagination of results. Specifies the index of the first result to return.   maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.</description>
    </item>
    
    <item>
      <title>Get Group Count (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/group/post-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/group/post-query-count/</guid>
      <description>Queries for groups using a list of parameters and retrieves the count.
Method POST /group/count
Parameters Request Body A JSON object with the following properties:
 Name Description   id Filter by the id of the group.   idIn Filter by a JSON array of group ids.   name Filter by the name of the group.   nameLike Filter by the name that the parameter is a substring of.</description>
    </item>
    
    <item>
      <title>Run Camunda Platform using Karaf / OSGi</title>
      <link>http://camunda-cn.shaochenfeng.com/installation/karaf-osgi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/installation/karaf-osgi/</guid>
      <description>Community Edition If you want to run Camunda Platform with Karaf / OSGi, you can find the corresponding distributions on GitHub.</description>
    </item>
    
    <item>
      <title>Activate/Suspend Batch</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/batch/put-activate-suspend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/batch/put-activate-suspend/</guid>
      <description>Activates or suspends a batch by id.
Method PUT /batch/{id}/suspended
Parameters Path Parameters  Name Description   id The id of the batch to activate or suspend.   Request Body A JSON object with the following properties:
 Name Description   suspended  A Boolean value which indicates whether to activate or suspend the batch. When the value is set to true, the batch will be suspended and when the value is set to false, the batch will be activated.</description>
    </item>
    
    <item>
      <title>Boolean Inputs</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/controls/boolean-inputs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/controls/boolean-inputs/</guid>
      <description>Checkbox Checkboxes are HTML &amp;lt;input type=&amp;quot;checkbox&amp;quot;&amp;gt; controls. Checkbox controls can be used for boolean variable types.
Binding a Checkbox to a Process Variable A checkbox input can be bound to a process variable using the cam-variable-type and cam-variable-name directives:
&amp;lt;input type=&amp;quot;checkbox&amp;quot; cam-variable-name=&amp;quot;IS_VIP_CUSTOMER&amp;quot; cam-variable-type=&amp;quot;Boolean&amp;quot; /&amp;gt;  In the example above, the checkbox is bound to the variable named IS_VIP_CUSTOMER of type Boolean.
Supported Variable Types for Checkboxes The checkbox input field only supports boolean variable types.</description>
    </item>
    
    <item>
      <title>Business Rule Task 业务规则任务</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/tasks/business-rule-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/tasks/business-rule-task/</guid>
      <description>一个业务规则任务可以同步执行一个或多个规则，可以调用Java代码或外部工作者（external worker）来实现，或者以异步方式调用以Web服务形式实现的逻辑。
使用 Camunda DMN 引擎 你可以使用Camunda DMN引擎集成来进行一个DMN决策。你必须使用camunda:decisionRef属性 指定要评估的决策键。此外。 camunda:decisionRefBinding指定哪一个版本的决策应该被评估。 camunda:decisionRefBinding的有效值是：
 deployment, 这会评估deployment部署的决策版本， latest 这将始终评估最新的决策版本， version 这允许你通过使用camunda:decisionRefVersion属性指定执行的特定版本， versionTag 这允许你用camunda:decisionRefVersionTag属性指定一个特定的版本标签来执行。  &amp;lt;businessRuleTask id=&amp;quot;businessRuleTask&amp;quot; camunda:decisionRef=&amp;quot;myDecision&amp;quot; camunda:decisionRefBinding=&amp;quot;version&amp;quot; camunda:decisionRefVersion=&amp;quot;12&amp;quot; /&amp;gt;  camunda:decisionRefBinding属性默认为latest。
&amp;lt;businessRuleTask id=&amp;quot;businessRuleTask&amp;quot; camunda:decisionRef=&amp;quot;myDecision&amp;quot; /&amp;gt;  属性camunda:decisionRef、camunda:decisionRefVersion和camunda:decisionRefVersionTag可以被指定为 一个表达式，它将在任务的执行中被计算。
&amp;lt;businessRuleTask id=&amp;quot;businessRuleTask&amp;quot; camunda:decisionRef=&amp;quot;${decisionKey}&amp;quot; camunda:decisionRefBinding=&amp;quot;version&amp;quot; camunda:decisionRefVersion=&amp;quot;${decisionVersion}&amp;quot; /&amp;gt;  决策的输出，也称为决策结果，不会自动保存为流程变量。它必须通过使用预定义或者定制的方式传递到一个流程变量中。
如果是预定义的映射，camunda:mapDecisionResult属性会引用要使用的映射器。映射的结果被保存在由camunda:resultVariable属性指定的变量中。如果没有设置预定义的映射器，那么默认使用 resultList 映射器。
&amp;lt;businessRuleTask id=&amp;quot;businessRuleTask&amp;quot; camunda:decisionRef=&amp;quot;myDecision&amp;quot; camunda:mapDecisionResult=&amp;quot;singleEntry&amp;quot; camunda:resultVariable=&amp;quot;result&amp;quot; /&amp;gt;  参见 用户指南 有关映射的详细信息。
结果变量的名称结果变量不应该使用 decisionResult这个名字，因为决策结果本身是保存在一个这个变量中。否则，在保存结果变量时就会出现异常。
决策参考中的租户Id （Tenant Id） 当业务规则任务（Business Rule Task）解析要进行评估的决策定义时，必须考虑多租户的情况。
默认租户（Tenant）决定 默认情况下，调用流程定义的租户id 被用来评估决策定义。 也就是说，如果调用的流程定义没有租户 ID，那么业务规则任务将使用所提供的key和没有 租户ID 的决策定义绑定进行评估（租户 ID = null）。 如果调用的流程定义有租户ID，那么将评估具有所提供的key和相同租户ID 的决策定义。</description>
    </item>
    
    <item>
      <title>Clean up history (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/history-cleanup/post-history-cleanup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/history-cleanup/post-history-cleanup/</guid>
      <description>Schedules asynchronous history cleanup (See History cleanup).
Method POST /history/cleanup
Parameters Query Parameters  Name Description   immediatelyDue When true the job will be scheduled for nearest future. When false, the job will be scheduled for next batch window start time. Default is true.   Request Body Not used
Result Result is not reliable any moreThis endpoint will return at most a single history cleanup job. Since version 7.</description>
    </item>
    
    <item>
      <title>Cleanup View</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/cleanup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/cleanup/</guid>
      <description>Enterprise FeaturePlease note that this feature is only included in the enterprise edition of the Camunda Platform, it is not available in the community edition.
Check the Camunda enterprise homepagefor more information or get yourfree trial version.The cleanup view in Cockpit provides information about the history cleanup state and statistics about the cleanable and deleted data. Moreover, the page allows to manually perform various operations related to the history cleanup.</description>
    </item>
    
    <item>
      <title>Clear Annotation of an User Operation Log (Historic)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/user-operation-log/clear-annotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/user-operation-log/clear-annotation/</guid>
      <description>Clear the annotation which was previously set for auditing reasons.
Method PUT /history/user-operation/{operationId}/clear-annotation
Parameters Path Parameters  Name Description   operationId The operation id of the operation log to be updated.   Request Body No request body.
Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.   400 application/json Returned if some of the request parameters are invalid, for example if the operationId path parameter value does not exists.</description>
    </item>
    
    <item>
      <title>Contextual Programming Model</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/cdi-java-ee-integration/contextual-programming-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/cdi-java-ee-integration/contextual-programming-model/</guid>
      <description>In this section we briefly look at the contextual process execution model used by the camunda-engine-cdi extension. A BPMN business process is typically a long-running interaction, comprised of both user and system tasks. At runtime, a process is split-up into a set of individual units of work, performed by users and/or application logic. In camunda-engine-cdi, a process instance can be associated with a CDI scope, the association representing a unit of work.</description>
    </item>
    
    <item>
      <title>Create Filter</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/filter/post-create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/filter/post-create/</guid>
      <description>Creates a new filter.
Security ConsiderationThe query parameter of the request body takes a JSON-serialized query. Some query types (e.g., task queries) allow to specify EL expressions in their parameters and may therefore be abused for remote code execution. See the section on security considerations for custom code in the user guide for details.
Method POST /filter/create
Parameters Request Body A JSON object with the following properties:</description>
    </item>
    
    <item>
      <title>Create Incident</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/execution/post-create-incident/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/execution/post-create-incident/</guid>
      <description>Creates a custom incident with given properties.
Method POST /execution/{id}/create-incident
Parameters Path Parameters  Name Description   id The id of the execution to create a new incident for.   Request Body A JSON object with the following properties:
 Name Description   incidentType A type of the new incident.   configuration A configuration for the new incident.   message A message for the new incident.</description>
    </item>
    
    <item>
      <title>Create group</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/group/post-create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/group/post-create/</guid>
      <description>Creates a new group.
Method POST /group/create
Parameters This method takes no parameters.
Request Body A JSON object with the following properties:
 Name Type Description   id String The id of the group.   name String The name of the group.   type String The type of the group.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.</description>
    </item>
    
    <item>
      <title>Create tenant</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/post-create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/post-create/</guid>
      <description>Create a new tenant.
Method POST /tenant/create
Parameters This method takes no parameters.
Request Body A JSON object with the following properties:
 Name Type Description   id String The id of the tenant.   name String The name of the tenant.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.   403 application/json Identity service is read-only.</description>
    </item>
    
    <item>
      <title>DMN Hit Policy</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/dmn/decision-table/hit-policy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/dmn/decision-table/hit-policy/</guid>
      <description>A decision table has a hit policy that specifies what the results of the evaluation of a decision table consist of.
The hit policy is set in the hitPolicy attribute on the decisionTable XML element. If no hit policy is set, then the default hit policy UNIQUE is used.
&amp;lt;definitions xmlns=&amp;quot;https://www.omg.org/spec/DMN/20191111/MODEL/&amp;quot; id=&amp;quot;definitions&amp;quot; name=&amp;quot;definitions&amp;quot; namespace=&amp;quot;http://camunda.org/schema/1.0/dmn&amp;quot;&amp;gt; &amp;lt;decision id=&amp;quot;dish&amp;quot; name=&amp;quot;Dish&amp;quot;&amp;gt; &amp;lt;decisionTable id=&amp;quot;decisionTable&amp;quot; hitPolicy=&amp;quot;RULE ORDER&amp;quot;&amp;gt; &amp;lt;!-- .. --&amp;gt; &amp;lt;/decisionTable&amp;gt; &amp;lt;/decision&amp;gt; &amp;lt;/definitions&amp;gt;  The following hit policies are supported by the Camunda DMN engine:</description>
    </item>
    
    <item>
      <title>Data Types in the DMN Engine</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/dmn-engine/data-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/dmn-engine/data-types/</guid>
      <description>A decision table allows to specify the types of inputs and outputs. When the DMN engine evaluates an input or an output, it checks if the type of the value matches the specified type. If the types do not match, the engine tries to transform the value into the specified type or throws an exception.
The DMN engine supports basic types which can be extended by custom types.
Supported Data Types The following types are supported by the DMN engine:</description>
    </item>
    
    <item>
      <title>Debugging Scripts</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/javascript/debugging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/javascript/debugging/</guid>
      <description> If a form script is loaded using an XHR from a web server, it is executed using eval(). To debug it, you need to use browser-specific debugger extensions.
Debugging Form Scripts in Google Chrome If you are using the Google Chrome debugger, you can add the debugger; directive to the source code of the script:
&amp;lt;form role=&amp;quot;form&amp;quot;&amp;gt; &amp;lt;script cam-script type=&amp;quot;text/form-script&amp;quot;&amp;gt; debugger; &amp;lt;/script&amp;gt; &amp;lt;/form&amp;gt;  </description>
    </item>
    
    <item>
      <title>Decision Task</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/cmmn11/tasks/decision-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/cmmn11/tasks/decision-task/</guid>
      <description>A decision task can be used to invoke a DMN 1.3 decision from a case.
A decision task is a regular task that requires a decisionRef attribute that references a decision definition by its key. Such a decision task can be defined as follows:
&amp;lt;decisionTask id=&amp;quot;checkCreditDecision&amp;quot; name=&amp;quot;Check credit&amp;quot; decisionRef=&amp;quot;checkCreditDecision&amp;quot; /&amp;gt;  Instead of the decisionRef attribute it is also possible to use an expression which must evaluate to a key of a decision definition at runtime.</description>
    </item>
    
    <item>
      <title>Delete Historic Batch</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/batch/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/batch/delete/</guid>
      <description>Deletes a historic batch by id, including related historic job logs.
Method DELETE /history/batch/{id}
Parameters Path Parameters  Name Description   id The id of the batch to be deleted.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.   404 application/json Deployment with id &#39;aDeploymentId&#39; does not exist. See the Introduction for the error response format.</description>
    </item>
    
    <item>
      <title>Deployment View</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/deployment-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/deployment-view/</guid>
      <description>The deployment view of Cockpit shows an overview of all deployments, their resources and the content of these resources. It allows the deletion of existing deployments as well as redeployment of old resources and the creation of new deployments. The content of resources within deployments can be displayed. It is also possible to download single resources from this view.
Search Use the search field at the top of the list of deployments to find specific deployments.</description>
    </item>
    
    <item>
      <title>Execute Migration Plan Async (Batch)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/migration/execute-migration-async/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/migration/execute-migration-async/</guid>
      <description>Executes a migration plan asynchronously (batch) for multiple process instances. To execute a migration plan synchronously, use the Execute Migration Plan method.
For more information about the difference between synchronous and asynchronous execution of a migration plan, please refer to the related section of the user guide.
Method POST /migration/executeAsync
Parameters Request Body A JSON object with the following properties:
 Name Description   migrationPlan  The migration plan to execute.</description>
    </item>
    
    <item>
      <title>Find clean up history jobs (GET)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/history-cleanup/get-history-cleanup-jobs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/history-cleanup/get-history-cleanup-jobs/</guid>
      <description> Finds history cleanup jobs (See History cleanup).
Method GET /history/cleanup/jobs
Parameters Query Parameters Not used
Request Body Not used
Result A list of JSON objects representing scheduled jobs. See Get Job for the structure and example.
Response Codes  Code Media type Description   200 application/json Request successful.   404 application/json History clean up jobs are empty.   Example Request GET /history/cleanup/jobs
Response [ { &amp;quot;id&amp;quot;:&amp;quot;aJobId&amp;quot;, &amp;quot;jobDefinitionId&amp;quot;:null, &amp;quot;processInstanceId&amp;quot;:null, &amp;quot;processDefinitionId&amp;quot;:null, &amp;quot;processDefinitionKey&amp;quot;:null, &amp;quot;executionId&amp;quot;:null, &amp;quot;exceptionMessage&amp;quot;:null, &amp;quot;retries&amp;quot;:3, &amp;quot;dueDate&amp;quot;:&amp;quot;aDueDate&amp;quot;, &amp;quot;suspended&amp;quot;:false, &amp;quot;priority&amp;quot;:0, &amp;quot;tenantId&amp;quot;:null, &amp;quot;createTime&amp;quot;: &amp;quot;2018-05-05T17:00:00+0200&amp;quot; }, { &amp;quot;id&amp;quot;:&amp;quot;anotherJobId&amp;quot;, &amp;quot;jobDefinitionId&amp;quot;:null, &amp;quot;processInstanceId&amp;quot;:null, &amp;quot;processDefinitionId&amp;quot;:null, &amp;quot;processDefinitionKey&amp;quot;:null, &amp;quot;executionId&amp;quot;:null, &amp;quot;exceptionMessage&amp;quot;:null, &amp;quot;retries&amp;quot;:3, &amp;quot;dueDate&amp;quot;:&amp;quot;anotherDueDate&amp;quot;, &amp;quot;suspended&amp;quot;:false, &amp;quot;priority&amp;quot;:0, &amp;quot;tenantId&amp;quot;:null, &amp;quot;createTime&amp;quot;: &amp;quot;2018-05-05T17:00:00+0200&amp;quot; } ]  </description>
    </item>
    
    <item>
      <title>Fluent Builder API</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/model-api/bpmn-model-api/fluent-builder-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/model-api/bpmn-model-api/fluent-builder-api/</guid>
      <description>To create simple BPMN processes we provide a fluent builder API. With this API you can easily create basic processes in a few lines of code. In the generate process fluent api quickstart we demonstrate how to create a rather complex process with 5 tasks and 2 gateways within less than 50 lines of code.
The fluent builder API is not nearly complete but provides you with the following basic elements:</description>
    </item>
    
    <item>
      <title>Full Example</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/integrate/full-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/integrate/full-examples/</guid>
      <description>Full examples of how to integrate the Forms SDK in a custom application can be found in the Camunda Platform Examples Repository in Github.
 Example for standalone usage of the SDK Example for standalone usage of the SDK with AngularJS Integration  </description>
    </item>
    
    <item>
      <title>Get CMMN XML</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-definition/get-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-definition/get-xml/</guid>
      <description>Retrieves the CMMN XML of a case definition.
Method GET /case-definition/{id}/xml
GET /case-definition/key/{key}/xml (returns the XML for the latest version of the case definition which belongs to no tenant)
GET /case-definition/key/{key}/tenant-id/{tenant-id}/xml (returns the XML for the latest version of the case definition for tenant)
Parameters Path Parameters  Name Description   id The id of the case definition.   key The key of the case definition (the latest version thereof) to be retrieved.</description>
    </item>
    
    <item>
      <title>Get Case Executions (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/post-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/post-query/</guid>
      <description>Queries for case executions that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Case Executions method because it allows filtering by multiple case variables of types String, Number or Boolean.
Method POST /case-execution
Parameters Query Parameters  Name Description   firstResult Pagination of results. Specifies the index of the first result to return.   maxResults Pagination of results. Specifies the maximum number of results to return.</description>
    </item>
    
    <item>
      <title>Get Case Instances (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/post-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/post-query/</guid>
      <description>Queries for case instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Case Instances method because it allows to filter by multiple case variables of types String, Number or Boolean.
Method POST /case-instance
Parameters Query Parameters  Name Description   firstResult Pagination of results. Specifies the index of the first result to return.   maxResults Pagination of results. Specifies the maximum number of results to return.</description>
    </item>
    
    <item>
      <title>Get DMN XML</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/decision-definition/get-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/decision-definition/get-xml/</guid>
      <description>Retrieves the DMN XML of a decision definition.
Method GET /decision-definition/{id}/xml
GET /decision-definition/key/{key}/xml (returns the XML for the latest version of the decision definition which belongs to no tenant)
GET /decision-definition/key/{key}/tenant-id/{tenant-id}/xml (returns the XML of the latest version of the decision definition for tenant)
Parameters Path Parameters  Name Description   id The id of the decision definition.   key The key of the decision definition (the latest version thereof) to be retrieved.</description>
    </item>
    
    <item>
      <title>Get DMN XML</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/decision-requirements-definition/get-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/decision-requirements-definition/get-xml/</guid>
      <description>Retrieves the DMN XML of a decision requirements definition.
Method GET /decision-requirements-definition/{id}/xml
GET /decision-requirements-definition/key/{key}/xml (returns the XML for the latest version of the decision requirements definition which belongs to no tenant)
GET /decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/xml (returns the XML of the latest version of the decision requirements definition for tenant)
Parameters Path Parameters  Name Description   id The id of the decision requirements definition.   key The key of the decision requirements definition (the latest version thereof) to be retrieved.</description>
    </item>
    
    <item>
      <title>Get Definition Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get-query-count/</guid>
      <description>Requests the number of process definitions that fulfill the query criteria. Takes the same filtering parameters as the Get Definitions method.
Method GET /process-definition/count
Parameters Query Parameters  Name Description   processDefinitionId Filter by process definition id.   processDefinitionIdIn Filter by process definition ids.   name Filter by process definition name.   nameLike Filter by process definition names that the parameter is a substring of.   deploymentId Filter by the deployment the id belongs to.</description>
    </item>
    
    <item>
      <title>Get Event Subscriptions</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/event-subscription/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/event-subscription/get-query/</guid>
      <description>Queries for event subscriptions that fulfill given parameters. The size of the result set can be retrieved by using the Get Event Subscription Count method.
Method GET /event-subscription
Parameters Query Parameters  Name Description   eventSubscriptionId Only select subscription with the given id.   eventName Only select subscriptions for events with the given name.   eventType Only select subscriptions for events with the given type. Valid values: message, signal, compensate, and conditional.</description>
    </item>
    
    <item>
      <title>Get Executions (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/execution/post-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/execution/post-query/</guid>
      <description>Queries for executions that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Executions method because it allows to filter by multiple instance and execution variables of types String, Number or Boolean.
Method POST /execution
Parameters Query Parameters  Name Description   firstResult Pagination of results. Specifies the index of the first result to return.   maxResults Pagination of results. Specifies the maximum number of results to return.</description>
    </item>
    
    <item>
      <title>Get External Task Log Error Details</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/external-task-log/get-external-task-log-error-details/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/external-task-log/get-external-task-log-error-details/</guid>
      <description>Retrieves the corresponding error details of the passed historic external task log by id.
Method GET /history/external-task-log/{id}/error-details
Parameters Path Parameters  Name Description   id The id of the historic external task log to get the error details for.   Result The result is the corresponding error details as plain text.
Response Codes  Code Media type Description   200 text/plain Request successful.   404 application/json Historic external task log with given id does not exist.</description>
    </item>
    
    <item>
      <title>Get External Tasks (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/post-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/post-query/</guid>
      <description>Queries for external tasks that fulfill given parameters in the form of a JSON object. This method is slightly more powerful than the Get External Tasks method because it allows to specify a hierarchical result sorting.
Method POST /external-task
Parameters Query Parameters  Name Description   firstResult Pagination of results. Specifies the index of the first result to return.   maxResults Pagination of results. Specifies the maximum number of results to return.</description>
    </item>
    
    <item>
      <title>Get Historic Activity Instances (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/activity-instance/post-activity-instance-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/activity-instance/post-activity-instance-query/</guid>
      <description>Queries for historic activity instances that fulfill the given parameters.
Method POST /history/activity-instance
Parameters Query Parameters  firstResult Pagination of results. Specifies the index of the first result to return.   maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.   Request Body A JSON object with the following properties:
 Name Description   activityInstanceId Filter by activity instance id.</description>
    </item>
    
    <item>
      <title>Get Historic Case Instances (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-instance/post-case-instance-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-instance/post-case-instance-query/</guid>
      <description>Queries for historic case instances that fulfill the given parameters.
Method POST /history/case-instance
Parameters Query Parameters  firstResult Pagination of results. Specifies the index of the first result to return.   maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.   Request Body A JSON object with the following properties:
 Name Description   caseInstanceId Filter by case instance id.</description>
    </item>
    
    <item>
      <title>Get Historic Detail (Binary)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/detail/get-detail-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/detail/get-detail-binary/</guid>
      <description>Retrieves the content of a historic variable update by id. Applicable for byte array and file variables.
Method GET /history/detail/{id}/data
Parameters Path Parameters  Name Description   id The id of the historic variable update.   Result For binary variables or files without any MIME type information, a byte stream is returned. File variables with MIME type information are returned as the saved type. Additionally, for file variables the Content-Disposition header will be set.</description>
    </item>
    
    <item>
      <title>Get History Cleanup Configuration</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/history-cleanup/get-cleanup-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/history-cleanup/get-cleanup-configuration/</guid>
      <description>Retrieves history cleanup batch window configuration (See History cleanup).
Method GET /history/cleanup/configuration
Parameters Query Parameters Not used
Request Body Not used
Result A JSON object representing batch window datetimes with timezone.
 Name Value Description   batchWindowStartTime Date Start time of the current or next batch window. By default, the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.    batchWindowEndTime Date End time of the current or next batch window.</description>
    </item>
    
    <item>
      <title>Get Instance Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/get-query-count/</guid>
      <description>Queries for the number of process instances that fulfill given parameters. Takes the same parameters as the Get Instances method.
Method GET /process-instance/count
Parameters Query Parameters  Name Description   processInstanceIds Filter by a comma-separated list of process instance ids.   businessKey Filter by process instance business key.   businessKeyLike Filter by process instance business key that the parameter is a substring of.   caseInstanceId Filter by case instance id.</description>
    </item>
    
    <item>
      <title>Get Job Definitions (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job-definition/post-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job-definition/post-query/</guid>
      <description>Queries for job definitions that fulfill given parameters. This method is slightly more powerful than the Get Job Definitions method because it allows filtering by multiple job definitions of types String, Number or Boolean.
Method POST /job-definition
Parameters Query Parameters  Name Description   firstResult Pagination of results. Specifies the index of the first result to return.   maxResults Pagination of results. Specifies the maximum number of results to return.</description>
    </item>
    
    <item>
      <title>Get Job Log Exception Stacktrace</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/job-log/get-job-log-stacktrace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/job-log/get-job-log-stacktrace/</guid>
      <description>Retrieves the corresponding exception stacktrace to the passed historic job log by id.
Method GET /history/job-log/{id}/stacktrace
Parameters Path Parameters  Name Description   id The id of the historic job log to get the exception stacktrace for.   Result The result is the corresponding stacktrace as plain text.
Response Codes  Code Media type Description   200 text/plain Request successful.   404 application/json Historic job log with given id does not exist.</description>
    </item>
    
    <item>
      <title>Get Jobs (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job/post-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job/post-query/</guid>
      <description>Queries for jobs that fulfill given parameters. This method is slightly more powerful than the Get Jobs method because it allows filtering by multiple jobs of types String, Number or Boolean.
Method POST /job
Parameters Query Parameters  Name Description   firstResult Pagination of results. Specifies the index of the first result to return.   maxResults Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left.</description>
    </item>
    
    <item>
      <title>Get Process Instances (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-instance/post-process-instance-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-instance/post-process-instance-query/</guid>
      <description>Queries for historic process instances that fulfill the given parameters. This method is slightly more powerful than the Get Process Instances method because it allows filtering by multiple process variables of types String, Number or Boolean.
Method POST /history/process-instance
Parameters Query Parameters  firstResult Pagination of results. Specifies the index of the first result to return.   maxResults Pagination of results. Specifies the maximum number of results to return.</description>
    </item>
    
    <item>
      <title>Get Task Count (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/task/post-task-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/task/post-task-query-count/</guid>
      <description>Queries for the number of historic tasks that fulfill the given parameters. Takes the same parameters as the Get Tasks (Historic) method. Corresponds to the size of the result set of the Get Tasks (Historic) (POST) method and takes the same parameters.
Method POST /history/task/count
Parameters Request Body A JSON object with the following properties:
 Name Description   taskId Filter by task id.   taskParentTaskId Filter by parent task id.</description>
    </item>
    
    <item>
      <title>Get Task Count (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-query-count/</guid>
      <description>Retrieves the number of tasks that fulfill the given filter. Corresponds to the size of the result set of the Get Tasks (POST) method and takes the same parameters.
Security ConsiderationThere are several query parameters (such as assigneeExpression) for specifying an EL expression. These are disabled by default to prevent remote code execution. See the section on security considerations for custom code in the user guide for details.</description>
    </item>
    
    <item>
      <title>Get Variable Instance</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/variable-instance/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/variable-instance/get/</guid>
      <description>Retrieves a variable by id.
Method GET /variable-instance/{id}
Parameters Path Parameters  Name Description   id The id of the variable instance.   Query Parameters  Name Description   deserializeValue  Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).If set to true, a serializable variable will be deserialized on server side and transformed to JSON using Jackson&#39;s POJO/bean property introspection feature.</description>
    </item>
    
    <item>
      <title>Get Variable Instance (Binary)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/variable-instance/get-variable-instance-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/variable-instance/get-variable-instance-binary/</guid>
      <description>Retrieves the content of a historic variable by id. Applicable for variables that are serialized as binary data.
Method GET /history/variable-instance/{id}/data
Parameters Path Parameters  Name Description   id The id of the variable instance.   Result For binary variables or files without any MIME type information, a byte stream is returned. File variables with MIME type information are returned as the saved type. Additionally, for file variables the Content-Disposition header will be set.</description>
    </item>
    
    <item>
      <title>Get a User&#39;s Profile</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/user/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/user/get/</guid>
      <description>Retrieves a user&amp;rsquo;s profile.
Method GET /user/{id}/profile
Parameters Path Parameters  Name Description   id The id of the user to be retrieved.   Result A JSON object. The user object has the following properties:
 Name Value Description   id String The id of the user.   firstName String The first name of the user.   lastName String The last name of the user.</description>
    </item>
    
    <item>
      <title>History in Cockpit</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/bpmn/process-history-views/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/bpmn/process-history-views/</guid>
      <description>Enterprise FeaturePlease note that this feature is only included in the enterprise edition of the Camunda Platform, it is not available in the community edition.
Check the Camunda enterprise homepagefor more information or get yourfree trial version.At the top of the process definition view and the process instance view, you can hit the History button to access the history view.
Process Definition History View In the history view of the process definition you see an overview of all of the running and completed process instances.</description>
    </item>
    
    <item>
      <title>Hypertext Application Language (HAL)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/overview/hal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/overview/hal/</guid>
      <description>The REST API provides some resources in an additional media type. The HAL media type application/hal+json describes a format which contains links and information about other resources. This allows us to embed the process definition or assignee of a task directly into the response, which in turn reduces the number of necessary requests to gather all information about a single task or a list of tasks.
To interact with HAL, you have to set application/hal+json as Accept header.</description>
    </item>
    
    <item>
      <title>Inclusive Gateway</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/gateways/inclusive-gateway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/gateways/inclusive-gateway/</guid>
      <description>The Inclusive Gateway can be seen as a combination of an exclusive and a parallel gateway. Like an exclusive gateway, you can define conditions on outgoing sequence flows and the inclusive gateway will evaluate them. However, the main difference is that the inclusive gateway can receive more than one sequence flow, like a parallel gateway.
The functionality of the inclusive gateway is based on the incoming and outgoing sequence flows:</description>
    </item>
    
    <item>
      <title>Invoke Decisions from Processes and Cases</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/decisions/bpmn-cmmn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/decisions/bpmn-cmmn/</guid>
      <description>BPMN &amp;amp; CMMN Integration This section explains how to invoke DMN decision from BPMN and CMMN.
BPMN Business Rule Task The BPMN business rule task can reference a deployed decision definition. The decision definition is evaluated when the task is executed.
&amp;lt;definitions id=&amp;quot;taskAssigneeExample&amp;quot; xmlns=&amp;quot;http://www.omg.org/spec/BPMN/20100524/MODEL&amp;quot; xmlns:camunda=&amp;quot;http://camunda.org/schema/1.0/bpmn&amp;quot; targetNamespace=&amp;quot;Examples&amp;quot;&amp;gt; &amp;lt;process id=&amp;quot;process&amp;quot;&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;businessRuleTask id=&amp;quot;businessRuleTask&amp;quot; camunda:decisionRef=&amp;quot;myDecision&amp;quot; camunda:mapDecisionResult=&amp;quot;singleEntry&amp;quot; camunda:resultVariable=&amp;quot;result&amp;quot; /&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;/process&amp;gt; &amp;lt;/definitions&amp;gt;  For more information on how to reference a decision definition from a business rule task, please refer to the BPMN 2.</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/data-formats/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/data-formats/json/</guid>
      <description>For working with JSON, the Spin functions org.camunda.spin.Spin.S and org.camunda.spin.Spin.JSON can be used as entry points. The latter offers strongly-typed access to Spin&amp;rsquo;s JSON API and is preferable when writing Java code. In scripting environments, only the S function is available. The returned Spin wrapper offers methods for manipulating and writing JSON as well as mapping JSON to Java. Furthermore, the entry functions can be provided with Java objects that get implicitly converted to Spin&amp;rsquo;s intermediary JSON format.</description>
    </item>
    
    <item>
      <title>Mapping JSON</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/spin/json/04-mapping-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/spin/json/04-mapping-json/</guid>
      <description>Spin can deserialize JSON to Java objects and serialize Java objects to JSON by integrating Jackson&amp;rsquo;s mapping features into its fluent API.
Mapping between Representations: Assume we have a class Customer defined as follows:
public class Customer { private String name; public String getName() { return name; } public void setName(String name) { this.name = name; } }  Mapping JSON to Java: We can map a JSON object {&amp;quot;name&amp;quot; : &amp;quot;Kermit&amp;quot;} to an instance of Customer as follows:</description>
    </item>
    
    <item>
      <title>MariaDB Galera 数据库配置</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/database/mariadb-galera-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/database/mariadb-galera-configuration/</guid>
      <description>This section documents the supported Galera Cluster configuration for MariaDB. Both server and client need to be configured correctly. Please note that there are some known limitations which apply when using Galera cluster, see below.
WarningPlease note that server and client configuration settings defined below are the only configuration that is supported for Galera Cluster. Other configurations are not supported.
Server Configuration The following configuration needs to go into the [galera] configuration section in the my.</description>
    </item>
    
    <item>
      <title>Maven 项目模板 (Archetypes)</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-applications/maven-archetypes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-applications/maven-archetypes/</guid>
      <description>We provide several project templates for Maven, which are also called Archetypes. They enable a quickstart for developing production-ready process applications using the Camunda Platform. We incorporated best practices for different application types into the templates to help you start off with a solid base.
The Archetypes can be used to generate projects as detailed in the different usage sections. In case generating a project from an Archetype on your own is not feasible, we also provide a template GitHub repository for every Archetype.</description>
    </item>
    
    <item>
      <title>Perform an Authorization Check</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/authorization/get-check/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/authorization/get-check/</guid>
      <description>Performs an authorization check for the currently authenticated user.
Method GET /authorization/check
Parameters Query Parameters  Name Description Required?   permissionName String value representing the permission name to check for. Yes   resourceName String value for the name of the resource to check permissions for. Yes   resourceType An integer representing the resource type to check permissions for. See the User Guide for a list of integer representations of resource types.</description>
    </item>
    
    <item>
      <title>Post Deployment</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/deployment/post-deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/deployment/post-deployment/</guid>
      <description>Creates a deployment.
Security ConsiderationDeployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on security considerations for custom code in the user guide for details.
Method POST /deployment/create
Parameters Request Body A multipart form submit with the following parts:
 Form Part Name Content Type Description   deployment-name text/plain The name for the deployment to be created.</description>
    </item>
    
    <item>
      <title>Process Archive Configuration</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/deployment-descriptors/tags/process-archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/deployment-descriptors/tags/process-archive/</guid>
      <description>The process archive tag allows configuration of a process engine deployment and can be used in the processes.xml file.
See the processes.xml section of the User Guide for more details.
Example The following example shows a process-archive XML snippet:
&amp;lt;process-archive name=&amp;quot;loan-approval&amp;quot;&amp;gt; &amp;lt;process-engine&amp;gt;my-engine&amp;lt;/process-engine&amp;gt; &amp;lt;resource&amp;gt;bpmn/invoice.bpmn&amp;lt;/resource&amp;gt; &amp;lt;resource&amp;gt;bpmn/order-resource.bpmn&amp;lt;/resource&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;property name=&amp;quot;isDeleteUponUndeploy&amp;quot;&amp;gt;false&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;isScanForProcessDefinitions&amp;quot;&amp;gt;true&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;additionalResourceSuffixes&amp;quot;&amp;gt;groovy,py&amp;lt;/property&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/process-archive&amp;gt;  Syntax Reference  Tag name  Parent tag name Required? Description   &amp;lt;process-archive&amp;gt; &amp;lt;process-application&amp;gt; true  Container element for the configuration of a process archive (deployment).</description>
    </item>
    
    <item>
      <title>Querying XML</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/spin/xml/04-querying-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/spin/xml/04-querying-xml/</guid>
      <description>The XML datatype supports querying with the XPath 1.0 query language.
Querying an Element import static org.camunda.spin.Spin.XML; String xml = &amp;quot;&amp;lt;root&amp;gt;&amp;lt;child id=\&amp;quot;child\&amp;quot;&amp;gt;&amp;lt;a id=\&amp;quot;a\&amp;quot;/&amp;gt;&amp;lt;a id=\&amp;quot;b\&amp;quot;/&amp;gt;&amp;lt;/child&amp;gt;&amp;lt;/root&amp;gt;&amp;quot;; SpinXmlTreeElement child = XML(xml).xPath(&amp;quot;/root/child&amp;quot;).element();  Querying an Element List import static org.camunda.spin.Spin.XML; String xml = &amp;quot;&amp;lt;root&amp;gt;&amp;lt;child id=\&amp;quot;child\&amp;quot;&amp;gt;&amp;lt;a id=\&amp;quot;a\&amp;quot;/&amp;gt;&amp;lt;a id=\&amp;quot;b\&amp;quot;/&amp;gt;&amp;lt;/child&amp;gt;&amp;lt;/root&amp;gt;&amp;quot;; SpinList&amp;lt;SpinXmlTreeElement&amp;gt; childs = XML(xml).xPath(&amp;quot;/root/child/a&amp;quot;).elementList();  Querying an Attribute import static org.camunda.spin.Spin.XML; String xml = &amp;quot;&amp;lt;root&amp;gt;&amp;lt;child id=\&amp;quot;child\&amp;quot;&amp;gt;&amp;lt;a id=\&amp;quot;a\&amp;quot;/&amp;gt;&amp;lt;a id=\&amp;quot;b\&amp;quot;/&amp;gt;&amp;lt;/child&amp;gt;&amp;lt;/root&amp;gt;&amp;quot;; SpinXmlTreeAttribute attribute = XML(xml).xPath(&amp;quot;/root/child/@id&amp;quot;).attribute();  Querying an Attribute List import static org.</description>
    </item>
    
    <item>
      <title>Repetition Rule</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/cmmn11/markers/repetition-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/cmmn11/markers/repetition-rule/</guid>
      <description>Can be used with: Task, Stage, Milestone
Under which conditions a plan item is repeatable can be specified by a repetition rule.
In XML, a repetition rule can be specified for an individual plan item or for a plan item definition. For a plan item it looks as follows:
&amp;lt;planItem id=&amp;quot;PlanItem_HumanTask&amp;quot; definitionRef=&amp;quot;HumanTask&amp;quot;&amp;gt; &amp;lt;itemControl&amp;gt; &amp;lt;repetitionRule&amp;gt; &amp;lt;condition&amp;gt;&amp;lt;![CDATA[${var &amp;lt; 100}]]&amp;gt;&amp;lt;/condition&amp;gt; &amp;lt;/repetitionRule&amp;gt; &amp;lt;/itemControl&amp;gt; &amp;lt;/planItem&amp;gt; &amp;lt;humanTask id=&amp;quot;HumanTask&amp;quot; /&amp;gt;  For a plan item definition, the following XML can be used:</description>
    </item>
    
    <item>
      <title>Spring Beans in Processes</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/spring-framework-integration/expressions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/spring-framework-integration/expressions/</guid>
      <description>Limit the Exposing Spring Beans in Expressions When using the ProcessEngineFactoryBean, by default, all expressions in the BPMN processes will also &amp;ldquo;see&amp;rdquo; all the Spring beans. It&amp;rsquo;s possible to limit the beans you want to expose in expressions or even exposing no beans at all using a map that you can configure. The example below exposes a single bean (printer), available to use under the key printer. To have NO beans exposed at all, just pass an empty list as beans property on the SpringProcessEngineConfiguration.</description>
    </item>
    
    <item>
      <title>System Management</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/admin/system-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/admin/system-management/</guid>
      <description>The System Settings menu gives you some general information about the process engine and allows you to access the Execution Metrics and, provided that you are using the Enterprise Edition of the Camunda Platform, you can insert your License Key
Accessing the System Settings menuThe System Settings menu is only usable by users which are granted with All permission for authorizations.
Execution Metrics The Execution Metrics menu in Admin displays an approximate number of Flow Nodes Instances (FNI), Executed Decision Elements (EDE), Root Process Instances (RPI) and Executed Decision Instances (EDI) processed by the engine and Unique Task Workers (UTW) that were assigned to a user task in the selected time range.</description>
    </item>
    
    <item>
      <title>Timer Events</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/timer-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/timer-events/</guid>
      <description>Timer events are events which are triggered by a defined timer. They can be used as start event, intermediate event or boundary event. Boundary events can be interrupting or not.
 Configuration Timers are only fired when the Job Executor is enabled.
Defining a Timer Timers are configured using an ISO 8601 time format. A timer definition must have exactly one of the following elements.
Time Date This format specifies a fixed time and date in adhering to the ISO 8601 format, when the trigger will be fired.</description>
    </item>
    
    <item>
      <title>Transaction Subprocess</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/subprocesses/transaction-subprocess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/subprocesses/transaction-subprocess/</guid>
      <description>A transaction subprocess is an embedded subprocess which can be used to group multiple activities to a transaction. A transaction is a logical unit of work which allows grouping of a set of individual activities, so that they either succeed or fail collectively.
A transaction can have three possible outcomes:
 A transaction is successful if it is neither canceled nor terminated by a hazard. If a transaction subprocess is successful, it is left using the outgoing sequenceflow(s).</description>
    </item>
    
    <item>
      <title>User Assignment</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/tasklist/user-assignment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/tasklist/user-assignment/</guid>
      <description>For users to be able to work on the tasks they should work on, they must be able to find these tasks. Enabling users to find &amp;ldquo;their&amp;rdquo; tasks requires the correct interaction between the initial assignment of the task and the filters configured in Tasklist.
This works as follows:
 Initial Assignment: when a task is created, it is initially assigned to a user or group according to the configuration in the BPMN process (or the CMMN case).</description>
    </item>
    
    <item>
      <title>Validate Password</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/identity/validate-password/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/identity/validate-password/</guid>
      <description>A password policy consists of a list of rules that new passwords must follow to be policy compliant. A password can be checked for compliancy via this end point.
More information on password policies in Camunda can be found in the password policy user guide and in the security instructions.
Method POST /identity/password-policy
Parameters Request Body A JSON object with the following properties:
 Name Type Description   password String The candidate password to be check against the password policy.</description>
    </item>
    
    <item>
      <title>Web applications</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/spring-boot-integration/webapps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/spring-boot-integration/webapps/</guid>
      <description>To enable the Web Applications you can use the following starter in your pom.xml:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.camunda.bpm.springboot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camunda-bpm-spring-boot-starter-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{project-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  By default the application path is /camunda, so without any further configuration you can access the Webapps under http://localhost:8080/camunda/app/.
Enterprise webapps Enterprise FeaturePlease note that this feature is only included in the enterprise edition of the Camunda Platform, it is not available in the community edition.
Check the Camunda enterprise homepagefor more information or get yourfree trial version.</description>
    </item>
    
    <item>
      <title>Working with Json Data</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/json-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/json-data/</guid>
      <description>Fetching an existing JSON Variable The Form SDK will only fetch those variables which are actually used in a form. Since a JSON object is usually not bound to a single input field, we cannot use the cam-variable-name directive. We thus need to fetch the variable programatically:
&amp;lt;script cam-script type=&amp;quot;text/form-script&amp;quot;&amp;gt; camForm.on(&#39;form-loaded&#39;, function() { // tell the form SDK to fetch the variable named &#39;customer&#39; camForm.variableManager.fetchVariable(&#39;customer&#39;); }); camForm.on(&#39;variables-fetched&#39;, function() { // work with the variable (bind it to the current AngularJS $scope) $scope.</description>
    </item>
    
    <item>
      <title>支持的运行环境</title>
      <link>http://camunda-cn.shaochenfeng.com/introduction/supported-environments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/introduction/supported-environments/</guid>
      <description>你可以在任何可运行Java的环境中运行Camunda平台。但以下环境中运行可以得到了我们的质量保证。你可以在我们的企业支持页面中获得更多的信息。
支持的运行环境请注意，本节中列出的环境与Camunda平台的版本有关。请选择本文档的相应版本，以查看适合您的Camunda平台版本的环境。例如，7.3版本的支持环境。
容器/应用 服务器 嵌入应用程序的流程引擎  所有的 Java 应用服务器 Camunda Spring Boot Starter: 启用 Tomcat （参见 支持的版本 和 部署场景）  容器管理的流程引擎 和 Camunda Cockpit, Tasklist, Admin  Apache Tomcat 9.0 JBoss EAP 7.0 / 7.1 / 7.2 / 7.3 Wildfly Application Server 13.0 / 14.0 / 15.0 / 16.0 / 17.0 / 18.0 / 19.0 / 20.0 / 21.0 / 22.0 IBM WebSphere Application Server 8.5 / 9.</description>
    </item>
    
    <item>
      <title>流程变量</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/variables/</guid>
      <description>本节描述流程变量的概念。流程变量可以用将数据添加到流程的运行时状态中，或者更具体地说，变量作用域中。改变实体的各种API可以用来更新这些附加的变量。一般来说，一个变量由一个名称和一个值组成。名称用于在整个流程中识别变量。例如，如果一个活动（activity）设置了一个名为 var 的变量，那么后续活动中可以通过使用这个名称来访问它。变量的值是一个 Java 对象。
变量作用域和变量可访问性 所有可以拥有变量的实体被称为 变量作用域 。包括执行（包括流程实例在内）和任务。正如在概念章节所描述的，流程实例的运行状态由一棵执行树表示。参看下面的流程模型，其中红点标志着活动任务。
这个流程的运行时结构如下：
有一个流程实例有两个子执行，每个子执行都创建了一个任务。所有这五个实体都是变量作用域，箭头标志着父-子关系。在父作用域上定义的变量可以在每个子作用域中被访问，除非子作用域定义了同名的变量。反过来说，子变量不能从父作用域访问。直接附属于有关作用域的变量被称为 local 变量。思考一下，下面将变量作用域的分配情况。
在这种情况下，当在 task 1 工作时，可以访问变量 worker 和 customer 。请注意，由于作用域的结构，变量 worker 可以被定义两次，所以 task 1 访问的 worker 变量与 task 2 访问的不同。然而，两者都共享变量 customer ，这意味着如果该变量被其中一个任务更新，这一变化对另一个任务也是可见的。
两个任务都可以访问到这两个变量，但这些变量都不是局部变量。所有三个执行任务都有只有一个局部变量。
现在我们假设，我们在 task 1 上设置了一个局部变量 customer 。
虽然两个名为 customer 和 worker 的变量仍然可以从 Task 1 访问，但 Execution 1 上的 customer 变量是隐藏的，所以可访问的 customer 变量是 Task 1 的局部变量。
一般来说，变量可以被访问 有以下几种情况。
 实例化流程 传递信息 任务生命周期的转换，如完成或解决 从外部设置/获取变量 设置/获取Delegate中的变量 流程模型中的表达式 流程模型中的脚本 （历史性的）变量查询  设置和查询变量 - 概述 为了设置和查询变量，流程引擎提供了一个Java API，允许从Java中设置变量，并以同样的形式查询它们。在流程引擎内部，引擎使用序列化将变量持久化到数据库中。对于大多数应用程序来说，这是一个无关紧要的细节。然而，有时，当使用自定义的Java类时，变量的序列化值是有意义的。想象一下一个管理许多流程应用程序的监控应用程序的情况。它与这些应用程序的类解耦，因此不能访问其Java表示中的自定义变量。对于这些情况，流程引擎提供了一种查询和操作序列化值的方法。可以归结为两个API。</description>
    </item>
    
    <item>
      <title>Auditing of Cockpit Operations</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/auditing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/auditing/</guid>
      <description>Enterprise FeaturePlease note that this feature is only included in the enterprise edition of the Camunda Platform, it is not available in the community edition.
Check the Camunda enterprise homepagefor more information or get yourfree trial version.Since Cockpit is a very powerful tool, it is often desired to inspect which user performed which operation for auditing purposes. Cockpit operations that change state are logged in the Camunda Platform&amp;rsquo;s user operation log that is part of the process engine history.</description>
    </item>
    
    <item>
      <title>Redeploy Deployment</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/deployment/post-redeploy-deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/deployment/post-redeploy-deployment/</guid>
      <description>Re-deploys an existing deployment.
The deployment resources to re-deploy can be restricted by using the properties resourceIds or resourceNames. If no deployment resources to re-deploy are passed then all existing resources of the given deployment are re-deployed.
Security ConsiderationDeployments can contain custom code in form of scripts or EL expressions to customize process behavior. This may be abused for remote execution of arbitrary code. See the section on security considerations for custom code in the user guide for details.</description>
    </item>
    
    <item>
      <title>Telemetry 遥测</title>
      <link>http://camunda-cn.shaochenfeng.com/introduction/telemetry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/introduction/telemetry/</guid>
      <description>At Camunda, we strive to offer excellent user experience at a high and stable level. On a strict opt-in basis, we are looking to collect environment and usage data to further improve the user experience for you. These insights help us to understand typical environment setups and product usage patterns and will be used to make informed product improvement decisions to your benefit.
Design The process engine has a dedicated thread called the Telemetry Reporter to periodically report telemetry data to Camunda.</description>
    </item>
    
    <item>
      <title>Auditing</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/admin/auditing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/admin/auditing/</guid>
      <description>Enterprise FeaturePlease note that this feature is only included in the enterprise edition of the Camunda Platform, it is not available in the community edition.
Check the Camunda enterprise homepagefor more information or get yourfree trial version.It is often desired to inspect which user performed which operation for auditing purposes. Admin operations are logged in the user operation log that is part of the process engine&amp;rsquo;s history.</description>
    </item>
    
    <item>
      <title>Authorization Resource Options</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/authorization/options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/authorization/options/</guid>
      <description>The /authorization resource supports two custom OPTIONS requests, one for the resource as such and one for individual authorization instances. The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on the /authorization resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal configuration of the process engine.</description>
    </item>
    
    <item>
      <title>Batch View</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/batch/monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/batch/monitoring/</guid>
      <description>The batch page displays the status of running and completed batches. It allows displaying details of a batch such as the start- and end-time or the number of remaining jobs. For failed jobs, it displays the error message and allows a retry or deletion of the job.
Overview On the left side of the page, two lists of running and finished batches are displayed. You can click on any entry to display details of the batch on the right side of the page.</description>
    </item>
    
    <item>
      <title>Built-In Beans</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/cdi-java-ee-integration/built-in-beans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/cdi-java-ee-integration/built-in-beans/</guid>
      <description>The ProcessEngine as well as the services are available for injection: @Inject ProcessEngine, RepositoryService, TaskService, &amp;hellip; A specific named ProcessEngine and its services can be injected by adding the qualifier @ProcessEngineName(&#39;someEngine&#39;) The current process instance and task can be injected: @Inject ProcessInstance, Task, The current business key can be injected: @Inject @BusinessKey String businessKey, The current process instance id be injected: @Inject @ProcessInstanceId String pid.  Process variables are available for injection.</description>
    </item>
    
    <item>
      <title>CockroachDB 数据库配置</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/database/cockroachdb-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/database/cockroachdb-configuration/</guid>
      <description>This section of the documentation describes how to use the Camunda process engine with the CockroachDB database.
CockroachDB is a highly scalable SQL database that operates as a distributed system. As such, it has different requirements and behavior compared to the other Camunda-supported databases. For this reason, we have adjusted the process engine behavior and added some additional mechanisms in order to make sure that the process engine is able to operate correctly on CockroachDB.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/admin/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/admin/configuration/</guid>
      <description>You can override the default configuration of Admin using a central configuration file located in app/admin/scripts/config.js. The following configuration options are available:
LDAP If you connect the Camunda Platform with the LDAP identity service, you have read-only access to the users and groups. Create new users and groups via the LDAP system, but not in the admin application. Find more information about how to configure the process engine in order to use the LDAP identity service here.</description>
    </item>
    
    <item>
      <title>Configuring JSON Handling</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/spin/json/05-configuring-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/spin/json/05-configuring-json/</guid>
      <description>Spin can be configured to change JSON parsing, writing and mapping settings, for example to tolerate documents that are not strictly compliant to the standard. Spin uses Jackson to handle JSON. The JSON data format therefore uses an instance of com.fasterxml.jackson.databind.ObjectMapper that can be configured using Spin&amp;rsquo;s configuration mechanism.
The data format class to register a configurator for is org.camunda.spin.impl.json.jackson.format.JacksonJsonDataFormat. An instance of this class provides a setter for an ObjectMapper that can be used to replace the default object mapper.</description>
    </item>
    
    <item>
      <title>Delete Batch</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/batch/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/batch/delete/</guid>
      <description>Deletes a batch by id, including all related jobs and job definitions. Optionally also deletes the batch history.
Method DELETE /batch/{id}
Parameters Path Parameters  Name Description   id The id of the batch to be deleted.   Query Parameters  Name Description   cascade true, if the historic batch and historic job logs for this batch should also be deleted.   Result This method returns no content.</description>
    </item>
    
    <item>
      <title>Error Events</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/error-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/error-events/</guid>
      <description>Error events are events which are triggered by a defined error.
 Business Errors vs. Technical Errors A BPMN error is meant for business errors - which are different than technical exceptions. So, this is different than Java exceptions - which are, by default, handled in their own way.
You might also want to check out the basics of Threading and Transactions in the User Guide first.
Defining an Error An error event definition references an error element.</description>
    </item>
    
    <item>
      <title>Event-based Gateway</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/gateways/event-based-gateway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/gateways/event-based-gateway/</guid>
      <description>The event-based Gateway allows you to make a decision based on events. Each outgoing sequence flow of the gateway needs to be connected to an intermediate catching event. When process execution reaches an event-based Gateway, the gateway acts like a wait state: execution is suspended. In addition, an event subscription is created for each outgoing sequence flow.
Note that the sequence flows running out of an event-based Gateway are different than ordinary sequence flows.</description>
    </item>
    
    <item>
      <title>FEEL Engine Legacy Behavior</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/dmn-engine/feel/legacy-behavior/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/dmn-engine/feel/legacy-behavior/</guid>
      <description>If you come from a Camunda Platform version &amp;lt;= 7.12.x and already use FEEL, it might be that you need to migrate your DMN models. To do this, please check out the Migration Guide, where we&amp;rsquo;ve documented all breaking changes.
If you don&amp;rsquo;t want to migrate your DMN models right now, you can also restore the legacy FEEL behavior by flipping a config flag:
 To see how this legacy behavior can be enabled again in the Camunda Platform, please see the dmnFeelEnableLegacyBehavior engine configuration property.</description>
    </item>
    
    <item>
      <title>Generating a Business Key</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/javascript/generating-businesskey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/javascript/generating-businesskey/</guid>
      <description>The following example shows how you can generate a business key using Javascript:
&amp;lt;form role=&amp;quot;form&amp;quot;&amp;gt; &amp;lt;script cam-script type=&amp;quot;text/form-script&amp;quot;&amp;gt; camForm.on(&#39;submit&#39;, function() { camForm.businessKey = &#39;some-generated-value&#39;; }); &amp;lt;/script&amp;gt; &amp;lt;/form&amp;gt;  As you can see, you can set the businessKey variable on the camForm object. The value you set will be submitted in the start process instance request.
Note that the business key can only be set when a process instance is started, not when completing a task.</description>
    </item>
    
    <item>
      <title>Get Case Diagram</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-definition/get-diagram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-definition/get-diagram/</guid>
      <description>Retrieves the diagram of a case definition.
Method GET /case-definition/{id}/diagram
GET /case-definition/key/{key}/diagram (returns the diagram for the latest version of the case definition which belongs to no tenant)
GET /case-definition/key/{key}/tenant-id/{tenant-id}/diagram (returns the diagram for the latest version of the case definition for tenant)
Parameters Path Parameters  Name Description   id The id of the case definition.   key The key of the case definition (the latest version thereof) to be retrieved.</description>
    </item>
    
    <item>
      <title>Get Case Execution Count (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/post-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/post-query-count/</guid>
      <description>Queries for the number of case executions that fulfill the given parameters. This method takes the same message body as the Get Case Executions (POST) method and therefore it is slightly more powerful than the Get Case Execution Count method.
Method POST /case-instance/count
Parameters Request Body A JSON object with the following properties:
 Name Description   caseExecutionId Filter by a case execution id.   caseInstanceId Filter by a case instance id.</description>
    </item>
    
    <item>
      <title>Get Case Instance Count (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/post-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/post-query-count/</guid>
      <description>Queries for the number of case instances that fulfill the given parameters. This method takes the same message body as the Get Case Instance (POST) method and therefore it is slightly more powerful than the Get Case Instance Count method.
Method POST /case-instance/count
Parameters Request Body A JSON object with the following properties:
 Name Description   caseInstanceId Filter by a case instance id.   businessKey Filter by case instance business key.</description>
    </item>
    
    <item>
      <title>Get Cleanable Batch Report</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/batch/get-cleanable-batch-report/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/batch/get-cleanable-batch-report/</guid>
      <description>Retrieves a report about a historic batch operations relevant to history cleanup (see History cleanup) so that you can tune the history time to live. These reports include the count of the finished batches, cleanable batches and type of the batch. The size of the result set can be retrieved by using the Get Cleanable Batch Report Count method.
Please note: The history time to live for batch operations does not support Multi-Tenancy.</description>
    </item>
    
    <item>
      <title>Get Decision Diagram</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/decision-definition/get-diagram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/decision-definition/get-diagram/</guid>
      <description>Retrieves the diagram of a decision definition.
Method GET /decision-definition/{id}/diagram
GET /decision-definition/key/{key}/diagram (returns the diagram for the latest version of the decision definition which belongs to no tenant)
GET /decision-definition/key/{key}/tenant-id/{tenant-id}/diagram (returns the diagram of the latest version of the decision definition for tenant)
Parameters Path Parameters  Name Description   id The id of the decision definition.   key The key of the decision definition (the latest version thereof) to be retrieved.</description>
    </item>
    
    <item>
      <title>Get Decision Requirements Diagram</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/decision-requirements-definition/get-diagram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/decision-requirements-definition/get-diagram/</guid>
      <description>Retrieves the diagram of a decision requirements definition.
Method GET /decision-requirements-definition/{id}/diagram
GET /decision-requirements-definition/key/{key}/diagram (returns the diagram for the latest version of the decision requirements definition which belongs to no tenant)
GET /decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/diagram (returns the diagram of the latest version of the decision requirements definition for tenant)
Parameters Path Parameters  Name Description   id The id of the decision requirements definition.   key The key of the decision requirements definition (the latest version thereof) to be retrieved.</description>
    </item>
    
    <item>
      <title>Get Definitions</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get-query/</guid>
      <description>Queries for process definitions that fulfill given parameters. Parameters may be the properties of process definitions, such as the name, key or version. The size of the result set can be retrieved by using the Get Definition Count method.
Method GET /process-definition
Parameters Query Parameters  Name Description   processDefinitionId Filter by process definition id.   processDefinitionIdIn Filter by process definition ids.   name Filter by process definition name.</description>
    </item>
    
    <item>
      <title>Get Deployment Resources</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/deployment/get-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/deployment/get-resources/</guid>
      <description>Retrieves all deployment resources of a given deployment.
Method GET /deployment/{id}/resources
Parameters Path Parameters  Name Description   id The id of the deployment to retrieve the deployment resources for.   Result A JSON array containing all deployment resources of the given deployment. Each object has the following properties:
 Name Value Description   id String The id of the deployment resource.   name String The name of the deployment resource.</description>
    </item>
    
    <item>
      <title>Get Event Subscriptions Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/event-subscription/get-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/event-subscription/get-query-count/</guid>
      <description>Queries for the number of event subscriptions that fulfill given parameters. Takes the same parameters as the Get Event Subscription method.
Method GET /event-subscription/count
Parameters Query Parameters  Name Description   eventSubscriptionId Only select subscription with the given id.   eventName Only select subscriptions for events with the given name.   eventType Only select subscriptions for events with the given type. Valid values: message, signal, compensate, and conditional.</description>
    </item>
    
    <item>
      <title>Get Execution Count (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/execution/post-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/execution/post-query-count/</guid>
      <description>Queries for the number of executions that fulfill given parameters. This method takes the same message body as the Get Executions (POST) method and therefore it is slightly more powerful than the Get Execution Count method.
Method POST /execution/count
Parameters Request Body A JSON object with the following properties:
 Name Description   businessKey Filter by the business key of the process instances the executions belong to.   processDefinitionId Filter by the process definition the executions run on.</description>
    </item>
    
    <item>
      <title>Get External Task Count (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/post-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/post-query-count/</guid>
      <description>Queries for the number of external tasks that fulfill given parameters. This method takes the same message body as the Get External Tasks (POST) method.
Method POST /external-task/count
Parameters Request Body A JSON object with the following properties:
 Name Description   externalTaskId Filter by an external task&#39;s id.   externalTaskIdIn Filter by the comma-separated list of external task ids.   topicName Filter by an external task topic.</description>
    </item>
    
    <item>
      <title>Get External Task Log Count (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/external-task-log/post-external-task-log-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/external-task-log/post-external-task-log-query-count/</guid>
      <description>Queries for the number of historic external task logs that fulfill the given parameters. This method takes the same message body as the Get External Task Logs (POST) method and therefore it is slightly more powerful than the Get External Task Log Count method.
Method POST /history/external-task-log/count
Parameters Request Body A JSON object with the following properties:
 Name Description   logId Filter by historic external task log id.</description>
    </item>
    
    <item>
      <title>Get Form Key</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/get-form-key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/get-form-key/</guid>
      <description>Retrieves the form key for a task. The form key corresponds to the FormData#formKey property in the engine. This key can be used to do task-specific form rendering in client applications. Additionally, the context path of the containing process application is returned.
Method GET /task/{id}/form
Parameters Path Parameters  Name Description   id The id of the task to retrieve the form for.   Result A JSON object containing the form key.</description>
    </item>
    
    <item>
      <title>Get Historic Activity Instance Count (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/activity-instance/post-activity-instance-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/activity-instance/post-activity-instance-query-count/</guid>
      <description>Queries for the number of historic activity instances that fulfill the given parameters.
Method POST /history/activity-instance/count
Parameters Request Body A JSON object with the following properties:
 Name Description   activityInstanceId Filter by activity instance id.   processInstanceId Filter by process instance id.   processDefinitionId Filter by process definition id.   executionId Filter by the id of the execution that executed the activity instance.   activityId Filter by the activity id (according to BPMN 2.</description>
    </item>
    
    <item>
      <title>Get Historic Case Instance Count (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-instance/post-case-instance-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/case-instance/post-case-instance-query-count/</guid>
      <description>Queries for the number of historic case instances that fulfill the given parameters. This method takes the same message body as the Get Historic Case Instances (POST) method and therefore it is slightly more powerful than the Get Historic Case Instance Count method.
Method POST /history/case-instance/count
Parameters Request Body A JSON object with the following properties:
 Name Description   caseInstanceId Filter by case instance id.   caseInstanceIds Filter by case instance ids.</description>
    </item>
    
    <item>
      <title>Get Instances</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/get-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/get-query/</guid>
      <description>Queries for process instances that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of process instances. The size of the result set can be retrieved by using the Get Instance Count method.
Method GET /process-instance
Parameters Query Parameters  Name Description   processInstanceIds Filter by a comma-separated list of process instance ids.   businessKey Filter by process instance business key.   businessKeyLike Filter by process instance business key that the parameter is a substring of.</description>
    </item>
    
    <item>
      <title>Get Job Count (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job/post-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job/post-query-count/</guid>
      <description>Queries for jobs that fulfill given parameters. This method takes the same message body as the Get Jobs (POST) method and therefore it is slightly more powerful than the Get Job Count method.
Method POST /job/count
Parameters Request Body A JSON object with the following properties:
 Name Description   jobId Filter by job id.   jobIds Filter by a JSON array of job ids.   jobDefinitionId Only select jobs which exist for the given job definition.</description>
    </item>
    
    <item>
      <title>Get Job Definition Count (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job-definition/post-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job-definition/post-query-count/</guid>
      <description>Queries for the number of job definitions that fulfill given parameters. This method takes the same message body as the Get Job Definitions (POST) method and therefore it is slightly more powerful than the Get Job Definition Count method.
Method POST /job-definition/count
Parameters Request Body A JSON object with the following properties:
 Name Description   jobDefinitionId Filter by job definition id.   activityIdIn Only include job definitions which belong to one of the passed activity ids.</description>
    </item>
    
    <item>
      <title>Get Job Log Count (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/job-log/post-job-log-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/job-log/post-job-log-query-count/</guid>
      <description>Queries for the number of historic job logs that fulfill the given parameters. This method takes the same message body as the Get Job Logs (POST) method and therefore it is slightly more powerful than the Get Job Log Count method.
Method POST /history/job-log/count
Parameters Request Body A JSON object with the following properties:
 Name Description   logId Filter by historic job log id.   jobId Filter by job id.</description>
    </item>
    
    <item>
      <title>Get Process Instance Count (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-instance/post-process-instance-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-instance/post-process-instance-query-count/</guid>
      <description>Queries for the number of historic process instances that fulfill the given parameters. This method takes the same message body as the Get Process Instances (POST) method and therefore it is slightly more powerful than the Get Process Instance Count method.
Method POST /history/process-instance/count
Parameters Request Body A JSON object with the following properties:
 Name Description   processInstanceId Filter by process instance id.   processInstanceIds Filter by process instance ids.</description>
    </item>
    
    <item>
      <title>Get Started with the Camunda RPA Bridge</title>
      <link>http://camunda-cn.shaochenfeng.com/installation/camunda-bpm-rpa-bridge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/installation/camunda-bpm-rpa-bridge/</guid>
      <description>This page describes the steps to orchestrate and execute RPA bots from Camunda Platform using the Camunda Platform RPA Bridge.
Enterprise FeaturePlease note that the RPA bridge is only available as enterprise edition.
Check the Camunda enterprise homepagefor more information or get yourfree trial version.Requirements Java Please make sure that you have the Java Runtime Environment 8+ installed.
You can verify this by using your terminal, shell, or command line:</description>
    </item>
    
    <item>
      <title>Get Task Count By Candidate Group</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/report/get-candidate-group-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/report/get-candidate-group-count/</guid>
      <description>Retrieves the number of tasks for each candidate group.
Method GET /task/report/candidate-group-count
Result A JSON array of task counts grouped by candidate groups. Each object has the following properties:
 Name Value Description   groupName String The name of the candidate group. If there are tasks without a group name, the value will be null   taskCount Number The number of tasks which have the group name as candidate group.</description>
    </item>
    
    <item>
      <title>Get Task Report (Historic)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/task/get-task-report/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/task/get-task-report/</guid>
      <description>Retrieves a report of completed tasks. When the report type is set to count, the report contains a list of completed task counts where an entry contains the task name, the definition key of the task, the process definition id, the process definition key, the process definition name and the count of how many tasks were completed for the specified key in a given period. When the report type is set to duration, the report contains a minimum, maximum and average duration value of all completed task instances in a given period.</description>
    </item>
    
    <item>
      <title>Get Variable Instance Count (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/variable-instance/post-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/variable-instance/post-query-count/</guid>
      <description>Query for the number of variable instances that fulfill given parameters. This method takes the same message body as the Get Variable Instances (POST) method and therefore it is slightly more powerful than the Get Variable Instance Count method.
Method POST /variable-instance/count
Parameters Request Body A JSON object with the following properties:
 Name Description   variableName Filter by variable instance name.   variableNameLike Filter by the variable instance name.</description>
    </item>
    
    <item>
      <title>Get Variable Instances (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/variable-instance/post-variable-instance-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/variable-instance/post-variable-instance-query/</guid>
      <description>Queries for historic variable instances that fulfill the given parameters. This method is slightly more powerful than the Get Variable Instances method because it allows filtering by variable values of the different types String, Number or Boolean.
Method POST /history/variable-instance
Parameters Query Parameters  firstResult Pagination of results. Specifies the index of the first result to return.   maxResults Pagination of results. Specifies the maximum number of results to return.</description>
    </item>
    
    <item>
      <title>Get Variable Instances (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/variable-instance/post-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/variable-instance/post-query/</guid>
      <description>Query for variable instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Variable Instances method because it allows filtering by multiple variable instances of types String, Number or Boolean.
Method POST /variable-instance
Parameters Query Parameters  Name Description   firstResult Pagination of results. Specifies the index of the first result to return.   maxResults Pagination of results. Specifies the maximum number of results to return.</description>
    </item>
    
    <item>
      <title>History for DMN Decisions</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/decisions/history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/decisions/history/</guid>
      <description>After a decision definition has been evaluated either from a BPMN process, CMMN case or through the Decision Service, the inputs and outputs are saved in the History of the platform. The history entity is of type HistoricDecisionInstance and has the event type evaluate.
For details about the history mechanism as such, refer to the History and Audit Event Log.
History LevelHistory level FULL is required. Otherwise, no history for decisions is created.</description>
    </item>
    
    <item>
      <title>Instance Restart</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/bpmn/process-instance-restart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/bpmn/process-instance-restart/</guid>
      <description>Enterprise FeaturePlease note that this feature is only included in the enterprise edition of the Camunda Platform, it is not available in the community edition.
Check the Camunda enterprise homepagefor more information or get yourfree trial version.In the history view, you can restart process instances individually or by a batch operation. A restart can consist of one or multiple of the following operations:</description>
    </item>
    
    <item>
      <title>Mapping XML</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/spin/xml/05-mapping-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/spin/xml/05-mapping-xml/</guid>
      <description>Spin can deserialize XML to Java objects and serialize the annotated Java objects to XML by integrating mapping features into its fluent API. JAXB annotations can be added to the involved Java classes to configure the (de-)serialization process but are not required.
Mapping between Representations: Assume we have a class Customer defined as follows:
@XmlRootElement(name=&amp;quot;customer&amp;quot;, namespace=&amp;quot;http://camunda.org/test&amp;quot;) public class Customer { private String name; @XmlElement(namespace=&amp;quot;http://camunda.org/test&amp;quot;) public String getName() { return name; } public void setName(String name) { this.</description>
    </item>
    
    <item>
      <title>Milestones</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/cmmn11/milestone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/cmmn11/milestone/</guid>
      <description>A milestone is used to represent achievable targets within the case. It is not associated with any work but rather marks that certain conditions have been reached within the case. As a milestone is a regular plan item definition, a milestone&amp;rsquo;s completion may be used as entry criteria for other tasks and stages. This way, a milestone can be used to bring logical stages within a case into order.</description>
    </item>
    
    <item>
      <title>MySQL 数据库配置</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/database/mysql-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/database/mysql-configuration/</guid>
      <description>This section documents the supported MySQL configuration.
Database Schema The engine&amp;rsquo;s MySQL database schema does not support milliseconds precision for the column types TIMESTAMP and DATETIME: I.e., a to be stored value is rounded to the next or previous second, e.g., 2021-01-01 15:00:46.731 is rounded to 2021-01-01 15:00:47.
Heads Up!The missing millisecond’s precision for date/time values impacts the process engine&amp;rsquo;s behavior. Please read how to configure the MySQL JDBC Driver to ensure that date/time values are handled correctly.</description>
    </item>
    
    <item>
      <title>Process Engine Configuration</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/deployment-descriptors/tags/process-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/deployment-descriptors/tags/process-engine/</guid>
      <description>The process engine configuration can be placed in both processes.xml and the bpm-platform.xml files. If the process engine is configured in either or both of those files, it will be bootstrapped by the Camunda Platform infrastructure and be made available through BpmPlatform.getProcessEngineService().getProcessEngine(&amp;quot;name of process engine&amp;quot;).
Example The following example shows an XML snippet which can be placed in both processes.xml and/or bpm-platform.xml.
&amp;lt;process-engine name=&amp;quot;default&amp;quot;&amp;gt; &amp;lt;job-acquisition&amp;gt;default&amp;lt;/job-acquisition&amp;gt; &amp;lt;configuration&amp;gt;org.camunda.bpm.engine.impl.cfg.StandaloneProcessEngineConfiguration&amp;lt;/configuration&amp;gt; &amp;lt;datasource&amp;gt;java:jdbc/ProcessEngine&amp;lt;/datasource&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;property name=&amp;quot;history&amp;quot;&amp;gt;full&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;databaseSchemaUpdate&amp;quot;&amp;gt;true&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;authorizationEnabled&amp;quot;&amp;gt;true&amp;lt;/property&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/process-engine&amp;gt;  Syntax Reference  Tag name  Parent tag name Required?</description>
    </item>
    
    <item>
      <title>Process Instance Modification</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/bpmn/process-instance-modification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/bpmn/process-instance-modification/</guid>
      <description>Enterprise FeaturePlease note that this feature is only included in the enterprise edition of the Camunda Platform, it is not available in the community edition.
Check the Camunda enterprise homepagefor more information or get yourfree trial version.In the detail view, you can modify the process instance&amp;rsquo;s execution state. A modification can be one or multiple of the following operations:
 Starting execution before an activity Starting execution after an activity on its single outgoing sequence flow Canceling an activity instance or all instances of an activity  Perform a Modification A modification consists of multiple instructions, which are displayed in the modification tab at the bottom half of the screen (1).</description>
    </item>
    
    <item>
      <title>Process applications</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/spring-boot-integration/process-applications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/spring-boot-integration/process-applications/</guid>
      <description>By default, the camunda-spring-boot-starter is configured to use the SpringProcessEngineConfiguration auto deployment feature. Since 1.2.0 you also have the possibility to do so via SpringBootProcessApplication. This disables the SpringProcessEngineConfiguration auto-deploy feature and instead uses the required META-INF/processes.xml as an indicator for resource scanning. This also allows all processes.xml configuration features described here.
To use it, just add the @EnableProcessApplication annotation to your Spring Boot application class:
@SpringBootApplication @EnableProcessApplication(&amp;quot;myProcessApplicationName&amp;quot;) public class MyApplication { .</description>
    </item>
    
    <item>
      <title>Repository Service</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/model-api/bpmn-model-api/respository-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/model-api/bpmn-model-api/respository-service/</guid>
      <description>It is also possible to access the BPMN model instance by the process definition id using the Repository Service, as the following incomplete test sample code shows. Please see the generate-jsf-form quickstart for a complete example.
public void testRepositoryService() { runtimeService.startProcessInstanceByKey(PROCESS_KEY); String processDefinitionId = repositoryService.createProcessDefinitionQuery() .processDefinitionKey(PROCESS_KEY).singleResult().getId(); BpmnModelInstance modelInstance = repositoryService.getBpmnModelInstance(processDefinitionId); }  </description>
    </item>
    
    <item>
      <title>Repository Service</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/model-api/cmmn-model-api/repository-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/model-api/cmmn-model-api/repository-service/</guid>
      <description>It is also possible to access the CMMN model instance by the case definition id using the Repository Service, as the following incomplete test sample code shows.
public void testRepositoryService() { String caseDefinitionId = repositoryService.createCaseDefinitionQuery() .caseDefinitionKey(CASE_KEY).singleResult().getId(); CmmnModelInstance modelInstance = repositoryService .getCmmnModelInstance(caseDefinitionId); }  </description>
    </item>
    
    <item>
      <title>Repository Service</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/model-api/dmn-model-api/repository-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/model-api/dmn-model-api/repository-service/</guid>
      <description>It is also possible to access the DMN model instance by the decision definition id using the Repository Service, as the following incomplete test sample code shows:
public void testRepositoryService() { String decisionDefinitionId = repositoryService.createDecisionDefinitionQuery() .decisionDefinitionKey(DECISION_KEY).singleResult().getId(); DmnModelInstance modelInstance = repositoryService .getDmnModelInstance(decisionDefinitionId); }  </description>
    </item>
    
    <item>
      <title>Script Task 脚本任务</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/tasks/script-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/tasks/script-task/</guid>
      <description>脚本任务是自动活动。当流程执行到达脚本任务时，执行相应的脚本。
通过指定脚本内容和脚本格式来定义脚本任务：
&amp;lt;scriptTask id=&amp;quot;theScriptTask&amp;quot; name=&amp;quot;Execute script&amp;quot; scriptFormat=&amp;quot;groovy&amp;quot;&amp;gt; &amp;lt;script&amp;gt; sum = 0 for ( i in inputArray ) { sum += i } &amp;lt;/script&amp;gt; &amp;lt;/scriptTask&amp;gt;  scriptFormat属性的值必须是一个与JSR-223（Java平台的脚本）兼容的名称。如果你想使用一个（与JSR-223兼容的）脚本引擎，你需要在classpath中添加相应的jar，并使用适当的名称。
脚本源代码必须作为script子元素的文本内容添加。 或者，源代码可以被指定为表达式或外部资源。更多 关于提供脚本源代码的可能方式的更多信息，请参见相应的 用户指南 的 脚本来源 章节。
关于流程引擎中脚本的一般信息，请参见用户指南中的脚本部分。
支持的脚本语言Camunda平台应该可以与大多数JSR-223兼容的脚本引擎实现协同工作。我们测试了Groovy、JavaScript、JRuby和Jython的集成。请参阅用户指南 的 第三方依赖性部分了解更多细节。
脚本中的变量 所有通过执行到达脚本任务中的流程变量都可以在脚本中使用。在下面的例子中，脚本变量inputArray实际上是一个流程变量（一个整数的列表）。
&amp;lt;script&amp;gt; sum = 0 for ( i in inputArray ) { sum += i } &amp;lt;/script&amp;gt;  也可以在脚本中设置过程变量。变量可以通过使用VariableScope接口提供的setVariable(..)方法来设置。
&amp;lt;script&amp;gt; sum = 0 for ( i in inputArray ) { sum += i } execution.</description>
    </item>
    
    <item>
      <title>Selects</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/controls/select/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/controls/select/</guid>
      <description>Select boxes are HTML controls of the form of
&amp;lt;select&amp;gt;&amp;lt;/select&amp;gt;  Binding to a Process Variable A select box can be bound to a process variable using the cam-variable-name directive:
&amp;lt;select cam-variable-name=&amp;quot;foo&amp;quot; cam-variable-type=&amp;quot;String&amp;quot;&amp;gt; &amp;lt;option&amp;gt;bar&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;zar&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt;  Supported Variable Types The select box supports the same value types as &amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;.
Populating the Options from a Variable The &amp;lt;option&amp;gt; entries can be populated using a variable. The name of the variable can be provided using the cam-choices directive:</description>
    </item>
    
    <item>
      <title>Set Incident Annotation</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/incident/set-annotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/incident/set-annotation/</guid>
      <description>Sets the annotation of an incident with the given id.
Method PUT /incident/{id}/annotation
Parameters Path Parameters  Name Description   id The id of the incident to set the annotation at.   Request Body A JSON object with the following properties:
 Name Description   annotation An arbitrary text annotation set by a user.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.</description>
    </item>
    
    <item>
      <title>Spring-Based Testing</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/spring-framework-integration/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/spring-framework-integration/testing/</guid>
      <description>When integrating with Spring, business processes can be tested very easily (in scope 2, see Testing Scopes) using the standard Camunda testing facilities. The following example shows how a business process is tested in a typical Spring-based unit test:
@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(&amp;quot;classpath:org/camunda/bpm/engine/spring/test/junit4/springTypicalUsageTest-context.xml&amp;quot;) public class MyBusinessProcessTest { @Autowired private RuntimeService runtimeService; @Autowired private TaskService taskService; @Autowired @Rule public ProcessEngineRule processEngineRule; @Test @Deployment public void simpleProcessTest() { runtimeService.startProcessInstanceByKey(&amp;quot;simpleProcess&amp;quot;); Task task = taskService.createTaskQuery().singleResult(); assertEquals(&amp;quot;My Task&amp;quot;, task.</description>
    </item>
    
    <item>
      <title>Task Lifecycle</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/tasklist/task-lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/tasklist/task-lifecycle/</guid>
      <description>The diagram below shows the task lifecycle and supported transitions supported by Camunda Platform. To get to know how to programmatically work with the lifecycle in your application, refer to the Java-API Reference.
</description>
    </item>
    
    <item>
      <title>Testing Decisions with the DMN Engine</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/dmn-engine/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/dmn-engine/testing/</guid>
      <description>To easily test DMN decisions in a JUnit test, the DMN engine provides a JUnit Rule. The DmnEngineRulecreates a new default DMN engine. The DMN engine can be used in test cases to parse and evaluate decisions.
public class DecisionTest { @Rule public DmnEngineRule dmnEngineRule = new DmnEngineRule(); @Test public void test() { DmnEngine dmnEngine = dmnEngineRule.getDmnEngine(); // load DMN file InputStream inputStream = ...; //create and add variables VariableMap variables = Variables.</description>
    </item>
    
    <item>
      <title>The Camunda JBoss/WildFly Subsystem</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/runtime-container-integration/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/runtime-container-integration/jboss/</guid>
      <description>Installation GuideIf you download a full distribution, the Camunda JBoss/Wildfly subsystem is readily installed into the application server.
Read the installation guide to learn how to install the Camunda JBoss/Wildfly subsystem into your JBoss AS 7 or Wildfly Server.
Camunda Platform provides advanced integration for JBoss AS 7 and Wildfly in the form of a custom JBoss/Wildfly Subsystem.
The most prominent features are:
 Deploy the process engine as shared JBoss module.</description>
    </item>
    
    <item>
      <title>Update Filter</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/filter/put-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/filter/put-update/</guid>
      <description>Updates an existing filter.
Security ConsiderationThe query parameter of the request body takes a JSON-serialized query. Some query types (e.g., task queries) allow to specify EL expressions in their parameters and may therefore be abused for remote code execution. See the section on security considerations for custom code in the user guide for details.
Method PUT /filter/{id}
Parameters Path Parameters  Name Description   id The id of the filter to be updated.</description>
    </item>
    
    <item>
      <title>Update group</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/group/put-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/group/put-update/</guid>
      <description>Updates a given group by id.
Method PUT /group/{id}
Parameters Path Parameters  Name Type Description   id String The id of the group.   Request Body A JSON object with the following properties:
 Name Type Description   id String The id of the group.   name String The name of the group.   type String The type of the group.   Result This method returns no content.</description>
    </item>
    
    <item>
      <title>Update tenant</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/put-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/put-update/</guid>
      <description>Updates a given tenant.
Method PUT /tenant/{id}
Parameters Path Parameters  Name Type Description   id String The id of the tenant.   Request Body A JSON object with the following properties:
 Name Type Description   id String The id of the tenant.   name String The name of the tenant.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.</description>
    </item>
    
    <item>
      <title>User Resource Options</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/user/options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/user/options/</guid>
      <description>The /user resource supports two custom OPTIONS requests, one for the resource as such and one for individual user instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the /user resource. If the user can perform an operation or not may depend on various things, including the user&amp;rsquo;s authorizations to interact with this resource and the internal configuration of the process engine.</description>
    </item>
    
    <item>
      <title>Variables in the REST API</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/overview/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/overview/variables/</guid>
      <description>In the REST API, process variables are represented by JSON objects of the following form:
{ &amp;quot;type&amp;quot;: &amp;quot;String&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;Some value&amp;quot;, &amp;quot;valueInfo&amp;quot;: {} }  The REST API supports the Value Types supported by the process engine.
Capitalization of Type Names In the REST API, the type names start with a capital letter, i.e., String instead of string.
Serialized and Deserialized Object Values Object Values are instances of (non primitive) Java types.</description>
    </item>
    
    <item>
      <title>Working with Java Objects</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/java-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/java-objects/</guid>
      <description>This section explains how to work with serialized Java Objects in embedded task forms.
Out of the box, you can only work with Java Objects which are serialized in JSON format If Java Classes are serialized using JAX-B, you need to add custom XML parsing and writing logic to the embedded form. Java Objects serialized using Java Serialization cannot be used in forms.
Fetching an existing Serialized Java Object Variable The Form SDK will only fetch those variables which are actually used in a form.</description>
    </item>
    
    <item>
      <title>修改流程实例</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/process-instance-modification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/process-instance-modification/</guid>
      <description>虽然流程定义模型必须包含以何种顺序执行活动的顺序流，但有时也需要灵活地再次启动一个活动或取消一个正在运行的活动。例如，当流程模型存在错误（例如顺序流条件写错了）并且运行中的流程实例需要被纠正时，则以下API可以提供帮助：
 修复流程实例，其中一些步骤必须重复执行或跳过 将流程实例从流程定义的一个版本迁移到另一个版本 测试阶段：可以跳过或重复做一些活动，以便对个别流程段进行独立测试。  为了执行这样的操作，流程引擎提供 流程实例修改API ，包括 RuntimeService.createProcessInstanceModification(..)或 RuntimeService.createModification(...)。这些API允许通过使用流式的构造器在一次调用中指定多个 修改指令 。而且它还能做到：
 在一个活动之前就开始执行 在离开活动的序列流上开始执行 取消一个正在运行的活动实例 取消一个给定活动的所有运行实例 设置变量  流程实例自己修改自己不建议流程实例自己修改自己 ，试图修改它自己的流程实例的行为会导致不确定的结果，这应该被避免。
Enterprise FeatureCamunda企业版提供了一个用户界面，可以在Camunda Cockpit的BPMN图上直观地对流程实例的进行修改。
Check the Camunda enterprise homepagefor more information or get yourfree trial version.修改流程实例——案例 作为一个例子，请考虑以下流程模型。
 该模型显示了一个处理贷款申请的简单流程。让我们假设一份贷款申请已经到达，贷款申请已经被评估，并被确定为需要拒绝。这意味着，该流程实例有以下活动实例状态。
ProcessInstance Decline Loan Application  现在，执行 Decline Loan Application 任务的工作人员认识到了评估结果是错误的，并得出结论，该申请还是应该被接受。虽然这种灵活性并不是流程的一部分，但对流程实例的修改允许纠正运行中的流程实例。使用下面的API调用就可以做到这一点：
ProcessInstance processInstance = runtimeService.createProcessInstanceQuery().singleResult(); runtimeService.createProcessInstanceModification(processInstance.getId()) .startBeforeActivity(&amp;quot;acceptLoanApplication&amp;quot;) .cancelAllForActivity(&amp;quot;declineLoanApplication&amp;quot;) .execute();  这个命令首先在活动 Accept Loan Application 之前开始执行，直到达到一个等待状态&amp;ndash;在这种情况下是用户任务的创建。之后，它取消了活动 Decline Loan Application 的所有运行实例。在工作者的任务列表中， Decline 任务已被删除，而 Accept 任务已出现。最后活动实例的状态是：</description>
    </item>
    
    <item>
      <title>扩展（插件）</title>
      <link>http://camunda-cn.shaochenfeng.com/introduction/extensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/introduction/extensions/</guid>
      <description>Camunda平台是由Camunda与社区合作开发的一个开源项目。“核心项目”（即 &amp;ldquo;Camunda平台&amp;rdquo;）是Camunda平台产品的基础，该产品由Camunda以商业形式提供。商业化的Camunda平台产品包含额外的（非开源）功能，并通过提供企业支持和错误修复版本等服务提供给Camunda平台客户。
社区扩展 Camunda支持社区在Camunda平台的框架下建立更多的社区扩展。这些社区扩展由社区维护，不属于Camunda平台的商业产品。
Chamunda支持Camunda does not support community extensions as part of its commercial services to enterprise subscription customers
The Camunda Community Hub is a GitHub Organization that serves as the home of Camunda open source community-contributed extensions. You can migrate an extension you&amp;rsquo;ve built to the Hub, search for existing extensions, or get started with open source by helping community extension maintainers with open issue or pull request triage.</description>
    </item>
    
    <item>
      <title>运行Camunda平台</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/camunda-bpm-run/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/camunda-bpm-run/</guid>
      <description>This guide gives an introduction to Camunda Platform Run, a pre-packaged, lightweight distribution of the Camunda Platform. Camunda Platform Run is easy to configure and does not require Java knowledge.
Prerequisites and audience To use this guide, you should at least know what Camunda Platform is and what it does. Check out the Get Started guides if you have never used Camunda Platform before. The Installation guide is also worth looking at if you are completely new to Camunda Platform.</description>
    </item>
    
    <item>
      <title>重启/恢复流程实例</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/process-instance-restart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/process-instance-restart/</guid>
      <description>在流程实例终止后，其历史数据仍然存在，并且可以被访问以重启流程实例，前提是历史级别被设置为FULL。 例如，当流程没有以期望的方式终止时，重启流程实例是有用的。这个API的使用的其他可能情况有：
 恢复被错误地取消的流程实例的到最后状态 由于错误路由导致流程实例终止后，重启流程实例  为了执行这样的操作，流程引擎提供了 流程实例重启API RuntimeService.restartProcessInstances(..) 。该API允许通过使用流式构建器在一次调用中指定多个实例化指令。
请注意，这些操作也可以通过REST方式进行。重启流程实例和重启流程实例（async）
流程实例重启的例子 考虑以下流程模型，其中红点标志着活动任务：
让我们假设流程实例已经被别人用以下代码从外部取消了：
ProcessInstance processInstance = runtimeService.createProcessInstanceQuery().singleResult(); runtimeService.deleteProcessInstance(processInstance.getId(), &amp;quot;any reason&amp;quot;);  之后，我们决定恢复该流程实例到最后状态：
runtimeService.restartProcessInstance(processInstance.getProcessDefinitionId()) .startBeforeActivity(&amp;quot;receivePayment&amp;quot;) .startBeforeActivity(&amp;quot;shipOrder&amp;quot;) .processInstanceIds(processInstance.getId()) .execute();  流程实例已经用最后一组变量重启了。然而，在重启的流程实例中，只有全局变量被恢复了。 本地变量还需要调用 RuntimeService.setVariableLocal(..) 手动设置。
从技术上讲，创建的是一个新的流程实例。
请注意: 历史流程和重启的流程实例的id是不同的。
操作语义 在下文中，将描述流程实例恢复功能的确切语义。建议阅读本节，以充分了解该功能的效果、能力和限制。
实例化指令类型 流式流程实例重启构建器提供了以下的方法，可以调用。
 startBeforeActivity(String activityId) startAfterActivity(String activityId) startTransition(String transitionId)  关于指令类型的信息，请参考类似的 修改指令类型 section.
选择要重启的流程实例 可以通过提供一组流程实例ID来选择流程实例进行重启 或者提供一个历史流程实例查询。也可以同时指定一个流程实例id列表和一个查询。 然后，要重启的流程实例将是所产生的集合的并集。
流程实例列表 应该被重启的流程实例可以是一个流程实例ID的列表。
ProcessDefinition processDefinition = ...; List&amp;lt;String&amp;gt; processInstanceIds = ...; runtimeService.</description>
    </item>
    
    <item>
      <title>Escalation Events</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/escalation-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/escalation-events/</guid>
      <description>Escalation events are events which reference a named escalation. They are mostly used to communicate from a subprocess to an upper process. Unlike an error, an escalation event is non critical and execution continues at the location of throwing.
 Defining Escalation An escalation event definition is declared by using the escalationEventDefinition element. The attribute escalationRef references an escalation element declared as a child element of the definitions root element.</description>
    </item>
    
    <item>
      <title>Process Instance Migration</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/bpmn/process-instance-migration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/bpmn/process-instance-migration/</guid>
      <description>Enterprise FeaturePlease note that this feature is only included in the enterprise edition of the Camunda Platform, it is not available in the community edition.
Check the Camunda enterprise homepagefor more information or get yourfree trial version.You can migrate running process instances from their current process definition version to another version of that definition or another process definition altogether. You can access the migration page by navigating to the process definition or instance view of a process with multiple versions.</description>
    </item>
    
    <item>
      <title>CDI Event Bridge</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/cdi-java-ee-integration/the-cdi-event-bridge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/cdi-java-ee-integration/the-cdi-event-bridge/</guid>
      <description>The process engine can be hooked-up to the CDI event bus. We call this the &amp;ldquo;CDI Event Bridge&amp;rdquo;. This allows us to be notified of process events using standard CDI event mechanisms. In order to enable CDI event support for an embedded process engine, enable the corresponding parse listener in the configuration:
&amp;lt;property name=&amp;quot;postParseListeners&amp;quot;&amp;gt; &amp;lt;list&amp;gt; &amp;lt;bean class=&amp;quot;org.camunda.bpm.engine.cdi.impl.event.CdiEventSupportBpmnParseListener&amp;quot; /&amp;gt; &amp;lt;/list&amp;gt; &amp;lt;/property&amp;gt;  Now the engine is configured for publishing events using the CDI event bus.</description>
    </item>
    
    <item>
      <title>Claim Task</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-claim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-claim/</guid>
      <description>Claims a task for a specific user.
Note: The difference with the Set Assignee method is that here a check is performed to see if the task already has a user assigned to it.
Method POST /task/{id}/claim
Parameters Path Parameters  Name Description   id The id of the task to claim.   Request Body A JSON object with the following properties:
 Name Description   userId The id of the user that claims the task.</description>
    </item>
    
    <item>
      <title>Clear Incident Annotation</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/incident/clear-annotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/incident/clear-annotation/</guid>
      <description>Clears the annotation of an incident with the given id.
Method DELETE /incident/{id}/annotation
Parameters Path Parameters  Name Description   id The id of the incident to clear the annotation at.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.   400 application/json Returned if no incident can be found for the given id. See the Introduction for the error response format.</description>
    </item>
    
    <item>
      <title>Complete Case Instance</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/post-complete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/post-complete/</guid>
      <description>Performs a transition from ACTIVE state to COMPLETED state. In relation to the state transition, it is possible to update or delete case instance variables (please note: deletion precedes update).
Method POST /case-instance/{id}/complete
Parameters Path Parameters  Name Description   id The id of the case instance to complete.   Request Body A JSON object with the following properties:
 Name Description   variables A JSON object containing variable key-value pairs.</description>
    </item>
    
    <item>
      <title>Configuring XML Handling</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/spin/xml/06-configuring-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/spin/xml/06-configuring-xml/</guid>
      <description>Spin can be configured to change XML parsing, writing and mapping settings. Spin uses JAXB and DOM to handle XML. The XML data format therefore uses instances of javax.xml.parsers.DocumentBuilderFactory, javax.xml.transform.TransformerFactory and javax.xml.bind.JAXBContext that can be configured using Spin&amp;rsquo;s configuration mechanism. For example, a custom application may provide an implementation of org.camunda.spin.spi.DataFormatConfigurator that exchanges the JAXBContext Spin uses and caches the context to improve performance.
The data format class to register a configurator for is org.</description>
    </item>
    
    <item>
      <title>Create Case Instance</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-definition/post-create-case-instance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-definition/post-create-case-instance/</guid>
      <description>Instantiates a given case definition. Case variables and business key may be supplied in the request body.
Method POST /case-definition/{id}/create
POST /case-definition/key/{key}/create (creates the latest version of the case definition which belongs to no tenant)
POST /case-definition/key/{key}/tenant-id/{tenant-id}/create (creates the latest version of the case definition for tenant)
Parameters Path Parameters  Name Description   id The id of the case definition to be retrieved.   key The key of the case definition (the latest version thereof) to be retrieved.</description>
    </item>
    
    <item>
      <title>Create a New Authorization</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/authorization/post-create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/authorization/post-create/</guid>
      <description>Creates a new authorization.
Method POST /authorization/create
Parameters Request Body A JSON object with the following properties:
 Name Value Description   type Integer The type of the authorization. (0=global, 1=grant, 2=revoke). See the User Guide for more information about authorization types.   permissions String An array of Strings holding the permissions provided by this authorization.   userId String The id of the user this authorization has been created for.</description>
    </item>
    
    <item>
      <title>Create user</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/user/post-create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/user/post-create/</guid>
      <description>Create a new user.
Method POST /user/create
Parameters Request Body A JSON object with the following properties:
 Name Type Description   profile Array  A JSON object containing variable key-value pairs. The object contains the following properties: id (String), firstName (String), lastName (String) and email (String).    credentials Array  A JSON object containing variable key-value pairs. The object contains the following property: password (String).    Result This method returns no content.</description>
    </item>
    
    <item>
      <title>Date Format</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/overview/date-format/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/overview/date-format/</guid>
      <description>The REST API uses the default date format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, which represents a date with milliseconds and timezone information, e.g., 2016-01-25T13:33:42.165+0100.
If you add a date as a GET request parameter, remember the URL encoding, e.g. 2016-01-25T13:33:42.165%2b0100.
Custom Date Format A custom date format can be configured in the web.xml file of the REST API. To do so, the ServletContextListener CustomJacksonDateFormatListener has to be added. The custom date format can be specified by the context parameter org.</description>
    </item>
    
    <item>
      <title>Delete Filter</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/filter/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/filter/delete/</guid>
      <description>Deletes a filter by id.
Method DELETE /filter/{id}
Parameters Path Parameters  Name Description   id The id of the filter to be deleted.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.   403 application/json  The authenticated user is unauthorized to delete this filter. See the Introduction for the error response format.    404 application/json  Filter cannot be found.</description>
    </item>
    
    <item>
      <title>Delete a Historic Process Instance</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-instance/delete-process-instance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-instance/delete-process-instance/</guid>
      <description>Deletes a process instance from the history by id.
Method DELETE /history/process-instance/{id}
Parameters Path Parameters  Name Description   id The id of the historic process instance to be deleted.   Query Parameters  Name Description   failIfNotExists If set to false, the request will still be successful if the process id is not found.   Result No content.
Response Codes  Code Media type Description   204 application/json Request successful.</description>
    </item>
    
    <item>
      <title>Evaluate Decision</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/decision-definition/post-evaluate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/decision-definition/post-evaluate/</guid>
      <description>Evaluates a given decision and returns the result. The input values of the decision have to be supplied in the request body.
Method POST /decision-definition/{id}/evaluate
POST /decision-definition/key/{key}/evaluate (evaluates the latest version of the decision definition which belongs to no tenant)
POST /decision-definition/key/{key}/tenant-id/{tenant-id}/evaluate (evaluates the latest version of the decision definition for tenant)
Parameters Path Parameters  Name Description   id The id of the decision definition to be evaluated.</description>
    </item>
    
    <item>
      <title>Examples</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/javascript/examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/javascript/examples/</guid>
      <description>The following examples show example scenarios of custom JavaScript in embedded forms.
User name from a cam-script This example demonstrates how to retrieve the user name and display it in an embedded form:
&amp;lt;form role=&amp;quot;form&amp;quot;&amp;gt; &amp;lt;script cam-script type=&amp;quot;text/form-script&amp;quot;&amp;gt; inject([&#39;$rootScope&#39;, function($rootScope) { $scope.userName = $rootScope.authentication.name; }]); &amp;lt;/script&amp;gt; &amp;lt;h1&amp;gt;Greetings {{ userName }}&amp;lt;/h1&amp;gt; &amp;lt;/form&amp;gt;  Load Additional Resources This example includes an image, which is located in the contextPath of the form (i.</description>
    </item>
    
    <item>
      <title>Execute Job</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job/post-execute-job/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job/post-execute-job/</guid>
      <description>Executes a job by id. Note: The execution of the job happens synchronously in the same thread.
Method POST /job/{id}/execute
Parameters Path Parameters  Name Description   id The id of the job to be executed.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.   404 application/json Job with given id does not exist. See the Introduction for the error response format.</description>
    </item>
    
    <item>
      <title>Extension Attributes</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/model-api/dmn-model-api/extension-attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/model-api/dmn-model-api/extension-attributes/</guid>
      <description>Custom extensions are a standardized way to extend the DMN model. The Camunda extension attributes are fully implemented in the DMN model API.
Every DMN Decision element can have the attributes historyTimeToLive and versionTag. To access the extension attributes, you have to call the Decision#getCamundaHistoryTimeToLiveString() and Decision#getVersionTag() methods.
String historyTimeToLive = decision.getCamundaHistoryTimeToLiveString(); String versionTag = decision.getVersionTag();  To set attributes, use Decision#setCamundaHistoryTimeToLiveString() and Decision#setVersionTag()
decision.setCamundaHistoryTimeToLiveString(&amp;quot;1000&amp;quot;); decision.setVersionTag(&amp;quot;1.0.0&amp;quot;);  Every Input element can have an inputVariable attribute.</description>
    </item>
    
    <item>
      <title>Extension Elements</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/model-api/bpmn-model-api/extension-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/model-api/bpmn-model-api/extension-elements/</guid>
      <description>Custom extension elements are a standardized way to extend the BPMN model. The Camunda extension elements are fully implemented in the BPMN model API, but unknown extension elements can also easily be accessed and added.
Every BPMN BaseElement can have a child element of the type extensionElements. This element can contain all sorts of extension elements. To access the extension elements you have to call the getExtensionElements() method and, if no such child element exists, you must create one first.</description>
    </item>
    
    <item>
      <title>Extension Elements</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/model-api/cmmn-model-api/extension-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/model-api/cmmn-model-api/extension-elements/</guid>
      <description>Custom extension elements are a standardized way to extend the CMMN model. The Camunda extension elements are fully implemented in the CMMN model API but unknown extension elements can also easily be accessed and added.
Every CMMN CmmnElement can have a child element of the type extensionElements. This element can contain all sorts of extension elements. To access the extension elements you have to call the getExtensionElements() method and, if no such child element exists, you must create one first.</description>
    </item>
    
    <item>
      <title>Failed Jobs</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/bpmn/failed-jobs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/bpmn/failed-jobs/</guid>
      <description>Unresolved incidents of a process instance or a sub process instance are indicated by Cockpit as failed jobs. To localize which instance of a process failed, Cockpit allows you to drill down to the unresolved incident by using the process status dots. Hit a red status dot of the affected instance in the Process Definition View to get an overview of all incidents. The Incidents tab in the Detailed Information Panel lists the failed activities with additional information.</description>
    </item>
    
    <item>
      <title>Fetch and Lock External Tasks</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/fetch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/fetch/</guid>
      <description>Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted to specific task topics and for each task topic an individual lock time can be provided.
Method POST /external-task/fetchAndLock
Parameters Request Body A JSON object with the following properties:
 Name Description   workerId Mandatory. The id of the worker on which behalf tasks are fetched. The returned tasks are locked for that worker and can only be completed when providing the same worker id.</description>
    </item>
    
    <item>
      <title>Find clean up history job (GET)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/history-cleanup/get-history-cleanup-job/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/history-cleanup/get-history-cleanup-job/</guid>
      <description>Deprecated! Use GET /history/cleanup/jobs instead.
Finds history cleanup job (See History cleanup).
Method GET /history/cleanup/job
Parameters Query Parameters Not used
Request Body Not used
Result A JSON object representing scheduled job. See Get Job for the structure and example.
Response Codes  Code Media type Description   200 application/json Request successful.   404 application/json History clean up job does not exist   Example Request GET /history/cleanup/job</description>
    </item>
    
    <item>
      <title>Get Batch Statistics</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/batch/get-statistics-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/batch/get-statistics-query/</guid>
      <description>Queries for batch statistics that fulfill given parameters. Parameters may be the properties of batches, such as the id or type. The size of the result set can be retrieved by using the Get Batch Statistics Count method.
Method GET /batch/statistics
Parameters Query Parameters  Name Description   batchId Filter by batch id.   type Filter by batch type. See the User Guide for more information about batch types.</description>
    </item>
    
    <item>
      <title>Get Cleanable Batch Report Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/batch/get-cleanable-batch-report-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/batch/get-cleanable-batch-report-count/</guid>
      <description>Queries for the number of report results about a historic batch operations relevant to history cleanup (see History cleanup). Takes the same parameters as the Get Cleanable Batch Report method.
Method GET /history/batch/cleanable-batch-report/count
Parameters Query Parameters  Name Description   sortBy Sort the results by a given criterion. Valid value is finished. Must be used in conjunction with the sortOrder parameter.   sortOrder Sort the results in a given order.</description>
    </item>
    
    <item>
      <title>Get DRD Statistics</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/decision-requirements-definition/get-statistics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/decision-requirements-definition/get-statistics/</guid>
      <description>Retrieves evaluation statistics of a given decision requirements definition.
Method GET /history/decision-requirements-definition/{id}/statistics
Parameters Path Parameters  Name Description   id The id of the decision requirements definition.   Query Parameters  Name Description   decisionInstanceId  Restrict query results to be based only on specific evaluation instance of a given decision requirements definition.    Result A JSON array containing statistics object for each decision definition related to this DRD.</description>
    </item>
    
    <item>
      <title>Get Deployment Resource</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/deployment/get-resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/deployment/get-resource/</guid>
      <description>Retrieves a deployment resource by resource id for the given deployment.
Method GET /deployment/{id}/resources/{resourceId}
Parameters Path Parameters  Name Description   id The id of the deployment.   resourceId The id of the deployment resource.   Result A JSON object corresponding to the Resource interface in the engine. Its properties are as follows:
 Name Value Description   id String The id of the deployment resource.</description>
    </item>
    
    <item>
      <title>Get External Task Logs (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/external-task-log/post-external-task-log-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/external-task-log/post-external-task-log-query/</guid>
      <description>Queries for historic external task logs that fulfill the given parameters. This method is slightly more powerful than the Get External Task Logs method because it allows filtering by historic external task logs values of the different types String, Number or Boolean.
Method POST /history/external-task-log
Parameters Request Body A JSON object with the following properties:
 Name Description   logId Filter by historic external task log id.   externalTaskId Filter by external task id.</description>
    </item>
    
    <item>
      <title>Get Job Logs (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/job-log/post-job-log-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/job-log/post-job-log-query/</guid>
      <description>Queries for historic job logs that fulfill the given parameters. This method is slightly more powerful than the Get Job Logs method because it allows filtering by historic job logs values of the different types String, Number or Boolean.
Method POST /history/job-log
Parameters Query Parameters  firstResult Pagination of results. Specifies the index of the first result to return.   maxResults Pagination of results. Specifies the maximum number of results to return.</description>
    </item>
    
    <item>
      <title>Get Local Execution Variables</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/execution/local-variables/get-local-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/execution/local-variables/get-local-variables/</guid>
      <description>Retrieves all variables of a given execution by id.
Method GET /execution/{id}/localVariables
Parameters Path Parameters  Name Description   id The id of the execution to retrieve the variables from.   Query Parameters  Name Description   deserializeValues  Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).If set to true, a serializable variable will be deserialized on server side and transformed to JSON using Jackson&#39;s POJO/bean property introspection feature.</description>
    </item>
    
    <item>
      <title>Get Process Variable (Binary)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/variables/get-variable-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/variables/get-variable-binary/</guid>
      <description>Retrieves the content of a Process Variable by the Process Instance id and the Process Variable name. Applicable for byte array or file Process Variables.
Method GET /process-instance/{id}/variables/{varName}/data
Parameters Path Parameters  Name Description   id The id of the process instance to retrieve the variable for.   varName The name of the variable to retrieve.   Result For binary variables or files without any MIME type information, a byte stream is returned.</description>
    </item>
    
    <item>
      <title>Get Rendered Start Form</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get-rendered-form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get-rendered-form/</guid>
      <description>Retrieves the rendered form for a process definition. This method can be used for getting the HTML rendering of a Generated Task Form.
Method GET /process-definition/{id}/rendered-form
GET /process-definition/key/{key}/rendered-form (returns the rendered form for the latest version of the process definition which belongs to no tenant)
GET /process-definition/key/{key}/tenant-id/{tenant-id}/rendered-form (returns the rendered form for the latest version of the process definition for tenant)
Parameters Path Parameters  Name Description   id The id of the process definition to get the rendered start form for.</description>
    </item>
    
    <item>
      <title>Get Variable Instance Count (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/variable-instance/post-variable-instance-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/variable-instance/post-variable-instance-query-count/</guid>
      <description>Queries for historic variable instances that fulfill the given parameters. This method takes the same message body as the Get Variable Instances (POST) method and therefore it is more powerful regarding variable values than the Get Variable Instance Count method.
Method POST /history/variable-instance/count
Parameters Request Body A JSON object with the following properties:
 Name Description   variableName Filter by variable name.   variableNameLike Restrict to variables with a name like the parameter.</description>
    </item>
    
    <item>
      <title>Group Resource Options</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/group/options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/group/options/</guid>
      <description>The /group resource supports two custom OPTIONS requests, one for the resource as such and one for individual group instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the /group resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.</description>
    </item>
    
    <item>
      <title>Hidden Input Fields</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/controls/hidden/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/controls/hidden/</guid>
      <description>Hidden input elements are HTML controls in the form of
&amp;lt;input type=&amp;quot;hidden&amp;quot;&amp;gt;&amp;lt;/input&amp;gt;  They are not displayed in the form, but can be used to retrieve values to be used in the context of the form (e.g., using Angular bindings).
Binding a Hidden Element to a Process Variable A hidden input can be bound to a process variable using the cam-variable-type and cam-variable-name directives:
&amp;lt;input type=&amp;quot;hidden&amp;quot; cam-variable-name=&amp;quot;CUSTOMER_ID&amp;quot; cam-variable-type=&amp;quot;String&amp;quot; value=&amp;quot;testuser&amp;quot; /&amp;gt;  In the example above, the hidden input field is bound to the variable named CUSTOMER_ID of type String and contains the value testuser.</description>
    </item>
    
    <item>
      <title>Job Execution with Managed Resources</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/runtime-container-integration/job-execution-with-managed-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/runtime-container-integration/job-execution-with-managed-resources/</guid>
      <description>For supported environments, Camunda Platform provides server modules that integrate the Job Execution with the application server&amp;rsquo;s managed threadpools. If you are using one of those environments, it is recommended to use the integration provided with it.
The descriptions on this page apply to the use case where there is no existing resource-aware implementation provided. In those cases, using managed resources provided by the application server is recommended over using unmanaged resources.</description>
    </item>
    
    <item>
      <title>Plugins</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/tasklist/tasklist-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/tasklist/tasklist-plugins/</guid>
      <description>Plugin CompatibilityPlease note that the code of Tasklist plugins might need to be migrated when updating Camunda Platform to a higher version (e.g. CSS styles).
Tasklist uses the concept of plugins to add own functionality without having to extend or hack the Tasklist web application.
For further details about the concepts behind plugins, please read the Cockpit plugins section.
Difference between Cockpit and Tasklist plugins: To publish the plugin with Tasklist, its class name must be put into a file called org.</description>
    </item>
    
    <item>
      <title>Plugins</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/welcome/welcome-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/welcome/welcome-plugins/</guid>
      <description> In addition to the configurable custom links, plugins can be used to add functionality to the Welcome application. For further details about the concepts behind plugins, please read the Cockpit plugins section. Please note that the Welcome application just offers frontend only plugins.
Plugin point Name: welcome.dashboard.
Name: welcome.profile.
</description>
    </item>
    
    <item>
      <title>Receive Task 接收消息任务</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/tasks/receive-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/tasks/receive-task/</guid>
      <description>一个接收任务是一个简单的任务，它等待某个消息的到来。当流程的执行到达一个接收任务时，流程的状态被提交到持久性存储中。这意味着流程将一直处于这种等待状态，直到引擎收到一个特定的消息，从而触发流程在接收任务之外的继续执行。
一个有消息参考的接收任务可以像普通事件一样被触发。
&amp;lt;definitions ...&amp;gt; &amp;lt;message id=&amp;quot;newInvoice&amp;quot; name=&amp;quot;newInvoiceMessage&amp;quot;/&amp;gt; &amp;lt;process ...&amp;gt; &amp;lt;receiveTask id=&amp;quot;waitState&amp;quot; name=&amp;quot;wait&amp;quot; messageRef=&amp;quot;newInvoice&amp;quot;&amp;gt; ...  然后你可以将它和消息关联起来。
// 关联消息 runtimeService.createMessageCorrelation(subscription.getEventName()) .processInstanceBusinessKey(&amp;quot;AB-123&amp;quot;) .correlate();  或者明确地查询订阅并触发它：
ProcessInstance pi = runtimeService.startProcessInstanceByKey(&amp;quot;processWaitingInReceiveTask&amp;quot;); EventSubscription subscription = runtimeService.createEventSubscriptionQuery() .processInstanceId(pi.getId()).eventType(&amp;quot;message&amp;quot;).singleResult(); runtimeService.messageEventReceived(subscription.getEventName(), subscription.getExecutionId());  并行多实例的相关性是不可能的，因为订阅不能被明确地识别。
要继续一个当前在接收任务中等待的流程实例，而没有消息参考，可以调用runtimeService.signal(executionId)，使用接收任务中的执行的id。
&amp;lt;receiveTask id=&amp;quot;waitState&amp;quot; name=&amp;quot;wait&amp;quot; /&amp;gt;  以下代码段显示在实践中如何运作：
ProcessInstance pi = runtimeService.startProcessInstanceByKey(&amp;quot;receiveTask&amp;quot;); Execution execution = runtimeService.createExecutionQuery() .processInstanceId(pi.getId()).activityId(&amp;quot;waitState&amp;quot;).singleResult(); runtimeService.signal(execution.getId());  Camunda 扩展  属性  camunda:asyncBefore, camunda:asyncAfter, camunda:exclusive, camunda:jobPriority    扩展元素  camunda:failedJobRetryTimeCycle, camunda:inputOutput    约束  The camunda:exclusive attribute is only evaluated if the attribute camunda:asyncBefore or camunda:asyncAfter is set to true    额外资料  Tasks in the BPMN 2.</description>
    </item>
    
    <item>
      <title>Reports</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/reporting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/reporting/</guid>
      <description>You can use the reports section of cockpit to display custom statistics and reports. Please note that this section is not visible if no report is available. Refer to the Cockpit Plugins section for adding a custom reporting plugin.
Process Instance Duration Report Enterprise FeaturePlease note that this feature is only included in the enterprise edition of the Camunda Platform, it is not available in the community edition.</description>
    </item>
    
    <item>
      <title>Sentries</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/cmmn11/sentry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/cmmn11/sentry/</guid>
      <description>A sentry captures the occurrence of a certain event occurring or a condition being fulfilled within a case. Sentries are used as entry and exit criteria. Note that the black and white diamonds represent the criteria. A sentry itself has no graphical representation.
In XML, a sentry can be specified as follows:
&amp;lt;planItem id=&amp;quot;PlanItem_HumanTask_1&amp;quot; definitionRef=&amp;quot;HumanTask_1&amp;quot;/&amp;gt; &amp;lt;planItem id=&amp;quot;PlanItem_HumanTask_2&amp;quot; definitionRef=&amp;quot;HumanTask_1&amp;quot;&amp;gt; &amp;lt;entryCriterion sentryRef=&amp;quot;Sentry_1&amp;quot; /&amp;gt; &amp;lt;/planItem&amp;gt; &amp;lt;sentry id=&amp;quot;Sentry_1&amp;quot;&amp;gt; &amp;lt;planItemOnPart sourceRef=&amp;quot;PlanItem_HumanTask_1&amp;quot;&amp;gt; &amp;lt;standardEvent&amp;gt;complete&amp;lt;/standardEvent&amp;gt; &amp;lt;/planItemOnPart&amp;gt; &amp;lt;ifPart&amp;gt; &amp;lt;condition&amp;gt;${myVar &amp;gt; 100}&amp;lt;/condition&amp;gt; &amp;lt;/ifPart&amp;gt; &amp;lt;/sentry&amp;gt; &amp;lt;humanTask id=&amp;quot;HumanTask_1&amp;quot;/&amp;gt;  The above example defines a sentry that is fulfilled when the plan item PlanItem_HumanTask_1 performs the state transition complete (note the planItemOnPart element) and a variable named myVar has a value greater than 100 (note the ifPart element).</description>
    </item>
    
    <item>
      <title>Set Job Definition Priority by Id</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job-definition/put-set-job-priority/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job-definition/put-set-job-priority/</guid>
      <description>Sets an overriding execution priority for jobs with the given definition id. Optionally, the priorities of all the definition&amp;rsquo;s existing jobs are updated accordingly. The priority can be reset by setting it to null, meaning that a new job&amp;rsquo;s priority will not be determined based on its definition&amp;rsquo;s priority any longer. See the user guide on job prioritization for details.
Method PUT /job-definition/{id}/jobPriority
Parameters Path Parameters  Name Description   id The id of the job definition to be updated.</description>
    </item>
    
    <item>
      <title>Set Removal Time Async (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/batch/post-batch-set-removal-time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/batch/post-batch-set-removal-time/</guid>
      <description>Sets the removal time to multiple historic batches asynchronously (batch).
At least historicBatchIds or historicBatchQuery has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
Method POST /history/batch/set-removal-time
Parameters Request Body A JSON object with the following properties:
 Name Description   absoluteRemovalTime  The date for which the historic batches shall be removed.</description>
    </item>
    
    <item>
      <title>Set Removal Time Async (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/decision-instance/post-decision-instance-set-removal-time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/decision-instance/post-decision-instance-set-removal-time/</guid>
      <description>Sets the removal time to multiple historic decision instances asynchronously (batch).
At least historicDecisionInstanceIds or historicDecisionInstanceQuery has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
Method POST /history/decision-instance/set-removal-time
Parameters Request Body A JSON object with the following properties:
 Name Description   absoluteRemovalTime  The date for which the historic decision instances shall be removed.</description>
    </item>
    
    <item>
      <title>Set Removal Time Async (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-instance/post-process-instance-set-removal-time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-instance/post-process-instance-set-removal-time/</guid>
      <description>Sets the removal time to multiple historic process instances asynchronously (batch).
At least historicProcessInstanceIds or historicProcessInstanceQuery has to be provided. If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
Method POST /history/process-instance/set-removal-time
Parameters Request Body A JSON object with the following properties:
 Name Description   absoluteRemovalTime  The date for which the historic process instances shall be removed.</description>
    </item>
    
    <item>
      <title>Signal Events</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/signal-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/signal-events/</guid>
      <description>Signal events are events which reference a named signal. A signal is an event of global scope (broadcast semantics) and is delivered to all active handlers.
The following is an example of two separate processes communicating using signals. The first process is started if an insurance policy is updated or changed. After the changes have been reviewed by a human participant, a signal event is thrown, signaling that a policy has changed:</description>
    </item>
    
    <item>
      <title>Spring Eventing Bridge</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/spring-boot-integration/the-spring-event-bridge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/spring-boot-integration/the-spring-event-bridge/</guid>
      <description>The process engine can be hooked-up to the Spring event bus. We call this the &amp;ldquo;Spring Eventing Bridge&amp;rdquo;. This allows us to be notified of process events using standard Spring eventing mechanisms. By default, the Spring eventing is enabled by a engine plugin. The eventing is controlled by three camunda.bpm.eventing properties. These are:
camunda.bpm.eventing.execution=true camunda.bpm.eventing.history=true camunda.bpm.eventing.task=true  The properties control three event streams for execution, task and history events respectively.</description>
    </item>
    
    <item>
      <title>Start Case Execution Manually</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/post-manual-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/post-manual-start/</guid>
      <description>Performs a transition from ENABLED state to ACTIVE state. In relation to the state transition, it is possible to update or delete case instance variables (please note: deletion precedes update).
Method POST /case-execution/{id}/manual-start
Parameters Path Parameters  Name Description   id The id of the case execution to start manually.   Request Body A JSON object with the following properties:
 Name Description   variables A JSON object containing variable key-value pairs.</description>
    </item>
    
    <item>
      <title>Tenant Resource Options</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/options/</guid>
      <description>The /tenant resource supports two custom OPTIONS requests, one for the resource as such and one for individual tenant instances. The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the /tenant resource. If the user can perform an operation or not may depend on various things, including the users authorizations to interact with this resource and the internal configuration of the process engine.</description>
    </item>
    
    <item>
      <title>委托代码</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/delegation-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/delegation-code/</guid>
      <description>委托代码允许你在流程执行期间发生某些事件时执行外部Java代码、脚本或表达式。
有四种不同类型委托代码：
 Java 代理类（JAVA Delegates） 可以附加到 BPMN 服务任务。 变量映射（Delegate Variable Mapping） 可以附加到 发起活动。 执行监听器（Execution Listeners） 可以附加到令牌流动的任何实践，例如，启动一个流程实例或进入一个活动。 任务监听器（Task Listeners） 可以附加到用户任务生命周期内的任何事件，例如，用户任务的创建或完成。  你可以通过BPMN 2.0 XML创建通用的委托代码，并使用字段注入来配置。
Java 代理类 在流程运行中调用的Java代理类，需要实现 org.camunda.bpm.engine.delegate.JavaDelegate 接口，并实现 execute 方法。当流程执行到达这个特定的步骤时，它将执行该方法中定义的这个方法，并以默认的BPMN 2.0方式完成活动。
举个例子，让我们先创建一个Java类，它可以用来将一个流程变量String改为大写字母。这个类需要实现org.camunda.bpm.engine.delegate.JavaDelegate接口，这要求我们实现execute(DelegateExecution)方法。这个操作将被引擎调用，并且包含所需要的业务逻辑。（可以通过 DelegateExecution接口访问和操作流程实例信息，如流程变量和其他信息）
public class ToUppercase implements JavaDelegate { public void execute(DelegateExecution execution) throws Exception { String var = (String) execution.getVariable(&amp;quot;input&amp;quot;); var = var.toUpperCase(); execution.setVariable(&amp;quot;input&amp;quot;, var); } }  新的实例!每次执行引用活动的委托类时，都会创建这个类的一个新的实例。这意味着，每次活动被执行时，将使用该类的另一个实例来调用 execute(DelegateExecution)。
在流程定义中引用的类（即通过使用 camunda:class 引用的类）在部署期间 不会 被实例化。只有当流程执行到达流程中第一次使用类的地方时，才会创建该类的实例。如果找不到该类，将抛出一个 &amp;ldquo;ProcessEngineException&amp;rdquo;。因为，你在部署时的环境（更确切地说，是classpath）往往与实际运行时的环境不同。</description>
    </item>
    
    <item>
      <title>性能</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/database/performance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/database/performance/</guid>
      <description>This page explains specific performance-related topics of database queries. It does not attempt to provide tools and guidance for general performance analysis and optimization of Camunda Platform installations.
As the impact of the settings discussed here largely depends on the setup and workload of Camunda Platform, the recommendations may or may not help in your case. Performance improvements are not guaranteed.
任务查询 The task query is one of the heaviest used and most powerful queries of the process engine API.</description>
    </item>
    
    <item>
      <title>Camunda Platform RPA Bridge License Book</title>
      <link>http://camunda-cn.shaochenfeng.com/introduction/third-party-libraries/camunda-bpm-rpa-bridge-license-book/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/introduction/third-party-libraries/camunda-bpm-rpa-bridge-license-book/</guid>
      <description>This page contains all the third-party libraries distributed with the Camunda Platform RPA Bridge 1.1.0.
Java Dependencies logback-classic@1.2.3(EPL 1.0)Copyright (C) 1999-2015, QOS.ch. All rights reserved. logback-core@1.2.3(EPL 1.0)Copyright (C) 1999-2015, QOS.ch. All rights reserved. jackson-annotations@2.11.0(Apache 2.0)Copyright: various authors jackson-core@2.11.0(Apache 2.0)Copyright: various authors: https://github.com/FasterXML/jackson-core/tree/master/release-notes Notice file: # Jackson JSON processor Jackson is a high-performance, Free/Open Source JSON processing library. It was originally written by Tatu Saloranta (tatu.saloranta@iki.fi), and has been in development since 2007.</description>
    </item>
    
    <item>
      <title>Cancel and Compensation Events</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/cancel-and-compensation-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/cancel-and-compensation-events/</guid>
      <description>Cancel Events Cancel End Event The cancel end event can only be used in combination with a transaction subprocess. When the cancel end event is reached, a cancel event is thrown which must be caught by a cancel boundary event. The cancel boundary event then cancels the transaction and triggers compensation.
Cancel Boundary Event An attached intermediate catching cancel event on the boundary of a transaction subprocess, or, for short, a cancel boundary event, is triggered when a transaction is canceled.</description>
    </item>
    
    <item>
      <title>Close Case Instance</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/post-close/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/post-close/</guid>
      <description>Performs a transition from COMPLETED state to CLOSED state. In relation to the state transition, it is possible to update or delete case instance variables (please note: deletion precedes update).
Method POST /case-instance/{id}/close
Parameters Path Parameters  Name Description   id The id of the case instance to close.   Request Body A JSON object with the following properties:
 Name Description   variables A JSON object containing variable key-value pairs.</description>
    </item>
    
    <item>
      <title>Complete Case Execution</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/post-complete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/post-complete/</guid>
      <description>Performs a transition from ACTIVE state to COMPLETED state. In relation to the state transition, it is possible to update or delete case instance variables (please note: deletion precedes update).
Method POST /case-execution/{id}/complete
Parameters Path Parameters  Name Description   id The id of the case execution to complete.   Request Body A JSON object with the following properties:
 Name Description   variables A JSON object containing variable key-value pairs.</description>
    </item>
    
    <item>
      <title>Complete External Task</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/post-complete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/post-complete/</guid>
      <description>Completes an external task by id and updates process variables.
Method POST /external-task/{id}/complete
Parameters Path Parameters  Name Description   id The id of the task to complete.   Request Body A JSON object with the following properties:
 Name Description   workerId The id of the worker that completes the task. Must match the id of the worker who has most recently locked the task.   variables A JSON object containing variable key-value pairs.</description>
    </item>
    
    <item>
      <title>Conditional Events</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/conditional-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/conditional-events/</guid>
      <description>The conditional event defines an event which is triggered if a given condition is evaluated to true. It can be used as start event of an event sub process, as intermediate event and boundary event. The start and boundary event can be interrupting and non interrupting.
In Camunda, conditional events are triggered with the help of process variables. See the Trigger Conditional Events section for details.
In the following BPMN model, all supported conditional events are used.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/tasklist/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/tasklist/configuration/</guid>
      <description>You can override the default configuration of Tasklist using a central configuration file located in app/tasklist/scripts/config.js. The following configuration options are available:
Date Format Dates can be configured by specifying a dateFormat object. The values of the properties of this object must be strings representing date formats in accordance with moment.js. Following date formats are used within Tasklist:
 monthName represents the name of a month (e.g., January). day represents the number of a day in a month (1.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/welcome/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/welcome/configuration/</guid>
      <description>You can override the default configuration of the Welcome application by using a central configuration file, located in app/welcome/scripts/config.js. The following configuration options are available:
Custom links Can be used to add some useful links for the user, such as other applications or intranet sites.
Example export default { // … links: [ { label: &#39;Camunda Forum&#39;, href: &#39;https://forum.camunda.org&#39;, description: &#39;Forum for Camnuda BPM users and developers&#39; }, // .</description>
    </item>
    
    <item>
      <title>Delete Group</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/group/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/group/delete/</guid>
      <description>Deletes a group by id.
Method DELETE /group/{id}
Parameters Path Parameters  Name Description   id The id of the group to be deleted.   Result This method returns no content.
Response Codes  Code Media type Description   204 application/json Request successful.   403 application/json Identity service is read-only (Cannot modify users / groups / memberships).   404 application/json Group cannot be found. See the Introduction for the error response format.</description>
    </item>
    
    <item>
      <title>Delete Tenant</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/tenant/delete/</guid>
      <description>Deletes a tenant by id.
Method DELETE /tenant/{id}
Parameters Path Parameters  Name Description   id The id of the tenant to be deleted.   Result This method returns no content.
Response Codes  Code Media type Description   204 application/json Request successful.   403 application/json Identity service is read-only.   404 application/json Tenant cannot be found. See the Introduction for the error response format.</description>
    </item>
    
    <item>
      <title>Delete Variable Instance</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/variable-instance/delete-variable-instance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/variable-instance/delete-variable-instance/</guid>
      <description>Deletes a historic variable instance by id.
Method DELETE /history/variable-instance/{id}
Parameters Path Parameters  Name Description   id The id of the variable instance.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.   404 application/json Variable with given id does not exist. See the Introduction for the error response format.   Example Request Delete the history of a variable with id aHistoricVariableId:</description>
    </item>
    
    <item>
      <title>Developing and Testing Spring Boot Applications</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/spring-boot-integration/develop-and-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/spring-boot-integration/develop-and-test/</guid>
      <description>Developing Spring Boot provides Developer Tools which feature options like automatic restart and live reload during the development of an application.
Spring Developer Tools and Classloading An additional process engine plugin (ApplicationContextClassloaderSwitchPlugin) will be loaded in case your application is in a development mode:
 Spring Developer tools (spring-boot-devtools library) are on the class path and the tools are enabled, e.g., the application is started in IDE  The plugin ensures exchanging the application context classloader with the classloader used for the process engine to prevent issues during deserialization.</description>
    </item>
    
    <item>
      <title>Execute Filter Single Result</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/filter/get-execute-single-result/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/filter/get-execute-single-result/</guid>
      <description>Executes the saved query of the filter by id and returns the single result.
Method GET /filter/{id}/singleResult
Parameters Path Parameters  Name Description   id The id of the filter to execute.   Result A JSON object corresponding to the matching entity interface in the engine. This depends on the saved query in the filter. Therefore it is not possible to specify a generic result format, i.e., if the resource type of the filter is Task the result will correspond to the Task interface in the engine.</description>
    </item>
    
    <item>
      <title>File Upload and Download</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/controls/files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/controls/files/</guid>
      <description>Uploading Files File input elements are HTML controls in the form of
&amp;lt;input type=&amp;quot;file&amp;quot;&amp;gt;&amp;lt;/input&amp;gt;  They allow users to upload files, which will be stored as a process instance variable of the type Bytes. Larger files will take longer to process and may crash the browser, so there is a soft file size limit of 5MB. You can overwrite this limit using the cam-max-filesize directive. To upload larger files without freezing the browser, see the custom javascript section.</description>
    </item>
    
    <item>
      <title>Get Batch Statistics Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/batch/get-statistics-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/batch/get-statistics-query-count/</guid>
      <description>Requests the number of batch statistics that fulfill the query criteria. Takes the same filtering parameters as the Get Batch Statistics method.
Method GET /batch/statistics/count
Parameters Query Parameters  Name Description   batchId Filter by batch id.   type Filter by batch type. See the User Guide for more information about batch types.   tenantIdIn Filter by a comma-separated list of tenant ids. A batch matches if it has one of the given tenant ids.</description>
    </item>
    
    <item>
      <title>Get Deployment Resource (binary)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/deployment/get-resource-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/deployment/get-resource-binary/</guid>
      <description>Retrieves the binary content of a deployment resource for the given deployment by id.
Method GET /deployment/{id}/resources/{resourceId}/data
Parameters Path Parameters  Name Description   id The id of the deployment.   resourceId The id of the deployment resource.   Result Byte Stream.
Response Codes  Code Media type Description   200 *  Request successful. The media type of the response depends on the filename. For example a process.</description>
    </item>
    
    <item>
      <title>Get Local Execution Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/execution/local-variables/get-local-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/execution/local-variables/get-local-variable/</guid>
      <description>Retrieves a variable from the context of a given execution by id. Does not traverse the parent execution hierarchy.
Method GET /execution/{id}/localVariables/{varName}
Parameters Path Parameters  Name Description   id The id of the execution to retrieve the variable from.   varName The name of the variable to get.   Query Parameters  Name Description   deserializeValue  Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).</description>
    </item>
    
    <item>
      <title>Get Process Instance Duration Report</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-instance/get-duration-report/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-instance/get-duration-report/</guid>
      <description>Retrieves a report about the duration of completed process instances, grouped by a period. These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.
Note: This only includes historic data.
Method GET /history/process-instance/report?reportType=duration
Parameters Query Parameters  Name Description   reportType Mandatory. Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to duration.</description>
    </item>
    
    <item>
      <title>Get Process Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/variables/get-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/variables/get-variable/</guid>
      <description>Retrieves a variable of a given process instance by id.
Method GET /process-instance/{id}/variables/{varName}
Parameters Path Parameters  Name Description   id The id of the process instance to retrieve the variable from.   varName The name of the variable to get.   Query Parameters  Name Description   deserializeValue  Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).</description>
    </item>
    
    <item>
      <title>Get Start Form Key</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get-start-form-key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get-start-form-key/</guid>
      <description>Retrieves the key of the start form for a process definition. The form key corresponds to the FormData#formKey property in the engine.
Method GET /process-definition/{id}/startForm
GET /process-definition/key/{key}/startForm (returns the key of the start form for the latest version of the process definition which belongs to no tenant)
GET /process-definition/key/{key}/tenant-id/{tenant-id}/startForm (returns the key of the start form for the latest version of the process definition for tenant)
Parameters Path Parameters  Name Description   id The id of the process definition to get the start form for.</description>
    </item>
    
    <item>
      <title>Manual Task 手动任务</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/tasks/manual-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/tasks/manual-task/</guid>
      <description> 手动任务定义了一个对BPM引擎来说是外部的任务。它被用来模拟由引擎不需要知道的人所做的工作，而且没有已知的系统或UI接口。对于引擎来说，手工任务被当作一个传递节点来处理，在流程执行到达的那一刻将自动继续流程。
&amp;lt;manualTask id=&amp;quot;myManualTask&amp;quot; name=&amp;quot;Manual Task&amp;quot; /&amp;gt;  Camunda 扩展  属性  camunda:asyncBefore, camunda:asyncAfter, camunda:exclusive, camunda:jobPriority    扩展元素  camunda:failedJobRetryTimeCycle, camunda:inputOutput    约束  The camunda:exclusive attribute is only evaluated if the attribute camunda:asyncBefore or camunda:asyncAfter is set to true    </description>
    </item>
    
    <item>
      <title>Open Tasks Dashboard</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/tasks-dashboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/tasks-dashboard/</guid>
      <description>You can use the open tasks dashboard to see how the open tasks are distributed by individual factors. Refer to the Cockpit Plugins section for information about adding a custom open task dashboard plugin.
Open Tasks Assignments by type In this category you can see how many open tasks exist. There is also an overview which shows how the open tasks are distributed.
Assignment by group This category provides you an overview which shows how all open tasks which are assigned to a group are distributed between the individual groups.</description>
    </item>
    
    <item>
      <title>Set Job Due Date</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job/put-set-job-duedate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job/put-set-job-duedate/</guid>
      <description>Updates the due date of a job by id.
Method PUT /job/{id}/duedate
Parameters Path Parameters  Name Description   id The id of the job to be updated.   Request Body A JSON object with the following properties:
 Name Description   duedate The date to set when the job has the next execution.   cascade A boolean value to indicate if modifications to the due date should cascade to subsequent jobs.</description>
    </item>
    
    <item>
      <title>Set Job Retries By Job Definition Id</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job-definition/put-set-job-retries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job-definition/put-set-job-retries/</guid>
      <description>Sets the number of retries of all failed jobs associated with the given job definition id.
Method PUT /job-definition/{id}/retries
Parameters Path Parameters  Name Description   id The id of the job definition to be updated.   Request Body A JSON object with the following properties:
 Name Description   retries The number of retries to set that a job has left.   Result This method returns no content.</description>
    </item>
    
    <item>
      <title>Suspension</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/cockpit/bpmn/suspension/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/cockpit/bpmn/suspension/</guid>
      <description>In the process definition view and in the process instance view you can suspend the selected process definition or process instance by using the button on the right side.
Process Definition Suspension If you suspend the process definition, you prevent the process definition from being instantiated. No further operations can be done while the process definition is in the suspended state. You can simply re-activate the process definition by using the button on the right side.</description>
    </item>
    
    <item>
      <title>Terminate Case Instance</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/post-terminate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/post-terminate/</guid>
      <description>Performs a transition from ACTIVE state to TERMINATED state. In relation to the state transition, it is possible to update or delete case instance variables (please note: deletion precedes update).
Method POST /case-instance/{id}/terminate
Parameters Path Parameters  Name Description   id The id of the case instance to terminate.   Request Body A JSON object with the following properties:
 Name Description   variables A JSON object containing variable key-value pairs.</description>
    </item>
    
    <item>
      <title>Unclaim Task</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-unclaim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-unclaim/</guid>
      <description>Resets a task&amp;rsquo;s assignee. If successful, the task is not assigned to a user.
Method POST /task/{id}/unclaim
Parameters Path Parameters  Name Description   id The id of the task to unclaim.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.   400 application/json Task with given id does not exist. See the Introduction for the error response format.</description>
    </item>
    
    <item>
      <title>Update a user&#39;s credentials</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/user/put-update-credentials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/user/put-update-credentials/</guid>
      <description>Updates a user&amp;rsquo;s credentials (password).
Method PUT /user/{id}/credentials
Parameters Request Body A JSON object with the following properties:
 Name Type Description   password String The user&#39;s new password.   authenticatedUserPassword String The password of the authenticated user who changes the password of the user (i.e., the user with passed id as path parameter).   Result This method returns no content.
Response Codes  Code Media type Description   403 application/json Identity service is read-only (Cannot modify users / groups / memberships).</description>
    </item>
    
    <item>
      <title>Update an Authorization</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/authorization/put-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/authorization/put-update/</guid>
      <description>Updates an authorization by id.
Method PUT /authorization/{id}
Parameters Path Parameters  Name Description   id The id of the authorization to be updated.   Request Body A JSON object with the following properties:
 Name Value Description   permissions Array of Strings An array of strings representing the permissions provided by this authorization.   userId String The id of the user this authorization has been created for.</description>
    </item>
    
    <item>
      <title>Update history time to live</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-definition/put-history-time-to-live/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-definition/put-history-time-to-live/</guid>
      <description>Updates history time to live for case definition with given id. The field is used within History cleanup.
Method PUT /case-definition/{id}/history-time-to-live
PUT /case-definition/key/{key}/history-time-to-live (updates the latest version of the case definition which belongs to no tenant)
PUT /case-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live (updates the latest version of the case definition for tenant)
Parameters Path Parameters  Name Description   id The id of the case definition to change history time to live.   key The key of the case definitions to change history time to live.</description>
    </item>
    
    <item>
      <title>Update history time to live</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/decision-definition/put-history-time-to-live/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/decision-definition/put-history-time-to-live/</guid>
      <description>Updates history time to live for decision definition. The field is used within History cleanup.
Method PUT /decision-definition/{id}/history-time-to-live
PUT /decision-definition/key/{key}/history-time-to-live (updates the latest version of the decision definition which belongs to no tenant)
PUT /decision-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live (updates the latest version of the decision definition for tenant)
Parameters Path Parameters  Name Description   id The id of the decision definition to change history time to live.   key The key of the decision definitions to change history time to live.</description>
    </item>
    
    <item>
      <title>表达式语言</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/expression-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/expression-language/</guid>
      <description>Camunda平台支持统一表达式语言（EL），它是JSP 2.1标准的一部分（JSR-245）。使用了开源的JUEL实现。要获得更多关于表达式语言使用的一般信息，请阅读官方文档。
特别是提供了很好的实例，可以方便的学习表达式语法。
在Camunda平台内，EL可以在许多情况下用于评估小型的脚本式表达。下面的例子是一个使用了EL的BPMN元素：
 BPMN element EL support    Service Task, Business Rule Task, Send Task, Message Intermediate Throwing Event, Message End Event, Execution Listener and Task Listener   Expression language as delegation code    Sequence Flows, Conditional Events   Expression language as condition expression    All Tasks, All Events, Transaction, Subprocess and Connector   Expression language inside an inputOutput parameter mapping    Different Elements   Expression language as the value of an attribute or element    All Flow Nodes, Process Definition   Expression language to determine the priority of a job   表达式语言的用法 委托代码 除了Java代码，Camunda平台还支持将表达式作为委托代码进行计算。关于委托代码的信息，请参见相应的章节.</description>
    </item>
    
    <item>
      <title>Recalculate Job Due Date</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job/post-recalculate-job-duedate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job/post-recalculate-job-duedate/</guid>
      <description>Recalculates the due date of a job by id.
Method POST /job/{id}/duedate/recalculate
Parameters Path Parameters  Name Description   id The id of the job to be updated.   Query Parameters  Name Description   creationDateBased Recalculate the due date based on the creation date of the job or the current date. Value may only be false, as true is the default behavior.    Result This method returns no content.</description>
    </item>
    
    <item>
      <title>Accessibility</title>
      <link>http://camunda-cn.shaochenfeng.com/webapps/tasklist/accessibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/webapps/tasklist/accessibility/</guid>
      <description>It is possible to use the Tasklist only with the keyboard. You can use the TAB-key to navigate to the sections of the Tasklist. To interact with an element you have focused, press ENTER.
Keyboard Shortcuts To make working with the Tasklist easier, you can use keyboard shortcuts to jump to certain parts of the Tasklist or perform special operations. Per default, we support the following actions via keyboard shortcuts:</description>
    </item>
    
    <item>
      <title>Activate/Suspend Job Definition By Id</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job-definition/put-activate-suspend-by-id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job-definition/put-activate-suspend-by-id/</guid>
      <description>Activates or suspends a given job definition by id.
Method PUT /job-definition/{id}/suspended
Parameters Path Parameters  Name Description   id The id of the job definition to activate or suspend.   Request Body A JSON object with the following properties:
 Name Description   suspended A Boolean value which indicates whether to activate or suspend a given job definition. When the value is set to true, the given job definition will be suspended and when the value is set to false, the given job definition will be activated.</description>
    </item>
    
    <item>
      <title>Complete Task</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-complete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-complete/</guid>
      <description>Completes a task and updates process variables.
Method POST /task/{id}/complete
Parameters Path Parameters  Name Description   id The id of the task to complete.   Request Body A JSON object with the following properties:
 Name Description   variables A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object with the following properties:
NameDescriptionvalueThe variable&#39;s value.</description>
    </item>
    
    <item>
      <title>Delete Authorization</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/authorization/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/authorization/delete/</guid>
      <description>Deletes an authorization by id.
Method DELETE /authorization/{id}
Parameters Path Parameters  Name Description   id The id of the authorization to be deleted.   Result This method returns no content.
Response Codes  Code Media type Description   204 application/json Request successful.   403 application/json If the authenticated user is unauthorized to delete the resource instance. See the Introduction for the error response format.   404 application/json Authorization cannot be found.</description>
    </item>
    
    <item>
      <title>Delete Deployment</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/deployment/delete-deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/deployment/delete-deployment/</guid>
      <description>Deletes a deployment by id.
Method DELETE /deployment/{id}
Parameters Path Parameters  Name Description   id The id of the deployment to be deleted.   Query Parameters  Name Description   cascade true, if all process instances, historic process instances and jobs for this deployment should be deleted.   skipCustomListeners true, if only the built-in ExecutionListeners should be notified with the end event.   skipIoMappings true, if all input/output mappings should not be invoked.</description>
    </item>
    
    <item>
      <title>Disable Case Execution</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/post-disable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/post-disable/</guid>
      <description>Performs a transition from ENABLED state to DISABLED state. In relation to the state transition, it is possible to update or delete case instance variables (please note: deletion precedes update).
Method POST /case-execution/{id}/disable
Parameters Path Parameters  Name Description   id The id of the case execution to disable.   Request Body A JSON object with the following properties:
 Name Description   variables A JSON object containing variable key-value pairs.</description>
    </item>
    
    <item>
      <title>Execute Filter Single Result (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/filter/post-execute-single-result/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/filter/post-execute-single-result/</guid>
      <description>Executes the saved query of the filter by id and returns the single result. This method is slightly more powerful then the Get Execute Filter Single Result method because it allows to extend the saved query of the filter.
Security ConsiderationThe request body of this method takes a JSON-serialized query. Some query types (e.g., task queries) allow to specify EL expressions in their parameters and may therefore be abused for remote code execution.</description>
    </item>
    
    <item>
      <title>Get Case Instance Variables</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/variables/get-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/variables/get-variables/</guid>
      <description>Retrieves all variables of a given case instance by id.
Method GET /case-instance/{id}/variables
Parameters Path Parameters  Name Description   id The id of the case instance to retrieve the variables from.   Query Parameters  Name Description   deserializeValues  Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).If set to true, a serializable variable will be deserialized on server side and transformed to JSON using Jackson&#39;s POJO/bean property introspection feature.</description>
    </item>
    
    <item>
      <title>Get External Task Error Details</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/get-error-details/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/get-error-details/</guid>
      <description>Retrieves the error details in the context of a running external task by id.
Method POST /external-task/{id}/errorDetails
Parameters Path Parameters  Name Description   id The id of the external task for which the error details should be retrieved.   Result This method returns no content.
Response Codes  Code Media type Description   200 text/plain Request successful. In case the external task has error details.   204  Request successful.</description>
    </item>
    
    <item>
      <title>Get External Task Topic Names</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/get-topic-names/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/get-topic-names/</guid>
      <description>Queries for distinct topic names of external tasks that fulfill given parameters. Query can be restricted to only tasks with retries left, tasks that are locked, or tasks that are unlocked. The parameters withLockedTasks and withUnlockedTasks are exclusive. Setting them both to true will return an empty list. Providing no parameters will return a list of all distinct topic names with external tasks.
Method GET /external-task/topic-names
Parameters Query Parameters  Name Description   withLockedTasks Only include external tasks that are currently locked (i.</description>
    </item>
    
    <item>
      <title>Get Local Execution Variable (Binary)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/execution/local-variables/get-local-variable-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/execution/local-variables/get-local-variable-binary/</guid>
      <description>Retrieves a binary variable from the context of a given execution by id. Does not traverse the parent execution hierarchy. Applicable for byte array and file variables.
Method GET /execution/{id}/localVariables/{varName}/data
Parameters Path Parameters  Name Description   id The id of the execution to retrieve the variable from.   varName The name of the variable to get.   Result For binary variables or files without any MIME type information, a byte stream is returned.</description>
    </item>
    
    <item>
      <title>Get Process Instance Statistics</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get-statistics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get-statistics/</guid>
      <description>Retrieves runtime statistics of the process engine, grouped by process definitions. These statistics include the number of running process instances, optionally the number of failed jobs and also optionally the number of incidents either grouped by incident types or for a specific incident type. Note: This does not include historic data.
Method GET /process-definition/statistics
Parameters Query Parameters  Name Description   failedJobs Whether to include the number of failed jobs in the result or not.</description>
    </item>
    
    <item>
      <title>Get Process Variables</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/variables/get-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/variables/get-variables/</guid>
      <description>Retrieves all variables of a given process instance by id.
Method GET /process-instance/{id}/variables
Parameters Path Parameters  Name Description   id The id of the process instance to retrieve the variables from.   Query Parameters  Name Description   deserializeValues  Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).If set to true, a serializable variable will be deserialized on server side and transformed to JSON using Jackson&#39;s POJO/bean property introspection feature.</description>
    </item>
    
    <item>
      <title>Handle External Task BPMN Error</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/post-bpmn-error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/post-bpmn-error/</guid>
      <description>Reports a business error in the context of a running external task by id. The error code must be specified to identify the BPMN error handler.
Method POST /external-task/{id}/bpmnError
Parameters Path Parameters  Name Description   id The id of the external task in which context a BPMN error is reported.   Request Body A JSON object with the following properties:
 Name Description   workerId The id of the worker that reports the failure.</description>
    </item>
    
    <item>
      <title>Handle External Task Failure</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/post-failure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/post-failure/</guid>
      <description>Reports a failure to execute an external task by id. A number of retries and a timeout until the task can be retried can be specified. If retries are set to 0, an incident for this task is created.
Method POST /external-task/{id}/failure
Parameters Path Parameters  Name Description   id The id of the external task to report a failure for.   Request Body A JSON object with the following properties:</description>
    </item>
    
    <item>
      <title>Link Events</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/link-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/link-events/</guid>
      <description>Link events are a special case - it has no special execution semantics but serves as a &amp;ldquo;GoTo&amp;rdquo; to another point in the same process model (to be precise: in the same sub process). Hence you can use two matching links as an alternative to a sequence flow as shown in the following example.
 Note that you might have the same event source (throwing intermediate link event with the same event definition name) multiple times, but the event target (catching intermediate link event) has to be unique according to the BPMN 2.</description>
    </item>
    
    <item>
      <title>Set Job Priority</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job/put-set-job-priority/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job/put-set-job-priority/</guid>
      <description>Sets the execution priority of a job by id.
Method PUT /job/{id}/priority
Parameters Path Parameters  Name Description   id The id of the job to be updated.   Request Body A JSON object with the following properties:
 Name Description   priority The new execution priority number for the job.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.</description>
    </item>
    
    <item>
      <title>Task Markers 任务标记</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/tasks/task-markers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/tasks/task-markers/</guid>
      <description>除了各种类型的任务外，我们还可以将任务标记为循环（loops）、多实例（Multiple Instance）或补偿（compensations）。标记可以与任务类型相结合使用。
多实例（Multiple Instance） 多实例活动是为业务流程中的某个步骤定义重复的一种方式。在编程概念中，多实例与 for each 结构相匹配：它允许对给定集合中的每个项目按顺序或并行地执行某个步骤或甚至一个完整的子流程。
多实例是一个有额外属性（所谓的 &amp;ldquo;多实例特性&amp;rdquo;）的常规活动，它将导致该活动在运行时被多次执行。以下活动可以成为多实例活动。
 Service Task 服务任务 Send Task 发送任务 User Task 用户任务 Business Rule Task 业务规则任务 Script Task 脚本任务 Receive Task 接收任务 Manual Task 手动任务 (Embedded) Sub-Process （嵌入）子流程 Call Activity 发起活动 Transaction Subprocess 事务子流程  网关或事件不能成为多实例。
如果一个活动是多实例的，这将由活动底部的三条短线表示。三条垂直线表示实例将以并行方式执行，而三条水平线表示顺序执行。
 按照规范的要求，每个实例所创建的执行的每个父执行将有以下变量：
 nrOfInstances: 实例的总数量 nrOfActiveInstances: 当前活动的，即尚未完成的实例的数量。对于一个连续的多实例，这将永远是1。 nrOfCompletedInstances: 已经完成的实例的数量。  这些值可以通过调用 &amp;ldquo;execution.getVariable(x) &amp;ldquo;方法检索。
此外，每个创建的执行将有一个执行本地变量（即对其他执行不可见，也不存储在流程实例级别）。
 loopCounter: 表示该特定实例的for each循环中的索引  为了使一个活动成为多实例，活动xml元素必须有一个multiInstanceLoopCharacteristics子元素。
&amp;lt;multiInstanceLoopCharacteristics isSequential=&amp;quot;false|true&amp;quot;&amp;gt; ... &amp;lt;/multiInstanceLoopCharacteristics&amp;gt;  isSequential属性表示该活动的实例是按顺序执行还是并行执行。</description>
    </item>
    
    <item>
      <title>Update User Profile</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/user/put-update-profile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/user/put-update-profile/</guid>
      <description>Updates the profile information of an already existing user.
Method PUT /user/{id}/profile
Parameters Path Parameters  Name Type Description   id String The id of the user.   Request Body A JSON object with the following properties:
 Name Type Description   id String The id of the user.   firstName String The first name of the user.   lastName String The last name of the user.</description>
    </item>
    
    <item>
      <title>公共API</title>
      <link>http://camunda-cn.shaochenfeng.com/introduction/public-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/introduction/public-api/</guid>
      <description>Camunda平台提供了一个公共API。本节主要包括公共API的定义和版本更新的向后兼容性问题。
公共 API 的定义 Camunda平台的公共API包含两部分：
Java API:
以下模块的所有非实现的Java包（包名不包含impl，也就是接口类）：
 camunda-engine camunda-engine-spring camunda-engine-cdi camunda-engine-dmn camunda-bpmn-model camunda-cmmn-model camunda-dmn-model camunda-spin-core camunda-connect-core camunda-commons-typed-values  HTTP API (REST API):
 camunda-engine-rest: HTTP接口（REST API接受的一组HTTP请求，详情见REST API参考。Java类不是公共API的一部分.  公共API的向后兼容 Camunda的版本管理方案遵循语义化版本提出的 大版本号.小版本号.补丁 模式。Camunda将保持小版本号版本更新是向后兼容性的。例如：从版本 7.1.x 到 7.2.x 公共API是向后兼容的。</description>
    </item>
    
    <item>
      <title>脚本</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/scripting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/scripting/</guid>
      <description>Camunda平台支持与JSR-223兼容的脚本语言。目前，我们对Groovy、JavaScript、JRuby和Jython进行了测试。为了使用一个脚本语言，有必要在classpath中添加相应的jar。
JavaScript 是Java Runtime（JRE）的一部分，因此开箱即用。
Groovy 也包含在预编译的Camunda发行版中。
下表展示了支持执行脚本的BPMN元素：
 BPMN element Script support   Script Task 嵌入在脚本任务中的脚本    Processes, Activities, Sequence Flows, Gateways and Events   作为执行监听器的脚本    User Tasks   作为任务监听器的脚本    Sequence Flows   作为顺序流条件表达式的脚本    All Tasks, All Events, Transactions, Subprocesses and Connectors   输入输出参数映射中的脚本   使用脚本任务 通过BPMN 2.0脚本任务，你可以向你的BPM流程添加一个脚本（更多信息请参见BPMN 2.0参考）。
下面的流程是一个简单的例子，有一个Groovy脚本任务，对一个数组的元素进行求和：</description>
    </item>
    
    <item>
      <title>Activate/Suspend Job Definitions By Process Definition Id</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job-definition/put-activate-suspend-by-proc-def-id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job-definition/put-activate-suspend-by-proc-def-id/</guid>
      <description>Activates or suspends job definitions with the given process definition id.
Method PUT /job-definition/suspended
Parameters Request Body A JSON object with the following properties:
 Name Description   processDefinitionId The process definition id of the job definitions to activate or suspend.   suspended A Boolean value which indicates whether to activate or suspend all job definitions with the given process definition id. When the value is set to true, all job definitions with the given process definition id will be suspended and when the value is set to false, all job definitions with the given process definition id will be activated.</description>
    </item>
    
    <item>
      <title>BPMN Event Buttons</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/controls/bpmn-buttons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/forms/embedded-forms/controls/bpmn-buttons/</guid>
      <description>These buttons can be used to trigger error and escalation events in user tasks. They will submit all entered values and activate the corresponding boundary event. To learn more about error and escalation events, see our section about events.
Error An Error Button can be bound to an error code and error message using the cam-error-code and cam-error-message directive. Providing an error message is optional.
&amp;lt;button cam-error-code=&amp;quot;bpmn-error-543&amp;quot; cam-error-message=&amp;quot;anErrorMessage&amp;quot; /&amp;gt;  In the example above, the button is bound to the error code bpmn-error-543 with the message anErrorMessage.</description>
    </item>
    
    <item>
      <title>Execute Filter List</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/filter/get-execute-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/filter/get-execute-list/</guid>
      <description>Executes the saved query of the filter by id and returns the result list.
Method GET /filter/{id}/list
Parameters Path Parameters  Name Description   id The id of the filter to execute.   Query Parameters  Name Description   firstResult Pagination of results. Specifies the index of the first result to return.   maxResults  Pagination of results. Specifies the maximum number of results to return.</description>
    </item>
    
    <item>
      <title>Get BPMN 2.0 XML</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get-xml/</guid>
      <description>Retrieves the BPMN 2.0 XML of a process definition.
Method GET /process-definition/{id}/xml
GET /process-definition/key/{key}/xml (returns the XML for the latest version of the process definition which belongs to no tenant)
GET /process-definition/key/{key}/tenant-id/{tenant-id}/xml (returns the XML for the latest version of the process definition for tenant)
Parameters Path Parameters  Name Description   id The id of the process definition.   key The key of the process definition (the latest version thereof) to be retrieved.</description>
    </item>
    
    <item>
      <title>Get Case Instance Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/variables/get-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/variables/get-variable/</guid>
      <description>Retrieves a variable of a given case instance by id.
Method GET /case-instance/{id}/variables/{varName}
Parameters Path Parameters  Name Description   id The id of the case instance to retrieve the variable from.   varName The name of the variable to get.   Query Parameters  Name Description   deserializeValue  Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).</description>
    </item>
    
    <item>
      <title>Get Instance</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/get/</guid>
      <description>Retrieves a process instance by id, according to the ProcessInstance interface in the engine.
Method GET /process-instance/{id}
Parameters Path Parameters  Name Description   id The id of the process instance to be retrieved.   Result A JSON object corresponding to the ProcessInstance interface in the engine. Its properties are as follows:
 Name Value Description   id String The id of the process instance.   definitionId String The id of the process definition this instance belongs to.</description>
    </item>
    
    <item>
      <title>Lock External Task</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/post-lock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/post-lock/</guid>
      <description>Lock an external task by a given id for a specified worker and amount of time. Note: Attempting to lock an already locked external task with the same worker will succeed and a new lock duration will be set, starting from the current moment.
Method POST /external-task/{id}/lock
Parameters Path Parameters  Name Description   id The id of the external task.   Request Body A JSON object with the following properties:</description>
    </item>
    
    <item>
      <title>Put Local Execution Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/execution/local-variables/put-local-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/execution/local-variables/put-local-variable/</guid>
      <description>Sets a variable in the context of a given execution by id. Update does not propagate upwards in the execution hierarchy.
Method PUT /execution/{id}/localVariables/{varName}
Parameters Path Parameters  Name Description   id The id of the execution to set the variable for.   varName The name of the variable to set.   Request Body A JSON object with the following properties:
NameDescriptionvalueThe variable&#39;s value.</description>
    </item>
    
    <item>
      <title>Re-enable Case Execution</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/post-reenable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/post-reenable/</guid>
      <description>Performs a transition from DISABLED state to ENABLED state. In relation to the state transition, it is possible to update or delete case instance variables (please note: deletion precedes update).
Method POST /case-execution/{id}/reenable
Parameters Path Parameters  Name Description   id The id of the case execution to re-enable.   Request Body A JSON object with the following properties:
 Name Description   variables A JSON object containing variable key-value pairs.</description>
    </item>
    
    <item>
      <title>Set Job Retries</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job/put-set-job-retries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job/put-set-job-retries/</guid>
      <description>Sets the retries of the job to the given number of retries by id.
Method PUT /job/{id}/retries
Parameters Path Parameters  Name Description   id The id of the job to be updated.   Request Body A JSON object with the following properties:
 Name Description   retries The number of retries to set that a job has left.   Result This method returns no content.</description>
    </item>
    
    <item>
      <title>Submit Task Form</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-submit-form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-submit-form/</guid>
      <description>Completes a task and updates process variables using a form submit. There are two difference between this method and the complete method:
 If the task is in state PENDING - i.e., has been delegated before, it is not completed but resolved. Otherwise it will be completed. If the task has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined.</description>
    </item>
    
    <item>
      <title>Terminate Case Execution</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/post-terminate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/post-terminate/</guid>
      <description>Performs a transition from ACTIVE state to TERMINATED state if the execution belongs to a task or a stage and performs a transition from AVAILABLE state to TERMINATED state if the execution belongs to a milestone. In relation to the state transition, it is possible to update or delete case instance variables (please note: deletion precedes update).
Method POST /case-execution/{id}/terminate
Parameters Path Parameters  Name Description   id The id of the case execution to terminate.</description>
    </item>
    
    <item>
      <title>Terminate Events</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/terminate-event/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/bpmn20/events/terminate-event/</guid>
      <description>A terminate event ends the complete scope where the event is raised and all inner scopes.
It is useful if you have a parallel split in your process and you want to immediately consume all tokens that are currently available.
If you use it on the process instance level, the whole process is terminated. On a subprocess level the current scope and all inner processes will be terminated.
 Terminate Event Definition A terminate event is modeled as a end event with an additional definition element to mark the termination:</description>
    </item>
    
    <item>
      <title>模板</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/templating/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/templating/</guid>
      <description>Camunda平台支持模板引擎，兼容JSR-223的脚本引擎。因此，模板用于任何可以使用脚本的地方。
在Camunda平台的社区版本中，以下模板引擎是开箱即用的：
 FreeMarker  以下模板引擎是作为插件添加：
 Apache Velocity  脚本引擎包装器的实现可以在camunda-template-engines资源库中找到。
此外，以下模板引擎可以在企业版中使用：
 XSLT  安装一个模板引擎 为嵌入式流程引擎安装模板引擎 模板引擎和脚本引擎是用相同方式安装的。这意味着模板引擎必须被添加到流程引擎的classpath中。
使用嵌入式流程引擎时，模板引擎库必须添加到应用程序部署中。在mavenwar项目中使用流程引擎时，模板引擎依赖必须作为依赖项添加到mavenpom.xml文件中。
请导入Camunda BOM，以确保Camunda项目的版本是正确的。
&amp;lt;dependencies&amp;gt; &amp;lt;!-- freemarker --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.camunda.template-engines&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camunda-template-engines-freemarker&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- apache velocity --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.camunda.template-engines&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camunda-template-engines-velocity&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt;  为分布式流程引擎安装一个模板引擎 当使用一个分布式流程引擎时，模板需要添加到分布式流程引擎的classpath中。classpath的位置取决于应用服务器。在Apache Tomcat中，库必须被添加到共享的lib/文件夹中。
FreeMarker 是封装在Camunda预编译发行版中的。
使用模板引擎 如果模板引擎库在classpath中，你可以在BPMN流程中任何可以使用脚本的地方使用模板，例如作为一个脚本任务或输入输出映射。 FreeMarker模板引擎是Camunda平台发布的一部分。
在模板内部，BPMN元素范围的所有流程变量都是可用的。模板也可以从外部资源加载，如脚本源部分所述。
下面的例子显示了一个FreeMarker模板，它的结果被保存在流程变量text中：
&amp;lt;scriptTask id=&amp;quot;templateScript&amp;quot; scriptFormat=&amp;quot;freemarker&amp;quot; camunda:resultVariable=&amp;quot;text&amp;quot;&amp;gt; &amp;lt;script&amp;gt; Dear ${customer}, thank you for working with Camunda Platform ${version}. Greetings, Camunda Developers &amp;lt;/script&amp;gt; &amp;lt;/scriptTask&amp;gt;  在输入输出映射中，使用外部模板来生成 &amp;ldquo;camunda:connector&amp;rdquo; 的有效载荷是非常有用的。</description>
    </item>
    
    <item>
      <title>自定义代码的安全性</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/securing-custom-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/securing-custom-code/</guid>
      <description> 流程引擎提供了许多外部扩展点，可以通过使用Java代码、表达式语言、 脚本 和 模板来定制流程的行为。虽然这些外部扩展点给了流程实施方面很大的灵活性，但如果落入坏人之手，它们就有可能执行恶意代码。因此，最好限制对允许提交自定义代码的API的访问，只允许受信任的人使用。在提交自定义代码（通过Java或REST API）时，存在以下概念：
 部署: 大部分的自定义逻辑是随着流程、案例或决策模型的部署而提交的。例如，在BPMN 2.0的XML中定义了一个执行监听器的调用。 查询: 一些查询可以提交具有动态表达式的参数（目前只有任务查询）。这使用户能够定义可重复使用的查询，这些查询可以重复执行并动态地适应不断变化的情况。例如，任务查询 taskService.createTaskQuery().dueBeforeExpression(${now()}).list(); 使用了一个表达式，总是返回当前到期的任务。Camunda Tasklist 的 任务过滤器（task filters）提供了这样的查询方法。  只有受信任的人才应被授权与这些端点进行互动的能力。如何限制访问，将在接下来的章节中概述。
如果Camunda平台自身在受信任的环境 如果Camunda平台部署在一个只有受信任方能访问系统的环境中时（例如由于防火墙策略），任何不受信任方都不能访问API以提交自定义代码，因此无需遵守以下建议。
部署 可以通过使用授权框架来限制对执行部署的访问，并对任何可能不受信任的一方可能访问的端点激活认证检查。进行部署的关键权限是 &amp;ldquo;部署/创建&amp;rdquo;。不受信任的用户不应该被授予这个权限。
查询 查询访问一般不能用授权来限制。相反，一个查询的结果被简化为用户被授权访问的实体。因此，授权权限不能被用来保护查询中的表达式计算。
流程引擎配置提供了两个标志 adhoc 和 stored 来切换对查询中表达式的计算。临时查询是直接提交的查询。例如，taskService.createTaskQuery().list();会创建并执行一个 adhoc 查询。这样，存储查询会与过滤器一起被持久化，并在过滤器被执行时被执行。通过将配置属性enableExpressionsInAdhocQueries设置为false，可以禁用临时查询中的表达式。相应地，属性enableExpressionsInStoredQueries会禁用存储查询中的表达式。如果在禁用表达式计算的情况下使用表达式，流程引擎会在计算表达式之前引发一个异常，从而防止恶意代码被执行。
存在以下配置组合：
 enableExpressionsInAdhocQueries=true, enableExpressionsInStoredQueries=true。表达式评估在任何查询中都被启用。如果所有用户都被信任，请使用此设置。 enableExpressionsInAdhocQueries=false, enableExpressionsInStoredQueries=true: 默认设置。临时查询不能使用表达式，但是可以定义和执行带有表达式的过滤器。可以通过授予授权权限 Filter/Create 来限制创建过滤器的权限。如果所有被授权创建过滤器的用户都是被信任的，请使用此设置。 enableExpressionsInAdhocQueries=false, enableExpressionsInStoredQueries=false: 表达式在所有查询中被禁用。如果上述设置都不能保证安全，请使用此设置。  </description>
    </item>
    
    <item>
      <title>外部任务</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/external-tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/external-tasks/</guid>
      <description>流程引擎支持两种执行服务任务的方式。
 内部服务任务：同步调用与流程应用程序一起部署的代码 外部任务：在一个可以被工作者轮询的列表中提供一个工作单元  当代码被实现为委托代码或 脚本时，会使用第一个内部服务任务。外部（服务）任务的工作方式是：流程引擎将一个工作单元发布给外部工作者去完成。我们把这称为 外部任务模式 。
请注意，上面的区别并没有说实际的 &amp;ldquo;业务逻辑&amp;rdquo; 是在本地实现还是作为远程服务实现。内部服务任务调用的 Java代理类 也可以自己实现业务逻辑，也可以调用 Web/rest 服务，向另一个系统发送消息等等。对于外部工作者也是如此。外部工作者可以直接实现业务逻辑或再次委托给远程服务实现。
外部任务模式 执行外部任务的流程可以分为三个步骤，如下图所示：
 流程引擎（Process Engine）: 创建外部任务实例 外部工作者（External Worker）: 获取和锁定外部任务 外部工作者（External Worker）和 流程引擎（Process Engine）: 完整的外部任务实例  当流程引擎遇到一个被配置为外部处理的服务任务时，它会创建一个外部任务实例并将其添加到外部任务列表中（步骤1）。该任务实例接收一个主题（topic）*，该主题确定了要执行的工作的性质。在未来的某个时间，一个外部工作者可以为一组特定的主题获取并锁定任务（步骤2）。为了防止一个任务被多个工作者同时获取，一个任务有一个基于时间戳的锁，这个锁在任务被获取时被设置。只有当锁过期时，另一个工作者才能再次获取该任务。当外部工作者完成了所需的工作，它可以向流程引擎发出信号，然后流程引擎继续执行流程（步骤3）。
类比 **用户任务**外部任务在概念上与用户任务非常相似。在第一次尝试理解外部任务模式时，将其与用户任务进行类比思考可能会有所帮助。 用户任务由流程引擎创建并添加到任务列表中。然后，流程引擎等待人类用户查询该列表，提出任务要求，然后完成它。外部任务是类似的。一个外部任务被创建，然后被添加到一个主题。然后，一个外部应用程序查询该主题并锁定该任务。在任务被锁定后，外部应用程序可以完成它。
这种模式的本质是，执行实际工作的程序独立于流程引擎，并通过轮询流程引擎的API的方式接收工作项。这样做有以下好处：
 解耦系统: 外部工作者与流程引擎不需要在同一Java容器中、同一机器上、同一集群中或甚至在同一大陆上运行。只需要它能够访问流程引擎的API（通过REST或Java）。由于采用了轮询模式，外部工作者不需要暴露任何接口供流程引擎访问。 解耦技术选择: 外部工作者不需要用Java实现。相反，可以使用任何最适合执行工作项的技术，并且可以用来访问流程引擎的API（通过REST或Java）。 外部工作者可以专注某个主题: 外部工作者不需要是一个通用的应用程序。每个外部任务实例都会收到要执行的任务性质的主题名。外部工作者可以只轮询它们可以做到的任务主题。 细粒度扩展: 如果某主题服务任务具有较高的负载，相应主题的外部工作者的数量可以独立于流程引擎来扩展。 独立维护: 工作者可以独立于流程引擎进行维护，而不会破坏操作。例如，如果有某个特定主题的工作者停机一段时间（例如，由于更新停机），对流程引擎没有直接影响。这类工作者的外部任务的执行会优雅的存储在外部任务列表中，直到外部工作者恢复并运行。  使用外部任务 为了使用外部任务，它们必须在BPMN XML中声明。在运行时，可以通过Java和REST API访问外部任务实例。下面将解释API的概念，并重点介绍Java API。通常情况下，REST API在这种情况下更适合，特别是在不同地域，使用不同技术的外部工作者。
BPMN 在流程定义的BPMN XML中，可以通过使用属性camunda:type和camunda:topic来声明服务任务由外部工作者执行。例如，服务任务 Validate Address 可以被配置为主题 AddressValidation ，如下所示：
&amp;lt;serviceTask id=&amp;quot;validateAddressTask&amp;quot; name=&amp;quot;Validate Address&amp;quot; camunda:type=&amp;quot;external&amp;quot; camunda:topic=&amp;quot;AddressValidation&amp;quot; /&amp;gt;  也可以使用表达式而不是固定值定义主题的名字。</description>
    </item>
    
    <item>
      <title>Activate/Suspend Job Definitions By Process Definition Key</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job-definition/put-activate-suspend-by-proc-def-key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job-definition/put-activate-suspend-by-proc-def-key/</guid>
      <description>Activates or suspends job definitions with the given process definition key.
Method PUT /job-definition/suspended
Parameters Request Body A JSON object with the following properties:
 Name Description   processDefinitionKey The process definition key of the job definitions to activate or suspend.   processDefinitionTenantId Only activate or suspend job definitions of a process definition which belongs to a tenant with the given id.   processDefinitionWithoutTenantId Only activate or suspend job definitions of a process definition which belongs to no tenant.</description>
    </item>
    
    <item>
      <title>Execute Filter List (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/filter/post-execute-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/filter/post-execute-list/</guid>
      <description>Executes the saved query of the filter by id and returns the result list. This method is slightly more powerful then the Get Execute Filter List method because it allows to extend the saved query of the filter.
Security ConsiderationThe request body of this method takes a JSON-serialized query. Some query types (e.g., task queries) allow to specify EL expressions in their parameters and may therefore be abused for remote code execution.</description>
    </item>
    
    <item>
      <title>Extend Lock on External Task</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/post-extend-lock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/post-extend-lock/</guid>
      <description>Extends the timeout of the lock by a given amount of time.
Method POST /external-task/{id}/extendLock
Parameters Path Parameters  Name Description   id The id of the external task.   Request Body A JSON object with the following properties:
 Name Description   newDuration An amount of time (in milliseconds). This is the new lock duration starting from the current moment.    workerId The ID of a worker who is locking the external task.</description>
    </item>
    
    <item>
      <title>Get Case Instance Variable (Binary)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/variables/get-variable-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/variables/get-variable-binary/</guid>
      <description>Retrieves a binary variable of a given case instance by id. Applicable for byte array and file variables.
Method GET /case-instance/{id}/variables/{varName}/data
Parameters Path Parameters  Name Description   id The id of the case instance to retrieve the variable from.   varName The name of the variable to get.   Result For binary variables or files without any MIME type information, a byte stream is returned. File variables with MIME type information are returned as the saved type.</description>
    </item>
    
    <item>
      <title>Get Definition</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get/</guid>
      <description>Retrieves a process definition according to the ProcessDefinition interface in the engine.
Method GET /process-definition/{id}
GET /process-definition/key/{key} (returns the latest version of the process definition which belongs to no tenant)
GET /process-definition/key/{key}/tenant-id/{tenant-id} (returns the latest version of the process definition for tenant)
Parameters Path Parameters  Name Description   id The id of the process definition to be retrieved.   key The key of the process definition (the latest version thereof) to be retrieved.</description>
    </item>
    
    <item>
      <title>Get Exception Stacktrace</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job/get-exception-stacktrace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job/get-exception-stacktrace/</guid>
      <description>Retrieves the exception stacktrace corresponding to the passed job id.
Method GET /job/{id}/stacktrace
Parameters Path Parameters  Name Description   id The id of the job to get the exception stacktrace for.   Result The result is the corresponding stacktrace as plain text.
Response Codes  Code Media type Description   200 text/plain Request successful.   404 application/json Job with given id does not exist. See the Introduction for the error response format.</description>
    </item>
    
    <item>
      <title>Limitations</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/model-api/cmmn-model-api/limitations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/model-api/cmmn-model-api/limitations/</guid>
      <description>The CMMN model API is able to read CMMN 1.1 as well as CMMN 1.0 models. Its primary use case is to work with models of the latest version, such that there are limitations when editing CMMN models of prior versions.
 ModelElementType#getTypeNamespace() returns CMMN 1.1 namespace for elements which are present in CMMN 1.0 and CMMN 1.1 CMMN#createEmptyModel() always creates a CMMN 1.1 model. CMMN 1.0 models cannot be created anymore.</description>
    </item>
    
    <item>
      <title>Modify Process Instance Execution State</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/post-modification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/post-modification/</guid>
      <description>Submits a list of modification instructions to change a process instance&#39;s execution state. A modification instruction is one of the following:
 Starting execution before an activity Starting execution after an activity on its single outgoing sequence flow Starting execution on a specific sequence flow Cancelling an activity instance, transition instance, or all instances (activity or transition) for an activity  Instructions are executed immediately and in the order they are provided in this request&#39;s body.</description>
    </item>
    
    <item>
      <title>Post Local Execution Variable (Binary)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/execution/local-variables/put-local-variable-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/execution/local-variables/put-local-variable-binary/</guid>
      <description>Sets the serialized value for a binary variable or the binary value for a file variable in the context of a given execution by id.
Method POST /execution/{id}/localVariables/{varName}/data
Parameters Path Parameters  Name Description   id The id of the execution to set the variable for.   varName The name of the variable to set.   Request Body For binary variables a multipart form submit with the following parts:</description>
    </item>
    
    <item>
      <title>Resolve Task</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-resolve/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-resolve/</guid>
      <description>Resolves a task and updates execution variables.
Resolving a task marks that the assignee is done with the task delegated to them, and that it can be sent back to the owner. Can only be executed when the task has been delegated. The assignee will be set to the owner, who performed the delegation.
Method POST /task/{id}/resolve
Parameters Path Parameters  Name Description   id The id of the task to resolve.</description>
    </item>
    
    <item>
      <title>Set Assignee</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-assignee/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-assignee/</guid>
      <description>Changes the assignee of a task to a specific user.
Note: The difference with the Claim Task method is that this method does not check if the task already has a user assigned to it.
Method POST /task/{id}/assignee
Parameters Path Parameters  Name Description   id The id of the task to set the assignee for.   Request Body A JSON object with the following properties:
 Name Description   userId The id of the user that will be the assignee of the task.</description>
    </item>
    
    <item>
      <title>Unlock User</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/user/unlock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/user/unlock/</guid>
      <description>Unlocks a user by id.
Method POST /user/{id}/unlock
Parameters Path Parameters  Name Description   id The id of the user to be unlocked.   Result This method returns no content.
Response Codes  Code Media type Description   204 application/json Request successful.   403 application/json If the user who perform the operation is not a camunda admin user.   404 application/json User cannot be found.</description>
    </item>
    
    <item>
      <title>连接器</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/connectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/connectors/</guid>
      <description>通过依赖项目camunda-connect，流程引擎支持简单的连接器。以下是目前已实现的连接器：
 Connector ID   REST HTTP http-connector   SOAP HTTP soap-http-connector   也可以在camunda中实现你自己的自定义连接器。关于扩展连接器的更多信息，请访问外部连接器章节。
配置 Camunda连接器 由于Camunda连接器只有在使用流程引擎时才部分可用（查看下面的列表）。通过使用预建的发行版，Camunda连接器已经被预先配置好了。
存在以下 &amp;ldquo;连接&amp;rdquo; 组件：
 camunda-connect-core: 一个只包含核心连接类的jar。该组价已经可以作为流程引擎的依赖项。除了 &amp;ldquo;camunda-connect-core&amp;rdquo; 之外，还有 &amp;ldquo;camunda-connect-http-client&amp;rdquo; 和 &amp;ldquo;camunda-connect-soap-http-client&amp;rdquo; 等单个连接器的实现。当需要重新配置默认连接器或使用自定义连接器实现时，应使用这些依赖关系。 camunda-connect-connectors-all: 没有依赖关系的单一jar，包含HTTP和SOAP连接器。 camunda-engine-plugin-connect: 是一个流程引擎插件，用于向Camunda平台添加连接器。  Maven方式导入 请导入Camunda BOM，以确保每个Camunda项目的版本正确。
camunda-connect-core camunda-connect-core包含连接器的核心类。此外，HTTP和SOAP连接器可以通过camunda-connect-http-client和camunda-connect-soap-http-client的依赖来添加。这些组件将引入他们自身的依赖，如Apache HTTP客户端。为了与流程引擎集成，需要camunda-engine-plugin-connect这个工件。Maven的坐标如下：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.camunda.connect&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camunda-connect-core&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;  &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.camunda.connect&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camunda-connect-http-client&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;  &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.camunda.connect&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camunda-connect-soap-http-client&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;  &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.camunda.bpm&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camunda-engine-plugin-connect&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;  camunda-connect-connectors-all 这个组件包含HTTP和SOAP连接器以及它们的依赖关系。为了避免与这些依赖的其他版本冲突，这些依赖被重新定位到不同的包中。camunda-connect-connectors-all的Maven坐标如下。
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.camunda.connect&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camunda-connect-connectors-all&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;  配置流程引擎插件 camunda-engine-plugin-connect包含一个名为org.</description>
    </item>
    
    <item>
      <title>Modify Process Instance Execution State Async</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/post-modification-async/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/post-modification-async/</guid>
      <description>Submits a list of modification instructions to change a process instance&#39;s execution state async. A modification instruction is one of the following:
 Starting execution before an activity Starting execution after an activity on its single outgoing sequence flow Starting execution on a specific sequence flow Cancelling an activity instance, transition instance, or all instances (activity or transition) for an activity  Instructions are executed asynchronous and in the order they are provided in this request&#39;s body.</description>
    </item>
    
    <item>
      <title>Activate/Suspend Job By Id</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job/put-activate-suspend-by-id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job/put-activate-suspend-by-id/</guid>
      <description>Activates or suspends a given job by id.
Method PUT /job/{id}/suspended
Parameters Path Parameters  Name Description   id The id of the job to activate or suspend.   Request Body A JSON object with the following properties:
 Name Description   suspended A Boolean value which indicates whether to activate or suspend a given job. When the value is set to true, the given job will be suspended and when the value is set to false, the given job will be activated.</description>
    </item>
    
    <item>
      <title>Delegate Task</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-delegate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-delegate/</guid>
      <description>Delegates a task to another user.
Method POST /task/{id}/delegate
Parameters Path Parameters  Name Description   id The id of the task to delegate.   Request Body A JSON object with the following properties:
 Name Description   userId The id of the user that the task should be delegated to.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.</description>
    </item>
    
    <item>
      <title>Delete Async (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/decision-instance/post-delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/decision-instance/post-delete/</guid>
      <description>Delete multiple historic decision instances asynchronously (batch). At least historicDecisionInstanceIds or historicDecisionInstanceQuery has to be provided. If both are provided then all instances matching query criterion and instances from the list will be deleted.
Method POST /history/decision-instance/delete
Parameters Request Body A JSON object with the following properties:
 Name Description   historicDecisionInstanceIds A list historic decision instance ids to delete.   historicDecisionInstanceQuery  A historic decision instance query like the request body described by POST /history/decision-instance .</description>
    </item>
    
    <item>
      <title>Delete Async (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-instance/post-delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-instance/post-delete/</guid>
      <description>Delete multiple historic process instances asynchronously (batch). At least historicProcessInstanceIds or historicProcessInstanceQuery has to be provided. If both are provided then all instances matching query criterion and instances from the list will be deleted.
Method POST /history/process-instance/delete
Parameters Request Body A JSON object with the following properties:
 Name Description   historicProcessInstanceIds A list historic process instance ids to delete.   historicProcessInstanceQuery  A historic process instance query like the request body described by POST /history/process-instance .</description>
    </item>
    
    <item>
      <title>Delete Async (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/post-delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/post-delete/</guid>
      <description>Deletes multiple process instances asynchronously (batch).
Method POST /process-instance/delete
Parameters Request Body A JSON object with the following properties:
 Name Description   processInstanceIds A list process instance ids to delete.   processInstanceQuery  A process instance query like the request body described by POST /process-instance .    deleteReason A string with delete reason.   skipCustomListeners Skip execution listener invocation for activities that are started or ended as part of this request.</description>
    </item>
    
    <item>
      <title>Delete Async Historic Query Based (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/post-delete-historic-query-based/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/post-delete-historic-query-based/</guid>
      <description>Deletes a set of process instances asynchronously (batch) based on a historic process instance query.
Method POST /process-instance/delete-historic-query-based
Parameters Request Body A JSON object with the following properties:
 Name Description   processInstanceIds A list of process instance ids to delete.   historicProcessInstanceQuery  A historic process instance query like the request body described by POST /history/process-instance .    deleteReason A string with delete reason.   skipCustomListeners Skip execution listener invocation for activities that are started or ended as part of this request.</description>
    </item>
    
    <item>
      <title>Execute Filter Count</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/filter/get-execute-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/filter/get-execute-count/</guid>
      <description>Executes the saved query of the filter by id and returns the count.
Method GET /filter/{id}/count
Parameters Path Parameters  Name Description   id The id of the filter to execute.   Result A JSON object with a single count property.
 Name Value Description   count Number The number of filters that fulfill the query criteria.   Response Codes  Code Media type Description   200 application/json Request successful.</description>
    </item>
    
    <item>
      <title>Get Case Execution Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/variables/get-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/variables/get-variable/</guid>
      <description>Retrieves a variable of a given case execution by id.
Method GET /case-execution/{id}/variables/{varName}
Parameters Path Parameters  Name Description   id The id of the case execution to retrieve the variable from.   varName The name of the variable to get.   Query Parameters  Name Description   deserializeValue  Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).</description>
    </item>
    
    <item>
      <title>Get Instance Count (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/post-query-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/post-query-count/</guid>
      <description>Queries for the number of process instances that fulfill the given parameters. This method takes the same message body as the Get Instances (POST) method and therefore it is slightly more powerful than the Get Instance Count method.
Method POST /process-instance/count
Parameters Request Body A JSON object with the following properties:
 Name Description   processInstanceIds Filter by a list of process instance ids. Must be a JSON array of Strings.</description>
    </item>
    
    <item>
      <title>Get Local Case Execution Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/local-variables/get-local-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/local-variables/get-local-variable/</guid>
      <description>Retrieves a variable from the context of a given case execution. Does not traverse the parent case execution hierarchy.
Method GET /case-execution/{id}/localVariables/{varName}
Parameters Path Parameters  Name Description   id The id of the case execution to retrieve the variable from.   varName The name of the variable to get.   Query Parameters  Name Description   deserializeValue  Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).</description>
    </item>
    
    <item>
      <title>JSF Task Forms</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/task-forms/jsf-task-forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/task-forms/jsf-task-forms/</guid>
      <description>Adding JSF Forms to your Process Application If you add JSF forms as described below, you can easily use them as  external task forms.
A working example can be found in the examples repository.
The BPMN process used for this example is shown in the image below:
In this process model we added so called form keys to
 the Start Event &amp;ldquo;invoice received&amp;rdquo;. This is the form the user has to complete to start a new process instance.</description>
    </item>
    
    <item>
      <title>Set Job Retries Async (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job/post-set-job-retries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job/post-set-job-retries/</guid>
      <description>Create a batch to set retries of jobs asynchronously.
Method POST /job/retries
Parameters Request Body A JSON object with the following properties:
 Name Description   jobIds A list of job ids to set retries for.   jobQuery  A job query like the request body for the Get Jobs (POST)  method.    retries An integer representing the number of retries. Please note that the value cannot be negative or null.</description>
    </item>
    
    <item>
      <title>Set Job Retries Async (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/post-set-job-retries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/post-set-job-retries/</guid>
      <description>Create a batch to set retries of jobs associated with given processes asynchronously.
Method POST /process-instance/job-retries
Parameters Request Body A JSON object with the following properties:
 Name Description   processInstances A list of process instance ids to fetch jobs, for which retries will be set.   processInstanceQuery  A process instance query like the request body for the Get Instances (POST)  method.    retries An integer representing the number of retries.</description>
    </item>
    
    <item>
      <title>Set Job Retries Async Historic Query Based (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/post-set-job-retries-historic-query-based/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/post-set-job-retries-historic-query-based/</guid>
      <description>Create a batch to set retries of jobs asynchronously based on a historic process instance query.
Method POST /process-instance/job-retries-historic-query-based
Parameters Request Body A JSON object with the following properties:
 Name Description   processInstances A list of process instance ids to fetch jobs, for which retries will be set.   historicProcessInstanceQuery  A historic process instance query like the request body described by POST /history/process-instance .    retries An integer representing the number of retries.</description>
    </item>
    
    <item>
      <title>Set Variables Async (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/post-set-variables-async/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/post-set-variables-async/</guid>
      <description>Update or create runtime process variables in the root scope of process instances.
Method POST /process-instance/variables-async
Parameters Request Body A JSON object with the following properties:
 Name Description   processInstanceIds A list of process instance ids that define a group of process instances to which the operation will set variables.   processInstanceQuery  A process instance query like the request body for the Get Instances (POST)  method to select process instances the operation will set variables to.</description>
    </item>
    
    <item>
      <title>Start Process Instance</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/post-start-process-instance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/post-start-process-instance/</guid>
      <description>Instantiates a given process definition. Process variables and business key may be supplied in the request body.
Method POST /process-definition/{id}/start
POST /process-definition/key/{key}/start (starts the latest version of the process definition which belongs to no tenant)
POST /process-definition/key/{key}/tenant-id/{tenant-id}/start (starts the latest version of the process definition for tenant)
Parameters Path Parameters  Name Description   id The id of the process definition to be retrieved.   key The key of the process definition (the latest version thereof) to be retrieved.</description>
    </item>
    
    <item>
      <title>Unlock External Task</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/post-unlock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/post-unlock/</guid>
      <description>Unlocks an external task by id. Clears the task&amp;rsquo;s lock expiration time and worker id.
Method POST /external-task/{id}/unlock
Parameters Path Parameters  Name Description   id The id of the external task to unlock.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.   404 application/json Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, e.</description>
    </item>
    
    <item>
      <title>Update/Delete Case Instance Variables</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/variables/post-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/variables/post-variables/</guid>
      <description>Updates or deletes the variables of a case instance. Please note: deletion precedes update.
Method POST /case-instance/{id}/variables
Parameters Path Parameters  Name Description   id The id of the case instance to set variables for.   Request Body A JSON object with the following properties:
 Name Description   modifications A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object with the following properties: NameDescriptionvalueThe variable&#39;s value.</description>
    </item>
    
    <item>
      <title>Update/Delete Local Execution Variables</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/execution/local-variables/post-local-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/execution/local-variables/post-local-variables/</guid>
      <description>Updates or deletes the variables in the context of an execution by id. The updates do not propagate upwards in the execution hierarchy. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
Method POST /execution/{id}/localVariables
Parameters Path Parameters  Name Description   id The id of the execution to set variables for.   Request Body A JSON object with the following properties:</description>
    </item>
    
    <item>
      <title>流程版本控制</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/process-versioning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/process-versioning/</guid>
      <description>流程定义的版本管理 业务流程本质上是需要长期运行的。流程实例可能会持续数周，或数月。在这期间，流程实例的状态被存储到数据库中。但总有那么一天，你需要在仍有运行中的实例的情况下改变流程定义。
流程引擎支持这一点：
 如果你重新部署一个改变了的流程定义，你会在数据库中得到一个新的版本。 正在运行的流程实例将继续在它所在的旧版本执行。 新的流程实例将在新的版本中运行 - 除非明确指定执行版本。 在一定范围内支持将流程实例迁移到新版本。  你可以在流程定义表中看到不同的版本，以及流程实例与版本的关联。
多租户如果你正在使用以tenantID区分的多租户，那么每个租户都有自己的流程定义，其版本与其他租户无关。参见多租户部分。
流程实例会使用哪个版本 当你：
 通过 key 启动一个流程实例时。它启动一个 最新部署版本 的流程定义的实例。 *通过 id 启动一个流程实例时。它以数据库ID启动已部署的流程定义的一个实例。通过使用它，你可以启动一个 特定版本 的流程。  默认和推荐的用法是使用 startProcessInstanceByKey ，它总是使用最新的版本。
processEngine.getRuntimeService().startProcessInstanceByKey(&amp;quot;invoice&amp;quot;); // will use the latest version (2 in our example)  如果你想专门启动一个旧版本的流程实例，可以在流程定义中查询来找到正确的流程定义id，然后使用startProcessInstanceById。
ProcessDefinition pd = processEngine.getRepositoryService().createProcessDefinitionQuery() .processDefinitionKey(&amp;quot;invoice&amp;quot;) .processDefinitionVersion(1).singleResult(); processEngine.getRuntimeService().startProcessInstanceById(pd.getId());  当你使用 BPMN CallActivities 时，你可以配置使用哪个版本:
&amp;lt;callActivity id=&amp;quot;callSubProcess&amp;quot; calledElement=&amp;quot;checkCreditProcess&amp;quot; camunda:calledElementBinding=&amp;quot;latest|deployment|version&amp;quot; camunda:calledElementVersion=&amp;quot;17&amp;quot;&amp;gt; &amp;lt;/callActivity&amp;gt;  or
&amp;lt;callActivity id=&amp;quot;callSubProcess&amp;quot; calledElement=&amp;quot;checkCreditProcess&amp;quot; camunda:calledElementBinding=&amp;quot;versionTag&amp;quot; camunda:calledElementVersionTag=&amp;quot;ver-tag-1.</description>
    </item>
    
    <item>
      <title>过程实例迁移</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/process-instance-migration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/process-instance-migration/</guid>
      <description>Whenever a new version of a process definition is deployed, existing process instances that run on previous versions are not affected. That means, the new process definition does not apply to them automatically. If process instances are supposed to continue execution on a different process definition, the process instance migration API can be employed.
Migration consists of two parts:
 Creating a migration plan that describes how process instances are to be migrated from one process definition to another Applying the migration plan to a set of process instances  A migration plan consists of a set of migration instructions that in essence are mappings between activities of the two process definitions.</description>
    </item>
    
    <item>
      <title>Activate/Suspend Jobs By Job Definition Id</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job/put-activate-suspend-by-job-def-id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job/put-activate-suspend-by-job-def-id/</guid>
      <description>Activates or suspends jobs with the given job definition id.
Method PUT /job/suspended
Parameters Request Body A JSON object with the following properties:
 Name Description   jobDefinitionId The job definition id of the jobs to activate or suspend.   suspended A Boolean value which indicates whether to activate or suspend all jobs with the given job definition id. When the value is set to true, all jobs with the given job definition id will be suspended and when the value is set to false, all jobs with the given job definition id will be activated.</description>
    </item>
    
    <item>
      <title>Delete Local Execution Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/execution/local-variables/delete-local-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/execution/local-variables/delete-local-variable/</guid>
      <description>Deletes a variable in the context of a given execution by id. Deletion does not propagate upwards in the execution hierarchy.
Method DELETE /execution/{id}/localVariables/{varName}
Parameters Path Parameters  Name Description   id The id of the execution to delete the variable from.   varName The name of the variable to delete.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.</description>
    </item>
    
    <item>
      <title>Delete all Historic Variable Instances of a Process Instance</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-instance/delete-variable-instances/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/history/process-instance/delete-variable-instances/</guid>
      <description>Deletes all variables of a process instance from the history by id.
Method DELETE /history/process-instance/{id}/variable-instances
Parameters Path Parameters  Name Description   id The id of the process instance for which all historic variables are to be deleted.   Result No content.
Response Codes  Code Media type Description   204  Request successful.   404 application/json Historic process instance with given id does not exist.</description>
    </item>
    
    <item>
      <title>Execute Filter Count (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/filter/post-execute-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/filter/post-execute-count/</guid>
      <description>Executes the saved query of the filter by id and returns the count. This method is slightly more powerful then the Get Execute Filter Count method because it allows to extend the saved query of the filter.
Security ConsiderationThe request body of this method takes a JSON-serialized query. Some query types (e.g., task queries) allow to specify EL expressions in their parameters and may therefore be abused for remote code execution.</description>
    </item>
    
    <item>
      <title>Get Case Execution Variable (Binary)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/variables/get-variable-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/variables/get-variable-binary/</guid>
      <description>Retrieves a binary variable of a given case execution by id. Applicable for byte array and file variables.
Method GET /case-execution/{id}/variables/{varName}/data
Parameters Path Parameters  Name Description   id The id of the case execution to retrieve the variable from.   varName The name of the variable to get.   Result For binary variables or files without any MIME type information, a byte stream is returned. File variables with MIME type information are returned as the saved type.</description>
    </item>
    
    <item>
      <title>Get Identity Links</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/identity-links/get-identity-links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/identity-links/get-identity-links/</guid>
      <description>Gets the identity links for a task by id, which are the users and groups that are in some relation to it (including assignee and owner).
Method GET /task/{id}/identity-links
Parameters Path Parameters  Name Description   id The id of the task to retrieve the identity links for.   Query Parameters  Name Description   type Filter by the type of links to include.   Result A JSON object containing the a list of identity links.</description>
    </item>
    
    <item>
      <title>Get Instances (POST)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/post-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/post-query/</guid>
      <description>Queries for process instances that fulfill given parameters through a JSON object. This method is slightly more powerful than the Get Instances method because it allows filtering by multiple process variables of types String, Number or Boolean.
Method POST /process-instance
Parameters Query Parameters  Name Description   firstResult Pagination of results. Specifies the index of the first result to return.   maxResults Pagination of results. Specifies the maximum number of results to return.</description>
    </item>
    
    <item>
      <title>Get Local Case Execution Variable (Binary)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/local-variables/get-local-variable-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/local-variables/get-local-variable-binary/</guid>
      <description>Retrieves a binary variable from the context of a given case execution. Does not traverse the parent case execution hierarchy. Applicable for byte array and file variables.
Method GET /case-execution/{id}/localVariables/{varName}/data
Parameters Path Parameters  Name Description   id The id of the case execution to retrieve the variable from.   varName The name of the variable to get.   Result For binary variables or files without any MIME type information, a byte stream is returned.</description>
    </item>
    
    <item>
      <title>Put Case Instance Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/variables/put-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/variables/put-variable/</guid>
      <description>Sets a variable of a given case instance by id.
Method PUT /case-instance/{id}/variables/{varName}
Parameters Path Parameters  Name Description   id The id of the case instance to set the variable for.   varName The name of the variable to set.   Request Body A JSON object with the following properties:
NameDescriptionvalueThe variable&#39;s value. For variables of type Object, the serialized value has to be submitted as a String value.</description>
    </item>
    
    <item>
      <title>Set External Task Priority</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/put-priority/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/put-priority/</guid>
      <description>Sets the priority of an existing external task by id. The default value of a priority is 0.
Method PUT /external-task/{id}/priority
Parameters Path Parameters  Name Description   id The id of the external task to set the priority for.   Request Body A JSON object with the following properties:
 Name Description   priority The priority of the external task.   Result This method returns no content.</description>
    </item>
    
    <item>
      <title>Set External Task Retries</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/put-retries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/put-retries/</guid>
      <description>Sets the number of retries left to execute an external task by id. If retries are set to 0, an incident is created.
Method PUT /external-task/{id}/retries
Parameters Path Parameters  Name Description   id The id of the external task to set the number of retries for.   Request Body A JSON object with the following properties:
 Name Description   retries The number of retries to set for the external task.</description>
    </item>
    
    <item>
      <title>Set Retries For Multiple External Tasks Async (Batch)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/post-retries-async/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/post-retries-async/</guid>
      <description>Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0, an incident is created.
Method POST /external-task/retries-async
Parameters Request Body A JSON object with the following properties:
 Name Description   retries The number of retries to set for the external task. Must be = 0. If this is 0, an incident is created and the task cannot be fetched anymore unless the retries are increased again.</description>
    </item>
    
    <item>
      <title>Set Retries For Multiple External Tasks Sync</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/put-retries-sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/external-task/put-retries-sync/</guid>
      <description>Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0, an incident is created.
Method PUT /external-task/retries
Parameters Request Body A JSON object with the following properties:
 Name Description   retries The number of retries to set for the external task. Must be = 0. If this is 0, an incident is created and the task cannot be fetched anymore unless the retries are increased again.</description>
    </item>
    
    <item>
      <title>Submit Start Form</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/post-submit-form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/post-submit-form/</guid>
      <description>Starts a process instance using a set of process variables and the business key. If the start event has Form Field Metadata defined, the process engine will perform backend validation for any form fields which have validators defined. See Documentation on Generated Task Forms.
Method POST /process-definition/{id}/submit-form
POST /process-definition/key/{key}/submit-form (starts the latest version of the process definition which belongs to no tenant)
POST /process-definition/key/{key}/tenant-id/{tenant-id}/submit-form (starts the latest version of the process definition for tenant)</description>
    </item>
    
    <item>
      <title>Activate/Suspend Jobs By Process Definition Id</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job/put-activate-suspend-by-proc-def-id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job/put-activate-suspend-by-proc-def-id/</guid>
      <description>Activates or suspends jobs with the given process definition id.
Method PUT /job/suspended
Parameters Request Body A JSON object with the following properties:
 Name Description   processDefinitionId The process definition id of the jobs to activate or suspend.   suspended A Boolean value which indicates whether to activate or suspend all jobs with the given process definition id. When the value is set to true, all jobs with the given process definition id will be suspended and when the value is set to false, all jobs with the given process definition id will be activated.</description>
    </item>
    
    <item>
      <title>Activate/Suspend Process Definition By Id</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/put-activate-suspend-by-id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/put-activate-suspend-by-id/</guid>
      <description>Activates or suspends a given process definition by id or by latest version of process definition key.
Method PUT /process-definition/{id}/suspended
PUT /process-definition/key/{key}/suspended (suspend the latest version of the process definition which belongs to no tenant)
PUT /process-definition/key/{key}/tenant-id/{tenant-id}/suspended (suspended the latest version of the process definition for tenant)
Parameters Path Parameters  Name Description   id The id of the process definition to activate or suspend.   key The key of the process definition (the latest version thereof) to be retrieved.</description>
    </item>
    
    <item>
      <title>Add Identity Link</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/identity-links/post-identity-link/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/identity-links/post-identity-link/</guid>
      <description>Adds an identity link to a task by id. Can be used to link any user or group to a task and specify a relation.
Method POST /task/{id}/identity-links
Parameters Path Parameters  Name Description   id The id of the task to add a link to.   Request Body A JSON object with the following properties:
 Name Description   userId The id of the user to link to the task.</description>
    </item>
    
    <item>
      <title>Filter Resource Options</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/filter/options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/filter/options/</guid>
      <description>The /filter resource supports two custom OPTIONS requests, one for the resource as such and one for individual filter instances. The OPTIONS request allows you to check for the set of available operations that the currently authenticated user can perform on the /filter resource. Whether the user can perform an operation or not may depend on various factors, including the users authorizations to interact with this resource and the internal configuration of the process engine.</description>
    </item>
    
    <item>
      <title>Get Case Execution Variables</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/variables/get-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/variables/get-variables/</guid>
      <description>Retrieves all variables of a given case execution by id.
Method GET /case-execution/{id}/variables
Parameters Path Parameters  Name Description   id The id of the case execution to retrieve the variables from.   Query Parameters  Name Description   deserializeValues  Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).If set to true, a serializable variable will be deserialized on server side and transformed to JSON using Jackson&#39;s POJO/bean property introspection feature.</description>
    </item>
    
    <item>
      <title>Get Local Case Execution Variables</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/local-variables/get-local-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/local-variables/get-local-variables/</guid>
      <description>Retrieves all variables of a given case execution.
Method GET /case-execution/{id}/localVariables
Parameters Path Parameters  Name Description   id The id of the case execution to retrieve the variables from.   Query Parameters  Name Description   deserializeValues  Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).If set to true, a serializable variable will be deserialized on server side and transformed to JSON using Jackson&#39;s POJO/bean property introspection feature.</description>
    </item>
    
    <item>
      <title>Get Message Event Subscription</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/execution/message-event-subscription/get-message-subscription/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/execution/message-event-subscription/get-message-subscription/</guid>
      <description>Retrieves a message event subscription for a given execution by id and a message name.
Method GET /execution/{id}/messageSubscriptions/{messageName}
Parameters Path Parameters  Name Description   id The id of the execution that holds the subscription.   messageName The name of the message that the subscription corresponds to.   Result A JSON object with the following properties:
 Name Description   id The identifier of the event subscription.</description>
    </item>
    
    <item>
      <title>Post Case Instance Variable (Binary)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/variables/post-variable-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/variables/post-variable-binary/</guid>
      <description>Sets the serialized value for a binary variable or the binary value for a file variable.
Method POST /case-instance/{id}/variables/{varName}/data
Parameters Path Parameters  Name Description   id The id of the case instance to set the variable for.   varName The name of the variable to set.   Request Body For binary variables a multipart form submit with the following parts:
 Form Part Name Content Type Description   data application/octet-stream  The binary data to be set.</description>
    </item>
    
    <item>
      <title>Post Process Variable (Binary)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/variables/post-variable-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/variables/post-variable-binary/</guid>
      <description>Sets the serialized value for a binary variable or the binary value for a file variable.
Method POST /process-instance/{id}/variables/{varName}/data
Parameters Path Parameters  Name Description   id The id of the process instance to set the variable for.   varName The name of the variable to set.   Request Body For binary variables a multipart form submit with the following parts:
 Form Part Name Content Type Description   data application/octet-stream  The binary data to be set.</description>
    </item>
    
    <item>
      <title>Activate/Suspend Jobs By Process Definition Key</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job/put-activate-suspend-by-proc-def-key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job/put-activate-suspend-by-proc-def-key/</guid>
      <description>Activates or suspends jobs with the given process definition key.
Method PUT /job/suspended
Parameters Request Body A JSON object with the following properties:
 Name Description   processDefinitionKey The process definition key of the jobs to activate or suspend.   processDefinitionTenantId Only activate or suspend jobs of a process definition which belongs to a tenant with the given id.   processDefinitionWithoutTenantId Only activate or suspend jobs of a process definition which belongs to no tenant.</description>
    </item>
    
    <item>
      <title>Activate/Suspend Process Definitions By Key</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/put-activate-suspend-by-key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/put-activate-suspend-by-key/</guid>
      <description>Activates or suspends process definitions with the given process definition key.
Method PUT /process-definition/suspended
Parameters Request Body A JSON object with the following properties:
 Name Description   processDefinitionKey The key of the process definitions to activate or suspend.   suspended A Boolean value which indicates whether to activate or suspend all process definitions with the given key. When the value is set to true, all process definitions with the given key will be suspended and when the value is set to false, all process definitions with the given key will be activated.</description>
    </item>
    
    <item>
      <title>Delete Case Instance Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/variables/delete-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-instance/variables/delete-variable/</guid>
      <description>Deletes a variable of a given case instance by id.
Method DELETE /case-instance/{id}/variables/{varName}
Parameters Path Parameters  Name Description   id The id of the case instance to delete the variable from.   varName The name of the variable to delete.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.   Example Request DELETE /case-instance/aCaseInstanceId/variables/aVarName</description>
    </item>
    
    <item>
      <title>Delete Identity Link</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/identity-links/post-delete-identity-link/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/identity-links/post-delete-identity-link/</guid>
      <description>Removes an identity link from a task by id.
Method POST /task/{id}/identity-links/delete
Parameters Path Parameters  Name Description   id The id of the task to remove a link from.   Request Body A JSON object with the following properties:
 Name Description   userId The id of the user being part of the link. If you set this parameter, you have to omit groupId.   groupId The id of the group being part of the link.</description>
    </item>
    
    <item>
      <title>Post Case Execution Variable (Binary)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/variables/post-variable-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/variables/post-variable-binary/</guid>
      <description>Sets the serialized value for a binary variable or the binary value for a file variable.
Method POST /case-execution/{id}/variables/{varName}/data
Parameters Path Parameters  Name Description   id The id of the case execution to set the variable for.   varName The name of the variable to set.   Request Body For binary variables a multipart form submit with the following parts:
 Form Part Name Content Type Description   data application/octet-stream  The binary data to be set.</description>
    </item>
    
    <item>
      <title>Trigger Message Event Subscription</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/execution/message-event-subscription/post-message/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/execution/message-event-subscription/post-message/</guid>
      <description>Delivers a message to a specific execution by id, to trigger an existing message event subscription. Inject process variables as the message&amp;rsquo;s payload.
Method POST /execution/{id}/messageSubscriptions/{messageName}/trigger
Parameters Path Parameters  Name Description   id The id of the execution to submit the message to.   messageName The name of the message that the addressed subscription corresponds to.   Request Body A JSON object with the following properties:</description>
    </item>
    
    <item>
      <title>Update/Delete Process Variables</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/variables/post-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/variables/post-variables/</guid>
      <description>Updates or deletes the variables of a process instance by id. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
Method POST /process-instance/{id}/variables
Parameters Path Parameters  Name Description   id The id of the process instance to set variables for.   Request Body A JSON object with the following properties:
 Name Description   modifications A JSON object containing variable key-value pairs.</description>
    </item>
    
    <item>
      <title>历史和审批事件日志</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/history/</guid>
      <description>The History Event Stream provides audit information about executed process instances.
The process engine maintains the state of running process instances inside the database. This includes writing (1.) the state of a process instance to the database as it reaches a wait state and reading (2.) the state as process execution continues. We call this database the runtime database. In addition to maintaining the runtime state, the process engine creates an audit log providing audit information about executed process instances.</description>
    </item>
    
    <item>
      <title>Update history time to live</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/put-history-time-to-live/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/put-history-time-to-live/</guid>
      <description>Updates history time to live for process definition. The field is used within History cleanup.
Method PUT /process-definition/{id}/history-time-to-live
PUT /process-definition/key/{key}/history-time-to-live (updates the latest version of the process definition which belongs to no tenant)
PUT /process-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live (updates the latest version of the process definition for tenant)
Parameters Path Parameters  Name Description   id The id of the process definition to change history time to live.   key The key of the process definitions to change history time to live.</description>
    </item>
    
    <item>
      <title>Activate/Suspend Jobs By Process Instance Id</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job/put-activate-suspend-by-proc-inst-id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job/put-activate-suspend-by-proc-inst-id/</guid>
      <description>Activates or suspends jobs with the given process instance id.
Method PUT /job/suspended
Parameters Request Body A JSON object with the following properties:
 Name Description   processInstanceId The process instance id of the jobs to activate or suspend.   suspended A Boolean value which indicates whether to activate or suspend all jobs with the given process instance id. When the value is set to true, all jobs with the given process instance id will be suspended and when the value is set to false, all jobs with the given process instance id will be activated.</description>
    </item>
    
    <item>
      <title>Activate/Suspend Process Instance By Id</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/put-activate-suspend-by-id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/put-activate-suspend-by-id/</guid>
      <description>Activates or suspends a given process instance by id.
Method PUT /process-instance/{id}/suspended
Parameters Path Parameters  Name Description   id The id of the process instance to activate or suspend.   Request Body A JSON object with the following properties:
 Name Description   suspended A Boolean value which indicates whether to activate or suspend a given process instance. When the value is set to true, the given process instance will be suspended and when the value is set to false, the given process instance will be activated.</description>
    </item>
    
    <item>
      <title>Delete Definitions By Key</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/delete-by-key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/delete-by-key/</guid>
      <description>Deletes process definitions by a given key.
Method  DELETE /process-definition/key/{key}/delete Deletes process definitions which belong to no tenant id by a given key.
 DELETE /process-definition/key/{key}/tenant-id/{tenant-id}/delete Deletes process definitions which belong to a tenant id by a given key.
  Parameters Path Parameters  Name Description   key The key of the process definitions to be deleted.   tenant-id The id of the tenant the process definitions belong to.</description>
    </item>
    
    <item>
      <title>Delete Process Definition</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/delete-process-definition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/delete-process-definition/</guid>
      <description>Deletes a process definition from a deployment by id.
Method DELETE /process-definition/{id}
Parameters Path Parameters  Name Description   id The id of the process definition to be deleted.   Query Parameters  Name Description   cascade true, if all process instances, historic process instances and jobs for this process definition should be deleted.   skipCustomListeners true, if only the built-in ExecutionListeners should be notified with the end event.</description>
    </item>
    
    <item>
      <title>Get Deployed Form</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/get-deployed-form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/get-deployed-form/</guid>
      <description>Retrieves the deployed form that is referenced from a given task. For further information please refer to User Guide.
Method GET /task/{id}/deployed-form
Parameters Path Parameters  Name Description   id The id of the task to get the deployed form for.   Result An object with the deployed form content.
Response Codes  Code Media type Description   200 application/xhtml+xml Request successful.   200 application/json Request successful.</description>
    </item>
    
    <item>
      <title>Get Deployed Start Form</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get-deployed-start-form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/get-deployed-start-form/</guid>
      <description>Retrieves the deployed form that can be referenced from a start event. For further information please refer to User Guide.
Method  GET /process-definition/{id}/deployed-start-form
 GET /process-definition/key/{key}/deployed-start-form
 GET /process-definition/key/{key}/tenant-id/{tenant-id}/deployed-start-form
  Parameters Path Parameters  Name Description   id The id of the process definition to get the deployed start form for.   key The key of the process definition (the latest version thereof) to be retrieved.</description>
    </item>
    
    <item>
      <title>Get Rendered Task Form</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/get-rendered-form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/get-rendered-form/</guid>
      <description>Retrieves the rendered form for a task. This method can be used to get the HTML rendering of a Generated Task Form.
Method GET /task/{id}/rendered-form
Parameters Path Parameters  Name Description   id The id of the task to get the rendered form for.   Result An HTML response body providing the rendered (generated) form content.
Response Codes  Code Media type Description   200 application/xhtml+xml Request successful.</description>
    </item>
    
    <item>
      <title>Put Case Execution Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/variables/put-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/variables/put-variable/</guid>
      <description>Sets a variable of a given case execution by id.
Method PUT /case-execution/{id}/variables/{varName}
Parameters Path Parameters  Name Description   id The id of the case execution to set the variable for.   varName The name of the variable to set.   Request Body A JSON object with the following properties:
NameDescriptionvalueThe variable&#39;s value. For variables of type Object, the serialized value has to be submitted as a String value.</description>
    </item>
    
    <item>
      <title>Trigger Execution</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/execution/post-signal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/execution/post-signal/</guid>
      <description>Signals an execution by id. Can for example be used to explicitly skip user tasks or signal asynchronous continuations.
Method POST /execution/{id}/signal
Parameters Path Parameters  Name Description   id The id of the execution to signal.   Request Body A JSON object with the following properties:
 Name Description   variables A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object.</description>
    </item>
    
    <item>
      <title>密码哈希加密</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/password-hashing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/password-hashing/</guid>
      <description>This chapter is about how cryptographic password hashing is done in the Camunda platform. In particular, the hashing algorithm that is being used and the salt generation. If you are not familiar with these topics, we recommend reading the articles about cryptographic hash function, salt and secure password hashing.
The Camunda version 7.6 and earlier use the cryptographic hash function SHA-1. Since Camunda version 7.7 the hash function SHA-512 is used.</description>
    </item>
    
    <item>
      <title>部署缓存</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/deployment-cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/deployment-cache/</guid>
      <description>All process definitions are cached (after they have been parsed) to avoid polling the database every time a process definition is needed and because process definition data doesn&amp;rsquo;t change. This reduces the latency of referencing the process definitions and thus improves the performance of the system.
Customize the maximum Capacity of the Cache If one has many process definitions, the cache might occupy a large amount of memory and the capacity of the working memory may reach its limits.</description>
    </item>
    
    <item>
      <title>密码格式要求</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/password-policy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/password-policy/</guid>
      <description>This chapter is about configuring and using a password policy for engine-managed user accounts. A password policy makes sure that only passwords that meet certain criteria are allowed. A policy can consist of any number of rules. Violation of one of the policy&amp;rsquo;s rules results in an error and the user not being saved.
Since version 7.11.0, the engine comes with a standard password policy that is disabled by default and must be configured to use.</description>
    </item>
    
    <item>
      <title>Activate/Suspend Process Instance By Process Definition Id</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/put-activate-suspend-by-proc-def-id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/put-activate-suspend-by-proc-def-id/</guid>
      <description>Activates or suspends process instances with the given process definition id.
Method PUT /process-instance/suspended
Parameters Request Body A JSON object with the following properties:
 Name Description   processDefinitionId The process definition id of the process instances to activate or suspend.   suspended A Boolean value which indicates whether to activate or suspend the process instances with the given process definition id. When the value is set to true, the process instances with the given process definition id will be suspended and when the value is set to false, the process instances with the given process definition id will be activated.</description>
    </item>
    
    <item>
      <title>Delete Job</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/job/delete-job/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/job/delete-job/</guid>
      <description>Deletes a job by id.
Method DELETE /job/{id}
Parameters Path Parameters  Name Description   id The id of the job to be deleted.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.   404 application/json Job with given id does not exist. See the Introduction for the error response format.   500 application/json The job could not be deleted.</description>
    </item>
    
    <item>
      <title>Get Task Comments</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/comment/get-task-comments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/comment/get-task-comments/</guid>
      <description>Gets the comments for a task by id.
Method GET /task/{id}/comment
Parameters Path Parameters  Name Description   id The id of the task to retrieve the comments for.   Result A JSON object containing a list of task comments.
 Name Value Description   id String The id of the task comment.   userId String The id of the user who created the comment.   taskId String The id of the task to which the comment belongs.</description>
    </item>
    
    <item>
      <title>Put Local Case Execution Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/local-variables/put-local-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/local-variables/put-local-variable/</guid>
      <description>Sets a variable in the context of a given case execution. Update does not propagate upwards in the case execution hierarchy.
Method PUT /case-execution/{id}/localVariables/{varName}
Parameters Path Parameters  Name Description   id The id of the case execution to set the variable for.   varName The name of the variable to set.   Request Body A JSON object with the following properties:
NameDescriptionvalueThe variable&#39;s value.</description>
    </item>
    
    <item>
      <title>Update/Delete Case Execution Variables</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/variables/post-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/variables/post-variables/</guid>
      <description>Updates or deletes the variables of a case execution by id. Please note: deletion precedes update.
Method POST /case-execution/{id}/variables
Parameters Path Parameters  Name Description   id The id of the case execution to set variables for.   Request Body A JSON object with the following properties:
 Name Description   modifications A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object with the following properties: NameDescriptionvalueThe variable&#39;s value.</description>
    </item>
    
    <item>
      <title>流程中的过渡</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/transactions-in-processes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/transactions-in-processes/</guid>
      <description>The process engine is a piece of passive Java code which works in the Thread of the client. For instance, if you have a web application allowing users to start a new process instance and a user clicks on the corresponding button, some thread from the application server&amp;rsquo;s http-thread-pool will invoke the API method runtimeService.startProcessInstanceByKey(...), thus entering the process engine and starting a new process instance. We call this &amp;ldquo;borrowing the client thread&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Activate/Suspend Process Instance By Process Definition Key</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/put-activate-suspend-by-proc-def-key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/put-activate-suspend-by-proc-def-key/</guid>
      <description>Activates or suspends process instances with the given process definition key.
Method PUT /process-instance/suspended
Parameters Request Body A JSON object with the following properties:
 Name Description   processDefinitionKey The process definition key of the process instances to activate or suspend.   processDefinitionTenantId Only activate or suspend process instances of a process definition which belongs to a tenant with the given id.   processDefinitionWithoutTenantId Only activate or suspend process instances of a process definition which belongs to no tenant.</description>
    </item>
    
    <item>
      <title>Delete Case Execution Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/variables/delete-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/variables/delete-variable/</guid>
      <description>Deletes a variable of a given case execution by id.
Method DELETE /case-execution/{id}/variables/{varName}
Parameters Path Parameters  Name Description   id The id of the case execution to delete the variable from.   varName The name of the variable to delete.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.   Example Request DELETE /case-execution/aCaseExecutionId/variables/aVarName</description>
    </item>
    
    <item>
      <title>Get Task Comment</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/comment/get-task-comment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/comment/get-task-comment/</guid>
      <description>Retrieves a task comment by task id and comment id.
Method GET /task/{id}/comment/{commentId}
Parameters Path Parameters  Name Description   id The id of the task.   commentId The id of the comment to be retrieved.   Result A JSON object corresponding to the Comment interface in the engine. Its properties are as follows:
 Name Value Description   id String The id of the task comment.</description>
    </item>
    
    <item>
      <title>Job 执行器</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/the-job-executor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/the-job-executor/</guid>
      <description>A job is an explicit representation of a task to trigger process execution. A job is created when a timer event or a task marked for asynchronous execution (see transaction boundaries) is approached. Job processing can therefore be separated into three phases:
 Job Creation Job Acquisition Job Execution  While jobs are created during process execution, job acquisition and execution are the job executor&amp;rsquo;s responsibility. The following diagram illustrates these two steps:</description>
    </item>
    
    <item>
      <title>Post Local Case Execution Variable (Binary)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/local-variables/put-local-variable-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/local-variables/put-local-variable-binary/</guid>
      <description>Sets the serialized value for a binary variable or the binary value for a file variable.
Method POST /case-execution/{id}/localVariables/{varName}/data
Parameters Path Parameters  Name Description   id The id of the case execution to set the variable for.   varName The name of the variable to set.   Request Body For binary variables a multipart form submit with the following parts:
 Form Part Name Content Type Description   data application/octet-stream  The binary data to be set.</description>
    </item>
    
    <item>
      <title>Restart Process Instance</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/post-restart-process-instance-sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/post-restart-process-instance-sync/</guid>
      <description>Restarts process instances that were canceled or terminated synchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart asynchronously, use the Restart Process Instance Async method.
For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the user guide.
Method POST /process-definition/{id}/restart
Parameters Path Parameters  Name Description   id The id of the process definition of the process instances to restart.</description>
    </item>
    
    <item>
      <title>Restart Process Instance Async</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/post-restart-process-instance-async/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-definition/post-restart-process-instance-async/</guid>
      <description>Restarts process instances that were canceled or terminated asynchronously. Can also restart completed process instances. It will create a new instance using the original instance information. To execute the restart synchronously, use the Restart Process Instance method.
For more information about the difference between synchronous and asynchronous execution, please refer to the related section of the user guide.
Method POST /process-definition/{id}/restart-async
Parameters Path Parameters  Name Description   id The id of the process definition of the process instances to restart.</description>
    </item>
    
    <item>
      <title>Activate/Suspend Process Instance In Group</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/put-activate-suspend-in-group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/put-activate-suspend-in-group/</guid>
      <description>Activates or suspends process instances synchronously with a list of process instance ids, a process instance query, and/or a historical process instance query
Method PUT /process-instance/suspended
Parameters Request Body A JSON object with the following properties:
 Name Description   processInstanceIds A list of process instance ids which defines a group of process instances which will be activated or suspended by the operation.   processInstanceQuery A process instance query which defines a group of process instances which will be activated or suspended by the operation.</description>
    </item>
    
    <item>
      <title>Post Task Comment</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/comment/post-task-comment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/comment/post-task-comment/</guid>
      <description>Creates a comment for a task by id.
Method POST /task/{id}/comment/create
Parameters Path Parameters  Name Description   id The id of the task to add the comment to.   Request Body A JSON object with the following properties:
 Name Description   message The message of the task comment to create. Has to be of type String.   processInstanceId Assigns the comment to a process instance id.</description>
    </item>
    
    <item>
      <title>Put  Process Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/variables/put-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/variables/put-variable/</guid>
      <description>Sets a variable of a given process instance by id.
Method PUT /process-instance/{id}/variables/{varName}
Parameters Path Parameters  Name Description   id The id of the process instance to set the variable for.   varName The name of the variable to set.   Request Body NameDescriptionvalueThe variable&#39;s value. For variables of type Object, the serialized value has to be submitted as a String value.</description>
    </item>
    
    <item>
      <title>Update/Delete Local Case Execution Variables</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/local-variables/post-local-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/local-variables/post-local-variables/</guid>
      <description>Updates or deletes the variables in the context of a case execution. The updates do not propagate upwards in the case execution hierarchy. Please note: deletion precedes update.
Method POST /case-execution/{id}/localVariables
Parameters Path Parameters  Name Description   id The id of the case execution to set variables for.   Request Body A JSON object with the following properties:
 Name Description   modifications A JSON object containing variable key-value pairs.</description>
    </item>
    
    <item>
      <title>多租户</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/multi-tenancy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/multi-tenancy/</guid>
      <description>Multi-Tenancy regards the case in which a single Camunda installation should serve more than one tenant. For each tenant, certain guarantees of isolation should be made. For example, one tenant&amp;rsquo;s process instances should not interfere with those of another tenant.
Multi-Tenancy can be achieved in two different ways. One way is to use one process engine per tenant. The other way is to use just one process engine and associate the data with tenant identifiers.</description>
    </item>
    
    <item>
      <title>Activate/Suspend Process Instance In Batch</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/post-activate-suspend-in-batch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/process-instance/post-activate-suspend-in-batch/</guid>
      <description>Activates or suspends process instances asynchronously with a list of process instance ids, a process instance query, and/or a historical process instance query
Method POST /process-instance/suspended-async
Parameters Request Body A JSON object with the following properties:
 Name Description   processInstanceIds A list of process instance ids which defines a group of process instances which will be activated or suspended by the operation.   processInstanceQuery A process instance query which defines a group of process instances which will be activated or suspended by the operation.</description>
    </item>
    
    <item>
      <title>Get Task Attachments</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/attachment/get-task-attachments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/attachment/get-task-attachments/</guid>
      <description>Gets the attachments for a task.
Method GET /task/{id}/attachment
Parameters Path Parameters  Name Description   id The id of the task to retrieve the attachments for.   Result A JSON object containing a list of task attachments.
 Name Value Description   id String The id of the task attachment.   name String The name of the task attachment.   taskId String The id of the task to which the attachment belongs.</description>
    </item>
    
    <item>
      <title>Id 生成器</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/id-generator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/id-generator/</guid>
      <description>All persistent entities managed by the process engine (Process Instances, Tasks, &amp;hellip;) have unique Ids. These Ids uniquely identify an individual task, process instance, etc. When these entities are persisted to the database, the ids are used as primary keys in the corresponding database tables.
Out of the box, the process engine provides two Id generator implementations.
The Database Id Generator The Database Id Generator is implemented using a sequence Generator on top of the ACT_GE_PROPERTY table.</description>
    </item>
    
    <item>
      <title>External Task Client Spring Boot Starter</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/ext-client/spring-boot-starter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/ext-client/spring-boot-starter/</guid>
      <description>Camunda provides a Spring Boot Starter for the External Task Client. This allows you to easily add the External Task Client to your Spring Boot application by adding the following Maven dependency to your pom.xml file:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.camunda.bpm.springboot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camunda-bpm-spring-boot-starter-external-task-client&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.15.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  Please check out our External Task Client Spring Boot Starter Examples.
The Client can subscribe to one or more topic names that are defined in your BPMN process model.</description>
    </item>
    
    <item>
      <title>Get Task Attachment</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/attachment/get-task-attachment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/attachment/get-task-attachment/</guid>
      <description>Retrieves a task attachment by task id and attachment id.
Method GET /task/{id}/attachment/{attachmentId}
Parameters Path Parameters  Name Description   id The id of the task.   attachmentId The id of the attachment to be retrieved.   Result A JSON object corresponding to the Attachment interface in the engine. Its properties are as follows:
 Name Value Description   id String The id of the task attachment.</description>
    </item>
    
    <item>
      <title>日志</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/logging/</guid>
      <description>This page provides information about logging in Camunda.
SLF4J Most Camunda modules, including the Camunda engine, use slf4j as logging &amp;ldquo;facade&amp;rdquo;. This allows users to direct logging output to the logging &amp;ldquo;backend&amp;rdquo; of their choice, such as logback or log4j.
Preconfigured Logging with a Shared Process Engine When installing Camunda as a shared process engine in an application server, Camunda logging is pre-configured.
On all application servers except JBoss and Wildfly, logging is pre-configured using the slf4j-jdk14 bridge.</description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/metrics/</guid>
      <description>The process engine reports runtime metrics to the database that can help draw conclusions about usage, load, and performance of the Camunda Platform. Metrics are reported in the database tables ACT_RU_METER_LOG and ACT_RU_TASK_METER_LOG. Single metric entries in ACT_RU_METER_LOG consist of a metric identifier, a value as natural number in the Java long range that the metric took in a certain timespan and a name identifying the metric reporter. Task metric entries in ACT_RU_TASK_METER_LOG comprise a fixed-length, pseudonymized assignee value and the point in time it was assigned at.</description>
    </item>
    
    <item>
      <title>Post Task Attachment</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/attachment/post-task-attachment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/attachment/post-task-attachment/</guid>
      <description>Creates an attachment for a task.
Method POST /task/{id}/attachment/create
Parameters Path Parameters  Name Description   id The id of the task to add the attachment to.   Request Body A multipart form submit with the following parts:
 Form Part Name Content Type Description   attachment-name text/plain The name of the attachment.   attachment-description text/plain The description of the attachment.   attachment-type text/plain The type of the attachment.</description>
    </item>
    
    <item>
      <title>事件</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/incidents/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/incidents/</guid>
      <description>Incidents are notable events that happen in the process engine. Such incidents usually indicate some kind of problem related to process execution. Examples of such incidents may be a failed job with depleted retries (retries = 0), indicating that an execution is stuck and manual administrative action is necessary to repair the process instance. If such incidents arise, the process engine fires an internal event which can be handled by a configurable incident handler.</description>
    </item>
    
    <item>
      <title>安全指南</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/security/</guid>
      <description>This page provides an overview of how to secure a Camunda installation. For Camunda&amp;rsquo;s security policy, a list of security notices and a guide how to report vulnerabilities, please visit the general security documentation.
In order to secure a Camunda installation, Camunda itself must be configured correctly and it must be integrated correctly into its environment. This section also identifies areas where we consider security issues to be relevant for the specific Camunda Platform product and listed those in the subsequent sections.</description>
    </item>
    
    <item>
      <title>Camunda License Keys</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/license-use/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/license-use/</guid>
      <description>Some Camunda Platform features (e.g. enterprise plugins) require a license key. The license will be provided as a string by the Camunda support team. The license mechanism has no impact on the engine or other runtime components. The following section explains the various methods by which a Camunda license can be added to the Process Engine.
Deployment Scenarios and the License Key A Camunda license key should be applied per database.</description>
    </item>
    
    <item>
      <title>Get Task Attachment Content (binary)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/attachment/get-task-attachment-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/attachment/get-task-attachment-data/</guid>
      <description>Retrieves the binary content of a task attachment by task id and attachment id.
Method GET /task/{id}/attachment/{attachmentId}/data
Parameters Path Parameters  Name Description   id The id of the task.   attachmentId The id of the attachment to be retrieved.   Result Byte Stream.
Response Codes  Code Media type Description   200 application/octet-stream Request successful.   404 application/json The attachment content for given task and attachment id does not exist or the history of the engine is disabled.</description>
    </item>
    
    <item>
      <title>流程引擎插件</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/process-engine-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/process-engine-plugins/</guid>
      <description>The process engine configuration can be extended through process engine plugins. A process engine plugin is an extension to the process engine configuration.
A plugin must provide an implementation of the ProcessEnginePlugininterface.
Configure Process Engine Plugins Process engine plugins can be configured
 in the Camunda Platform Deployment Descriptors (bpm-platform.xml/processes.xml), in the JBoss Application Server 7/Wildfly configuration file (standalone.xml/domain.xml), using Spring Beans XML, programatically.  The following is an example of how to configure a process engine plugin in a bpm-platform.</description>
    </item>
    
    <item>
      <title>Delete Task Attachment</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/attachment/delete-task-attachment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/attachment/delete-task-attachment/</guid>
      <description>Removes an attachment from a task by id.
Method DELETE /task/{id}/attachment/{attachmentId}
Parameters Path Parameters  Name Description   id The id of the task.   attachmentId The id of the attachment to be removed.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.   403 application/json The history of the engine is disabled. See the Introduction for the error response format.</description>
    </item>
    
    <item>
      <title>身份服务 Identity Service</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/identity-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/identity-service/</guid>
      <description>The identity service is an API abstraction over various user/group repositories. The basic entities are
 User: a user identified by a unique Id Group: a group identified by a unique Id Membership: the relationship between users and groups Tenant: a tenant identified by a unique Id Tenant Membership: the relationship between tenants and users/groups  Example:
User demoUser = processEngine.getIdentityService() .createUserQuery() .userId(&amp;quot;demo&amp;quot;) .singleResult();  Camunda Platform distinguishes between read-only and writable user repositories.</description>
    </item>
    
    <item>
      <title>Authorization Service</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/authorization-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/authorization-service/</guid>
      <description>Camunda allows users to authorize access to the data it manages. This makes it possible to configure which user can access which process instances, tasks, etc&amp;hellip;
Authorization has a performance cost and introduces some complexity. It should only be used if required.
When is Authorization required? Not every Camunda setup needs to enable authorization. In many scenarios, Camunda is embedded into an application and the application itself ensures that users can only access data they are authorized to access.</description>
    </item>
    
    <item>
      <title>Delete Local Case Execution Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/local-variables/delete-local-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/case-execution/local-variables/delete-local-variable/</guid>
      <description>Deletes a variable in the context of a given case execution. Deletion does not propagate upwards in the case execution hierarchy.
Method DELETE /case-execution/{id}/localVariables/{varName}
Parameters Path Parameters  Name Description   id The id of the case execution to delete the variable from.   varName The name of the variable to delete.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.</description>
    </item>
    
    <item>
      <title>部署</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/deployments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/deployments/</guid>
      <description>Before a process (or case, or decision) can be executed by the process engine, it has to be deployed. A deployment is a logical entity that groups multiple resources that are deployed together. Deployments can be made programmatically via Java API or REST API, or declaratively for resources of a Process Application. This section covers advanced deployment concepts.
Deployments in a Clustered Scenario Before the process engine starts to perform a deployment, it tries to acquire an exclusive lock on a row in the table ACT_GE_PROPERTY.</description>
    </item>
    
    <item>
      <title>Get Local Task Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/local-variables/get-local-task-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/local-variables/get-local-task-variable/</guid>
      <description>Retrieves a variable from the context of a given task by id.
Method GET /task/{id}/localVariables/{varName}
Parameters Path Parameters  Name Description   id The id of the task to retrieve the variable from.   varName The name of the variable to get.   Query Parameters  Name Description   deserializeValue  Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).</description>
    </item>
    
    <item>
      <title>Get Local Task Variable (Binary)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/local-variables/get-local-task-variable-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/local-variables/get-local-task-variable-binary/</guid>
      <description>Retrieves a binary variable from the context of a given task by id. Applicable for byte array and file variables.
Method GET /task/{id}/localVariables/{varName}/data
Parameters Path Parameters  Name Description   id The id of the task to retrieve the variable from.   varName The name of the variable to get.   Result For binary variables or files without any MIME type information, a byte stream is returned.</description>
    </item>
    
    <item>
      <title>Get Task Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/variables/get-task-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/variables/get-task-variable/</guid>
      <description>Retrieves a variable from the context of a given task. The variable must be visible from the task. It is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on visiblity of variables.
Method GET /task/{id}/variables/{varName}
Parameters Path Parameters  Name Description   id The id of the task to retrieve the variable from.   varName The name of the variable to get.</description>
    </item>
    
    <item>
      <title>Get Task Variable (Binary)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/variables/get-task-variable-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/variables/get-task-variable-binary/</guid>
      <description>Retrieves a binary variable from the context of a given task. Applicable for byte array and file variables. The variable must be visible from the task. It is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on visiblity of variables.
Method GET /task/{id}/variables/{varName}/data
Parameters Path Parameters  Name Description   id The id of the task to retrieve the variable from.</description>
    </item>
    
    <item>
      <title>流程设计可视化</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/process-diagram-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/process-diagram-api/</guid>
      <description>A BPMN process diagram is a formidable place to visualize information around your process. We recommend to use JavaScript libraries to display process diagrams and enrich them with additional information.
In our web applications Cockpit and Tasklist, we use bpmn.io, a toolkit for rendering BPMN 2.0 process models directly in the browser. It allows adding additional information to the diagram and includes ways for user interaction. Although bpmn.io is still under development, its API is rather stable.</description>
    </item>
    
    <item>
      <title>时区</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/time-zones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/time-zones/</guid>
      <description>Process engine The Camunda engine uses the default time zone of the JVM when operating with dates:
 When reading datetime values from BPMN XML In REST responses When reading/writing DateTime values from/to the database  Database Database time zone and database sessions time zone are out of scope of the Camunda engine and must be configured explicitly.
However, Timestamp columns in the Camunda engine are using the TIMESTAMP [WITHOUT TIME ZONE] data type (the name differs in different database servers).</description>
    </item>
    
    <item>
      <title>Get Local Task Variables</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/local-variables/get-local-task-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/local-variables/get-local-task-variables/</guid>
      <description>Retrieves all variables of a given task by id.
Method GET /task/{id}/localVariables
Parameters Path Parameters  Name Description   id The id of the task to retrieve the variables from.   Query Parameters  Name Description   deserializeValues  Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).If set to true, a serializable variable will be deserialized on server side and transformed to JSON using Jackson&#39;s POJO/bean property introspection feature.</description>
    </item>
    
    <item>
      <title>Get Task Variables</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/variables/get-task-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/variables/get-task-variables/</guid>
      <description>Retrieves all variables visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on visiblity of variables.
Method GET /task/{id}/variables
Parameters Path Parameters  Name Description   id The id of the task to retrieve the variables from.   Query Parameters  Name Description   deserializeValues  Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).</description>
    </item>
    
    <item>
      <title>Update/Delete Local Task Variables</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/local-variables/post-modify-local-task-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/local-variables/post-modify-local-task-variables/</guid>
      <description>Updates or deletes the variables in the context of a task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
Method POST /task/{id}/localVariables
Parameters Path Parameters  Name Description   id The id of the task to set variables for.   Request Body A JSON object with the following properties:
 Name Description   modifications A JSON object containing variable key-value pairs.</description>
    </item>
    
    <item>
      <title>Update/Delete Task Variables</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/variables/post-modify-task-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/variables/post-modify-task-variables/</guid>
      <description>Updates or deletes the variables visible from the task. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on visiblity of variables.
Method POST /task/{id}/variables
Parameters Path Parameters  Name Description   id The id of the task to set variables for.</description>
    </item>
    
    <item>
      <title>批处理</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/batch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/batch/</guid>
      <description>Batch is a concept to offload workload from the current execution to be processed in the background. This allows to run a process engine command asynchronously on a large set of instances without blocking. It also decouples the separate command invocations from each other.
For example the process instance migration command can be executed using a batch. This allows to migrate process instances asynchronously. In a synchronous process instance migration, all migrations are executed in a single transaction.</description>
    </item>
    
    <item>
      <title>Batch operations</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/batch-operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/batch-operations/</guid>
      <description>The following operations can be executed asynchronously
 Process Instance Migration Cancellation of running Process Instances Deletion of Historic Process Instances Update suspend state of process instances Setting retries of jobs associated with Process Instances Process Instance Modification Process Instance Restart Setting retries of external tasks Set Variables to Process Instances Set a Removal Time to Historic Process Instances Set a Removal Time to Historic Decision Instances Set a Removal Time to Historic Batches  All batch operations rely on corresponding methods that provide the possibility to operate on a list of entities synchronously.</description>
    </item>
    
    <item>
      <title>Put Local Task Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/local-variables/put-local-task-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/local-variables/put-local-task-variable/</guid>
      <description>Sets a variable in the context of a given task.
Method PUT /task/{id}/localVariables/{varName}
Parameters Path Parameters  Name Description   id The id of the task to set the variable for.   varName The name of the variable to set.   Request Body A JSON object with the following properties:
NameDescriptionvalueThe variable&#39;s value. For variables of type Object, the serialized value has to be submitted as a String value.</description>
    </item>
    
    <item>
      <title>Put Task Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/variables/put-task-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/variables/put-task-variable/</guid>
      <description>Updates a process variable that is visible from the Task scope. A variable is visible from the task if it is a local task variable, or declared in a parent scope of the task. See the documentation on variable scopes and visibility.
Note: If a variable doesn&amp;rsquo;t exist, the variable is created in the top-most scope visible from the task.
Method PUT /task/{id}/variables/{varName}
Parameters Path Parameters  Name Description   id The id of the task to set the variable for.</description>
    </item>
    
    <item>
      <title>错误处理</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/error-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/process-engine/error-handling/</guid>
      <description>Error Handling Strategies There are a couple of basic strategies to handle errors and exceptions within processes. The decision which strategy to use depends on:
 Technical vs. Business Errors: Does the error have some business meaning and causes an alternative process flow (like &amp;ldquo;item not on stock&amp;rdquo;) or is it a technical malfunction (like &amp;ldquo;network currently down&amp;rdquo;)? Explicit error handling or generic approach: For some situations you want to explicitly model what should happen in case of an error (typically for business errors).</description>
    </item>
    
    <item>
      <title>Post Local Task Variable (Binary)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/local-variables/post-local-task-variable-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/local-variables/post-local-task-variable-binary/</guid>
      <description>Sets the serialized value for a binary variable or the binary value for a file variable.
Method POST /task/{id}/localVariables/{varName}/data
Parameters Path Parameters  Name Description   id The id of the task to set the variable for.   varName The name of the variable to set.   Request Body For binary variables a multipart form submit with the following parts:
 Form Part Name Content Type Description   data application/octet-stream  The binary data to be set.</description>
    </item>
    
    <item>
      <title>Post Task Variable (Binary)</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/variables/post-task-variable-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/variables/post-task-variable-binary/</guid>
      <description>Sets the serialized value for a binary variable or the binary value for a file variable visible from the task. A variable is visible from the task if it is a local task variable or declared in a parent scope of the task. See documentation on visiblity of variables.
Method POST /task/{id}/variables/{varName}/data
Parameters Path Parameters  Name Description   id The id of the task to set the variable for.</description>
    </item>
    
    <item>
      <title>Camunda Platform RPA Bridge</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/camunda-bpm-rpa-bridge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/camunda-bpm-rpa-bridge/</guid>
      <description>The Camunda RPA Bridge is a standalone application that allows calling RPA (robotic process automation) bots from BPMN models deployed to a Camunda engine. RPA bots can be orchestrated as External Tasks using the Camunda Modeler and Cawemo.
For detailed instructions on how to connect your first RPA bot to a BPMN model (using Cawemo and the Camunda Modeler) and execute it from a running process instance using the Camunda engine, head over to our installation guide or the Getting Started Guide.</description>
    </item>
    
    <item>
      <title>Delete Local Task Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/local-variables/delete-local-task-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/local-variables/delete-local-task-variable/</guid>
      <description>Removes a local variable from a task by id.
Method DELETE /task/{id}/localVariables/{varName}
Parameters Path Parameters  Name Description   id The id of the task.   varName The name of the variable to be removed.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.   500 application/json Task id is null or does not exist.</description>
    </item>
    
    <item>
      <title>Delete Task Variable</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/variables/delete-task-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/variables/delete-task-variable/</guid>
      <description>Removes a variable that is visible to a task. A variable is visible to a task if it is a local task variable or declared in a parent scope of the task. See documentation on visiblity of variables.
Method DELETE /task/{id}/variables/{varName}
Parameters Path Parameters  Name Description   id The id of the task.   varName The name of the variable to be removed.   Result This method returns no content.</description>
    </item>
    
    <item>
      <title>Version Compatibility</title>
      <link>http://camunda-cn.shaochenfeng.com/user-guide/ext-client/compatibility-matrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/user-guide/ext-client/compatibility-matrix/</guid>
      <description>Each version of the Camunda Platform is bound to a specific version of the External Task Clients.
Heads UpStarting with version 7.15.0, Camunda Platform and its compatible Java External Task Client always share the same version.
 Camunda Platform version NodeJs Java   7.9.x 1.0.x 1.0.x   7.10.x 1.1.x 1.1.x   7.11.x 1.1.x, 1.2.x 1.2.x   7.12.x 1.3.x 1.3.x   7.13.x 2.0.x 1.3.x   7.</description>
    </item>
    
    <item>
      <title>Get Task Form Variables</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/get-form-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/get-form-variables/</guid>
      <description>Retrieves the form variables for a task. The form variables take form data specified on the task into account. If form fields are defined, the variable types and default values of the form fields are taken into account.
Method GET /task/{id}/form-variables
Parameters Path Parameters  Name Description   id The id of the task to retrieve the variables for.   Query Parameters  Name Description   variableNames A comma-separated list of variable names.</description>
    </item>
    
    <item>
      <title>Create Task</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-create/</guid>
      <description>Creates a new task.
Method POST /task/create
Parameters Request Body A JSON object with the following properties:
 Name Type Description   id String The id of the task.   name String The task name.   description String The task description.   assignee String The user to assign to this task.   owner String The owner of the task.    delegationState String The delegation state of the task.</description>
    </item>
    
    <item>
      <title>Update a Task</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/put-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/put-update/</guid>
      <description>Updates a task.
Method PUT /task/{id}/
Parameters Request Body A JSON object with the following properties:
 Name Type Description   name String The task name.   description String The task description.   assignee String The user to assign to this task.   owner String The owner of the task.    delegationState String The delegation state of the task. Corresponds to the DelegationState enum in the engine.</description>
    </item>
    
    <item>
      <title>Handle Task BPMN Error</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-bpmn-error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-bpmn-error/</guid>
      <description>Reports a business error in the context of a running task by id. The error code must be specified to identify the BPMN error handler. See the documentation for Reporting Bpmn Error in User Tasks.
Method POST /task/{id}/bpmnError
Parameters Path Parameters  Name Description   id The id of the task a BPMN error is reported for.   Request Body A JSON object with the following properties:</description>
    </item>
    
    <item>
      <title>Handle Task BPMN Escalation</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-bpmn-escalation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/post-bpmn-escalation/</guid>
      <description>Reports an escalation in the context of a running task by id. The escalation code must be specified to identify the escalation handler. See the documentation for Reporting Bpmn Escalation in User Tasks.
Method POST /task/{id}/bpmnEscalation
Parameters Path Parameters  Name Description   id The id of the task in which context a BPMN escalation is reported.   Request Body A JSON object with the following properties:</description>
    </item>
    
    <item>
      <title>Delete Task</title>
      <link>http://camunda-cn.shaochenfeng.com/reference/rest/task/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/reference/rest/task/delete/</guid>
      <description>Removes a task by id.
Method DELETE /task/{id}
Parameters Path Parameters  Name Description   id The id of the task to be removed.   Result This method returns no content.
Response Codes  Code Media type Description   204  Request successful.   400 application/json  Bad Request. The Task with the given id does not exist. See the Introduction for the error response format.</description>
    </item>
    
    <item>
      <title>Update Web Application Plugins from 7.4 to 7.5</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/74-to-75/webapp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/74-to-75/webapp/</guid>
      <description>This page describes the changes in web application plugins.
Cockpit Dashboard Since 7.5, the dashboard and sections of the Cockpit have been re-organized and new names have been given to the plugin points.
Old plugins will still be visible on the dashboard until you change their namespace (from cockpit.dashboard to cockpit.dashboard.section).
Read more about cockpit dashboard plugins.
Available modules Since 7.5, the availability of modules in plugins has been changed.</description>
    </item>
    
    <item>
      <title>Update Web Application Plugins from 7.5 to 7.6</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/75-to-76/webapp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/75-to-76/webapp/</guid>
      <description>This page describes the changes in web application plugins.
Cockpit Dashboard With Camunda Platform 7.6, the dashboard and sections of Cockpit have been re-organized and new names have been given to the plugin points.
The cockpit.dashboard plugin point will allow to add your custom views at the bottom of the dashboard.
Metrics Read more about cockpit dashboard plugins.
Version changes The following modules have been updated to a newer version:</description>
    </item>
    
    <item>
      <title>Update Web Application Plugins from 7.6 to 7.7</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/76-to-77/webapp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/76-to-77/webapp/</guid>
      <description>This page describes the changes in web application plugins.
Tasklist translations With Camunda Platform 7.7, some Tasklist translations have changed.
The previously called LESS_VARIABLES and MORE_VARIABLES have been renamed to SHOW_LESS and SHOW_MORE.</description>
    </item>
    
    <item>
      <title>Update a Glassfish Installation from 7.1 to 7.2</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/71-to-72/glassfish/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/71-to-72/glassfish/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Glassfish 3.1 application server in a shared process engine setting. For the entire migration procedure, refer to the migration guide. If not already done, make sure to download the Camunda Platform 7.2 Glassfish distribution.
The update procedure takes the following steps:
 Uninstall the Camunda libraries and archives Add the new Camunda libraries Install optional Camunda dependencies Configure process engines Install the Camunda archive Install the Camunda Platform web applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Glassfish Installation from 7.2 to 7.3</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/72-to-73/glassfish/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/72-to-73/glassfish/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Glassfish 3.1 application server in a shared process engine setting. For the entire migration procedure, refer to the migration guide. If not already done, make sure to download the Camunda Platform 7.3 Glassfish distribution.
The update procedure takes the following steps:
 Uninstall the Camunda libraries and archives Replace Camunda core libraries Replace optional Camunda dependencies Maintain Camunda Platform configuration (optional) Install the Camunda archive Install the Camunda Platform web applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Glassfish Installation from 7.3 to 7.4</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/73-to-74/glassfish/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/73-to-74/glassfish/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Glassfish 3.1 application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.4 Glassfish distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Libraries Maintain the Camunda Platform Configuration Maintain Process Engine Configuration Maintain Process Applications Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Glassfish Installation from 7.4 to 7.5</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/74-to-75/glassfish/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/74-to-75/glassfish/</guid>
      <description>ENVIRONMENT OUT OF SUPPORTFrom Camunda Platform 7.5 onwards Glassfish Application Server is not supported anymore. Please have a look at the list of Supported Environments.
The following steps describe how to update the Camunda artifacts on a Glassfish 3.1 application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.</description>
    </item>
    
    <item>
      <title>Update a JBoss Installation from 7.1 to 7.2</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/71-to-72/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/71-to-72/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7 server in a shared process engine setting. For the entire migration procedure, refer to the migration guide. If not already done, make sure to download the Camunda Platform 7.2 JBoss distribution.
The update procedure takes the following steps:
 Update the Camunda Platform modules Configure process engines Configure optional Camunda Platform extensions (optional) Update Camunda web applications  Whenever the instructions are to replace a module, make sure to delete the previous version of the module first to avoid orphan jars.</description>
    </item>
    
    <item>
      <title>Update a JBoss Installation from 7.2 to 7.3</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/72-to-73/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/72-to-73/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7 and Wildfly 8 server in a shared process engine setting. For the entire migration procedure, refer to the migration guide. If not already done, make sure to download the Camunda Platform 7.3 JBoss distribution or Camunda Platform 7.3 Wildfly distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss Installation from 7.3 to 7.4</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/73-to-74/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/73-to-74/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7 and Wildfly 8 server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.4 JBoss distribution or Camunda Platform 7.4 Wildfly distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.10 to 7.11</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/710-to-711/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/710-to-711/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7 and Wildfly server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.11 JBoss distribution or Camunda Platform 7.11 Wildfly distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.11 to 7.12</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/711-to-712/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/711-to-712/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7 and Wildfly server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.12 JBoss distribution or Camunda Platform 7.12 Wildfly distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.12 to 7.13</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/712-to-713/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/712-to-713/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7 and Wildfly server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.13 JBoss distribution or Camunda Platform 7.13 Wildfly distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.13 to 7.14</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/713-to-714/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/713-to-714/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7 and Wildfly server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.14 JBoss distribution or Camunda Platform 7.14 Wildfly distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.14 to 7.15</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/714-to-715/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/714-to-715/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7 and Wildfly server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.15 JBoss distribution or Camunda Platform 7.15 Wildfly distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.15 to 7.16</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/715-to-716/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/715-to-716/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7 and Wildfly server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.16 JBoss distribution or Camunda Platform 7.16 Wildfly distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.4 to 7.5</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/74-to-75/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/74-to-75/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7, Wildfly 8 and Wildfly 10 server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.5 JBoss distribution, Camunda Platform 7.5 Wildfly 8 or Camunda Platform 7.5 Wildfly 10 distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.5 to 7.6</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/75-to-76/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/75-to-76/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7, Wildfly 8 and Wildfly 10 server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.6 JBoss distribution, Camunda Platform 7.6 Wildfly 8 or Camunda Platform 7.6 Wildfly 10 distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.6 to 7.7</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/76-to-77/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/76-to-77/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7, Wildfly 8 and Wildfly 10 server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.7 JBoss distribution, Camunda Platform 7.7 Wildfly 8 or Camunda Platform 7.7 Wildfly 10 distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.7 to 7.8</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/77-to-78/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/77-to-78/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7, Wildfly 8 and Wildfly 10 server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.8 JBoss distribution, Camunda Platform 7.8 Wildfly 8 or Camunda Platform 7.8 Wildfly 10 distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.8 to 7.9</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/78-to-79/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/78-to-79/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7, Wildfly 8 and Wildfly 10 server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.9 JBoss distribution, Camunda Platform 7.9 Wildfly 8 or Camunda Platform 7.9 Wildfly 10 distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.9 to 7.10</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/79-to-710/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/79-to-710/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7 and Wildfly server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.10 JBoss distribution or Camunda Platform 7.10 Wildfly distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.1 to 7.2</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/71-to-72/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/71-to-72/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire migration procedure, refer to the migration guide. If not already done, make sure to download the Camunda Platform 7.2 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda Platform core libraries Update and configure optional Camunda Platform libraries (optional) Configure process engines Update Camunda web applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.10 to 7.11</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/710-to-711/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/710-to-711/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.11 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda Platform Core Libraries Update Optional Camunda Platform Libraries Maintain Process Applications Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.11 to 7.12</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/711-to-712/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/711-to-712/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.12 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda Platform Core Libraries Update Optional Camunda Platform Libraries Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.12 to 7.13</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/712-to-713/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/712-to-713/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.13 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda Platform Core Libraries Update Optional Camunda Platform Libraries Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.13 to 7.14</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/713-to-714/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/713-to-714/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.14 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda Platform Core Libraries Update Optional Camunda Platform Libraries Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.14 to 7.15</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/714-to-715/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/714-to-715/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.15 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda Platform Core Libraries Update Optional Camunda Platform Libraries Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.15 to 7.16</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/715-to-716/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/715-to-716/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.16 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda Platform Core Libraries Update Optional Camunda Platform Libraries Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.2 to 7.3</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/72-to-73/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/72-to-73/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire migration procedure, refer to the migration guide. If not already done, make sure to download the Camunda Platform 7.3 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda Platform core libraries Update the optional Camunda Platform libraries Update Camunda web applications Configure Process Engines  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.3 to 7.4</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/73-to-74/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/73-to-74/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.4 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda Platform Core Libraries Update Optional Camunda Platform Libraries Maintain Process Engine Configuration Maintain Process Applications Update Web Applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.4 to 7.5</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/74-to-75/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/74-to-75/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.5 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda Platform Core Libraries Update Optional Camunda Platform Libraries Maintain Process Applications Update Web Applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.5 to 7.6</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/75-to-76/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/75-to-76/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.6 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda Platform Core Libraries Update Optional Camunda Platform Libraries Maintain Process Applications Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.6 to 7.7</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/76-to-77/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/76-to-77/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.7 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda Platform Core Libraries Update Optional Camunda Platform Libraries Maintain Process Applications Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.7 to 7.8</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/77-to-78/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/77-to-78/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.8 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda Platform Core Libraries Update Optional Camunda Platform Libraries Maintain Process Applications Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.8 to 7.9</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/78-to-79/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/78-to-79/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.9 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda Platform Core Libraries Update Optional Camunda Platform Libraries Maintain Process Applications Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.9 to 7.10</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/79-to-710/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/79-to-710/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.10 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda Platform Core Libraries Update Optional Camunda Platform Libraries Maintain Process Applications Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Application Server Installation from 7.1 to 7.2</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/71-to-72/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/71-to-72/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM was application server in a shared process engine setting. For the entire migration procedure, refer to the migration guide. If not already done, make sure to download the Camunda Platform 7.2 IBM was distribution.
The update procedure takes the following steps:
 Uninstall the Camunda libraries and archives Add the new Camunda libraries Install optional Camunda dependencies Configure process engines Create a shared Camunda library Install the Camunda archive Install the Camunda Platform web applications Associate existing applications with shared library  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.10 to 7.11</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/710-to-711/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/710-to-711/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.11 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.11 to 7.12</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/711-to-712/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/711-to-712/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.12 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.12 to 7.13</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/712-to-713/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/712-to-713/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.13 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.13 to 7.14</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/713-to-714/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/713-to-714/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.14 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.14 to 7.15</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/714-to-715/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/714-to-715/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.15 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.15 to 7.16</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/715-to-716/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/715-to-716/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.16 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.2 to 7.3</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/72-to-73/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/72-to-73/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire migration procedure, refer to the migration guide. If not already done, make sure to download the Camunda Platform 7.3 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda libraries and archives Replace Camunda core libraries Replace optional Camunda dependencies Maintain Camunda Platform configuration (optional) Install the Camunda archive Install the Camunda Platform web applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.3 to 7.4</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/73-to-74/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/73-to-74/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.4 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Maintain Process Engine Configuration Maintain Process Applications Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.4 to 7.5</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/74-to-75/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/74-to-75/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.5 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Maintain Process Applications Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.5 to 7.6</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/75-to-76/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/75-to-76/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.6 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.6 to 7.7</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/76-to-77/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/76-to-77/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.7 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.7 to 7.8</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/77-to-78/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/77-to-78/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.8 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.8 to 7.9</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/78-to-79/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/78-to-79/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.9 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.9 to 7.10</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/79-to-710/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/79-to-710/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.10 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.1 to 7.2</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/71-to-72/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/71-to-72/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire migration procedure, refer to the migration guide. If not already done, make sure to download the Camunda Platform 7.2 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda libraries and archives Add the new Camunda libraries Install optional Camunda dependencies Configure process engines Install the Camunda archive Install the Camunda Platform web applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.10 to 7.11</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/710-to-711/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/710-to-711/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.11 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.11 to 7.12</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/711-to-712/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/711-to-712/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.12 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.12 to 7.13</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/712-to-713/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/712-to-713/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.13 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.13 to 7.14</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/713-to-714/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/713-to-714/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.14 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.14 to 7.15</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/714-to-715/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/714-to-715/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.15 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.15 to 7.16</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/715-to-716/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/715-to-716/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.16 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.2 to 7.3</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/72-to-73/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/72-to-73/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire migration procedure, refer to the migration guide. If not already done, make sure to download the Camunda Platform 7.3 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda libraries and archives Replace Camunda core libraries Replace optional Camunda dependencies Maintain Camunda Platform configuration (optional) Install the Camunda archive Install the Camunda Platform web applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.3 to 7.4</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/73-to-74/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/73-to-74/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.4 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Maintain Process Engine Configuration Maintain Process Applications Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.4 to 7.5</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/74-to-75/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/74-to-75/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.5 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Maintain Process Applications Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.5 to 7.6</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/75-to-76/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/75-to-76/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.6 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.6 to 7.7</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/76-to-77/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/76-to-77/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.7 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.7 to 7.8</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/77-to-78/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/77-to-78/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.8 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.8 to 7.9</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/78-to-79/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/78-to-79/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.9 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.9 to 7.10</title>
      <link>http://camunda-cn.shaochenfeng.com/update/minor/79-to-710/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://camunda-cn.shaochenfeng.com/update/minor/79-to-710/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda Platform 7.10 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda Platform Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
  </channel>
</rss>